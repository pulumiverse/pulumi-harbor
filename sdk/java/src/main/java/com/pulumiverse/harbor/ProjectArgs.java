// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.harbor;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProjectArgs Empty = new ProjectArgs();

    /**
     * Project allowlist allows vulnerabilities in this list to be ignored in this project when pushing and pulling images. Should be in the format or `[&#34;CVE-123&#34;, &#34;CVE-145&#34;]` or `[&#34;CVE-123&#34;]`
     * 
     */
    @Import(name="cveAllowlists")
    private @Nullable Output<List<String>> cveAllowlists;

    /**
     * @return Project allowlist allows vulnerabilities in this list to be ignored in this project when pushing and pulling images. Should be in the format or `[&#34;CVE-123&#34;, &#34;CVE-145&#34;]` or `[&#34;CVE-123&#34;]`
     * 
     */
    public Optional<Output<List<String>>> cveAllowlists() {
        return Optional.ofNullable(this.cveAllowlists);
    }

    /**
     * Prevent deployment of images with vulnerability severity equal or higher than the specified value. Images must be scanned before this takes effect. Possible values: `critical`, `high`, `medium`, `low`, `none`. (Default: `&#34;&#34;` - empty)
     * 
     */
    @Import(name="deploymentSecurity")
    private @Nullable Output<String> deploymentSecurity;

    /**
     * @return Prevent deployment of images with vulnerability severity equal or higher than the specified value. Images must be scanned before this takes effect. Possible values: `critical`, `high`, `medium`, `low`, `none`. (Default: `&#34;&#34;` - empty)
     * 
     */
    public Optional<Output<String>> deploymentSecurity() {
        return Optional.ofNullable(this.deploymentSecurity);
    }

    /**
     * Enables Content Trust for project. When enabled it queries the embedded docker notary server. Can be set to `&#34;true&#34;` or `&#34;false&#34;` (Default: false)
     * 
     */
    @Import(name="enableContentTrust")
    private @Nullable Output<Boolean> enableContentTrust;

    /**
     * @return Enables Content Trust for project. When enabled it queries the embedded docker notary server. Can be set to `&#34;true&#34;` or `&#34;false&#34;` (Default: false)
     * 
     */
    public Optional<Output<Boolean>> enableContentTrust() {
        return Optional.ofNullable(this.enableContentTrust);
    }

    /**
     * A boolean that indicates all repositories should be deleted from the project so that the project can be destroyed without error. These repositories are *not* recoverable.
     * 
     */
    @Import(name="forceDestroy")
    private @Nullable Output<Boolean> forceDestroy;

    /**
     * @return A boolean that indicates all repositories should be deleted from the project so that the project can be destroyed without error. These repositories are *not* recoverable.
     * 
     */
    public Optional<Output<Boolean>> forceDestroy() {
        return Optional.ofNullable(this.forceDestroy);
    }

    /**
     * The name of the project that will be created in harbor.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the project that will be created in harbor.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The project will be public accessibility. Can be set to `&#34;true&#34;` or `&#34;false&#34;` (Default: false)
     * 
     */
    @Import(name="public")
    private @Nullable Output<String> public_;

    /**
     * @return The project will be public accessibility. Can be set to `&#34;true&#34;` or `&#34;false&#34;` (Default: false)
     * 
     */
    public Optional<Output<String>> public_() {
        return Optional.ofNullable(this.public_);
    }

    /**
     * To enabled project as Proxy Cache
     * 
     */
    @Import(name="registryId")
    private @Nullable Output<Integer> registryId;

    /**
     * @return To enabled project as Proxy Cache
     * 
     */
    public Optional<Output<Integer>> registryId() {
        return Optional.ofNullable(this.registryId);
    }

    /**
     * The storage quota of the project in GB&#39;s
     * 
     */
    @Import(name="storageQuota")
    private @Nullable Output<Integer> storageQuota;

    /**
     * @return The storage quota of the project in GB&#39;s
     * 
     */
    public Optional<Output<Integer>> storageQuota() {
        return Optional.ofNullable(this.storageQuota);
    }

    /**
     * Images will be scanned for vulnerabilities when push to harbor. Can be set to `&#34;true&#34;` or `&#34;false&#34;` (Default: true)
     * 
     */
    @Import(name="vulnerabilityScanning")
    private @Nullable Output<Boolean> vulnerabilityScanning;

    /**
     * @return Images will be scanned for vulnerabilities when push to harbor. Can be set to `&#34;true&#34;` or `&#34;false&#34;` (Default: true)
     * 
     */
    public Optional<Output<Boolean>> vulnerabilityScanning() {
        return Optional.ofNullable(this.vulnerabilityScanning);
    }

    private ProjectArgs() {}

    private ProjectArgs(ProjectArgs $) {
        this.cveAllowlists = $.cveAllowlists;
        this.deploymentSecurity = $.deploymentSecurity;
        this.enableContentTrust = $.enableContentTrust;
        this.forceDestroy = $.forceDestroy;
        this.name = $.name;
        this.public_ = $.public_;
        this.registryId = $.registryId;
        this.storageQuota = $.storageQuota;
        this.vulnerabilityScanning = $.vulnerabilityScanning;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectArgs $;

        public Builder() {
            $ = new ProjectArgs();
        }

        public Builder(ProjectArgs defaults) {
            $ = new ProjectArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cveAllowlists Project allowlist allows vulnerabilities in this list to be ignored in this project when pushing and pulling images. Should be in the format or `[&#34;CVE-123&#34;, &#34;CVE-145&#34;]` or `[&#34;CVE-123&#34;]`
         * 
         * @return builder
         * 
         */
        public Builder cveAllowlists(@Nullable Output<List<String>> cveAllowlists) {
            $.cveAllowlists = cveAllowlists;
            return this;
        }

        /**
         * @param cveAllowlists Project allowlist allows vulnerabilities in this list to be ignored in this project when pushing and pulling images. Should be in the format or `[&#34;CVE-123&#34;, &#34;CVE-145&#34;]` or `[&#34;CVE-123&#34;]`
         * 
         * @return builder
         * 
         */
        public Builder cveAllowlists(List<String> cveAllowlists) {
            return cveAllowlists(Output.of(cveAllowlists));
        }

        /**
         * @param cveAllowlists Project allowlist allows vulnerabilities in this list to be ignored in this project when pushing and pulling images. Should be in the format or `[&#34;CVE-123&#34;, &#34;CVE-145&#34;]` or `[&#34;CVE-123&#34;]`
         * 
         * @return builder
         * 
         */
        public Builder cveAllowlists(String... cveAllowlists) {
            return cveAllowlists(List.of(cveAllowlists));
        }

        /**
         * @param deploymentSecurity Prevent deployment of images with vulnerability severity equal or higher than the specified value. Images must be scanned before this takes effect. Possible values: `critical`, `high`, `medium`, `low`, `none`. (Default: `&#34;&#34;` - empty)
         * 
         * @return builder
         * 
         */
        public Builder deploymentSecurity(@Nullable Output<String> deploymentSecurity) {
            $.deploymentSecurity = deploymentSecurity;
            return this;
        }

        /**
         * @param deploymentSecurity Prevent deployment of images with vulnerability severity equal or higher than the specified value. Images must be scanned before this takes effect. Possible values: `critical`, `high`, `medium`, `low`, `none`. (Default: `&#34;&#34;` - empty)
         * 
         * @return builder
         * 
         */
        public Builder deploymentSecurity(String deploymentSecurity) {
            return deploymentSecurity(Output.of(deploymentSecurity));
        }

        /**
         * @param enableContentTrust Enables Content Trust for project. When enabled it queries the embedded docker notary server. Can be set to `&#34;true&#34;` or `&#34;false&#34;` (Default: false)
         * 
         * @return builder
         * 
         */
        public Builder enableContentTrust(@Nullable Output<Boolean> enableContentTrust) {
            $.enableContentTrust = enableContentTrust;
            return this;
        }

        /**
         * @param enableContentTrust Enables Content Trust for project. When enabled it queries the embedded docker notary server. Can be set to `&#34;true&#34;` or `&#34;false&#34;` (Default: false)
         * 
         * @return builder
         * 
         */
        public Builder enableContentTrust(Boolean enableContentTrust) {
            return enableContentTrust(Output.of(enableContentTrust));
        }

        /**
         * @param forceDestroy A boolean that indicates all repositories should be deleted from the project so that the project can be destroyed without error. These repositories are *not* recoverable.
         * 
         * @return builder
         * 
         */
        public Builder forceDestroy(@Nullable Output<Boolean> forceDestroy) {
            $.forceDestroy = forceDestroy;
            return this;
        }

        /**
         * @param forceDestroy A boolean that indicates all repositories should be deleted from the project so that the project can be destroyed without error. These repositories are *not* recoverable.
         * 
         * @return builder
         * 
         */
        public Builder forceDestroy(Boolean forceDestroy) {
            return forceDestroy(Output.of(forceDestroy));
        }

        /**
         * @param name The name of the project that will be created in harbor.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the project that will be created in harbor.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param public_ The project will be public accessibility. Can be set to `&#34;true&#34;` or `&#34;false&#34;` (Default: false)
         * 
         * @return builder
         * 
         */
        public Builder public_(@Nullable Output<String> public_) {
            $.public_ = public_;
            return this;
        }

        /**
         * @param public_ The project will be public accessibility. Can be set to `&#34;true&#34;` or `&#34;false&#34;` (Default: false)
         * 
         * @return builder
         * 
         */
        public Builder public_(String public_) {
            return public_(Output.of(public_));
        }

        /**
         * @param registryId To enabled project as Proxy Cache
         * 
         * @return builder
         * 
         */
        public Builder registryId(@Nullable Output<Integer> registryId) {
            $.registryId = registryId;
            return this;
        }

        /**
         * @param registryId To enabled project as Proxy Cache
         * 
         * @return builder
         * 
         */
        public Builder registryId(Integer registryId) {
            return registryId(Output.of(registryId));
        }

        /**
         * @param storageQuota The storage quota of the project in GB&#39;s
         * 
         * @return builder
         * 
         */
        public Builder storageQuota(@Nullable Output<Integer> storageQuota) {
            $.storageQuota = storageQuota;
            return this;
        }

        /**
         * @param storageQuota The storage quota of the project in GB&#39;s
         * 
         * @return builder
         * 
         */
        public Builder storageQuota(Integer storageQuota) {
            return storageQuota(Output.of(storageQuota));
        }

        /**
         * @param vulnerabilityScanning Images will be scanned for vulnerabilities when push to harbor. Can be set to `&#34;true&#34;` or `&#34;false&#34;` (Default: true)
         * 
         * @return builder
         * 
         */
        public Builder vulnerabilityScanning(@Nullable Output<Boolean> vulnerabilityScanning) {
            $.vulnerabilityScanning = vulnerabilityScanning;
            return this;
        }

        /**
         * @param vulnerabilityScanning Images will be scanned for vulnerabilities when push to harbor. Can be set to `&#34;true&#34;` or `&#34;false&#34;` (Default: true)
         * 
         * @return builder
         * 
         */
        public Builder vulnerabilityScanning(Boolean vulnerabilityScanning) {
            return vulnerabilityScanning(Output.of(vulnerabilityScanning));
        }

        public ProjectArgs build() {
            return $;
        }
    }

}
