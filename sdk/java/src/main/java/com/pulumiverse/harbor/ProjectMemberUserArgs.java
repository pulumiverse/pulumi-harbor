// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.harbor;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class ProjectMemberUserArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProjectMemberUserArgs Empty = new ProjectMemberUserArgs();

    @Import(name="projectId", required=true)
    private Output<String> projectId;

    public Output<String> projectId() {
        return this.projectId;
    }

    @Import(name="role", required=true)
    private Output<String> role;

    public Output<String> role() {
        return this.role;
    }

    @Import(name="userName", required=true)
    private Output<String> userName;

    public Output<String> userName() {
        return this.userName;
    }

    private ProjectMemberUserArgs() {}

    private ProjectMemberUserArgs(ProjectMemberUserArgs $) {
        this.projectId = $.projectId;
        this.role = $.role;
        this.userName = $.userName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectMemberUserArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectMemberUserArgs $;

        public Builder() {
            $ = new ProjectMemberUserArgs();
        }

        public Builder(ProjectMemberUserArgs defaults) {
            $ = new ProjectMemberUserArgs(Objects.requireNonNull(defaults));
        }

        public Builder projectId(Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        public Builder role(Output<String> role) {
            $.role = role;
            return this;
        }

        public Builder role(String role) {
            return role(Output.of(role));
        }

        public Builder userName(Output<String> userName) {
            $.userName = userName;
            return this;
        }

        public Builder userName(String userName) {
            return userName(Output.of(userName));
        }

        public ProjectMemberUserArgs build() {
            $.projectId = Objects.requireNonNull($.projectId, "expected parameter 'projectId' to be non-null");
            $.role = Objects.requireNonNull($.role, "expected parameter 'role' to be non-null");
            $.userName = Objects.requireNonNull($.userName, "expected parameter 'userName' to be non-null");
            return $;
        }
    }

}
