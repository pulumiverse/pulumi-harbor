// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.harbor;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumiverse.harbor.RobotAccountArgs;
import com.pulumiverse.harbor.Utilities;
import com.pulumiverse.harbor.inputs.RobotAccountState;
import com.pulumiverse.harbor.outputs.RobotAccountPermission;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## # Resource: harbor.RobotAccount
 * 
 * Harbor supports different levels of robot accounts. Currently `system` and `project` level robot accounts are supported.
 * 
 * ## Example Usage
 * ### System Level
 * Introduced in harbor 2.2.0, system level robot accounts can have basically [all available permissions](https://github.com/goharbor/harbor/blob/-/src/common/rbac/const.go) in harbor and are not dependent on a single project.
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.random.RandomPassword;
 * import com.pulumi.random.RandomPasswordArgs;
 * import com.pulumi.harbor.Project;
 * import com.pulumi.harbor.RobotAccount;
 * import com.pulumi.harbor.RobotAccountArgs;
 * import com.pulumi.harbor.inputs.RobotAccountPermissionArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var password = new RandomPassword(&#34;password&#34;, RandomPasswordArgs.builder()        
 *             .length(12)
 *             .special(false)
 *             .build());
 * 
 *         var main = new Project(&#34;main&#34;);
 * 
 *         var system = new RobotAccount(&#34;system&#34;, RobotAccountArgs.builder()        
 *             .description(&#34;system level robot account&#34;)
 *             .level(&#34;system&#34;)
 *             .secret(resource.random_password().password().result())
 *             .permissions(            
 *                 RobotAccountPermissionArgs.builder()
 *                     .accesses(RobotAccountPermissionAccessArgs.builder()
 *                         .action(&#34;create&#34;)
 *                         .resource(&#34;labels&#34;)
 *                         .build())
 *                     .kind(&#34;system&#34;)
 *                     .namespace(&#34;/&#34;)
 *                     .build(),
 *                 RobotAccountPermissionArgs.builder()
 *                     .accesses(                    
 *                         RobotAccountPermissionAccessArgs.builder()
 *                             .action(&#34;push&#34;)
 *                             .resource(&#34;repository&#34;)
 *                             .build(),
 *                         RobotAccountPermissionAccessArgs.builder()
 *                             .action(&#34;read&#34;)
 *                             .resource(&#34;helm-chart&#34;)
 *                             .build(),
 *                         RobotAccountPermissionAccessArgs.builder()
 *                             .action(&#34;read&#34;)
 *                             .resource(&#34;helm-chart-version&#34;)
 *                             .build())
 *                     .kind(&#34;project&#34;)
 *                     .namespace(main.name())
 *                     .build(),
 *                 RobotAccountPermissionArgs.builder()
 *                     .accesses(RobotAccountPermissionAccessArgs.builder()
 *                         .action(&#34;pull&#34;)
 *                         .resource(&#34;repository&#34;)
 *                         .build())
 *                     .kind(&#34;project&#34;)
 *                     .namespace(&#34;*&#34;)
 *                     .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * The above example, creates a system level robot account with permissions to
 * - permission to create labels on system level
 * - pull repository across all projects
 * - push repository to project &#34;my-project-name&#34;
 * - read helm-chart and helm-chart-version in project &#34;my-project-name&#34;
 * ### Project Level
 * 
 * Other than system level robot accounts, project level robot accounts can interact on project level only.
 * The [available permissions](https://github.com/goharbor/harbor/blob/-/src/common/rbac/const.go) are mostly the same as for system level robots.
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.harbor.Project;
 * import com.pulumi.harbor.RobotAccount;
 * import com.pulumi.harbor.RobotAccountArgs;
 * import com.pulumi.harbor.inputs.RobotAccountPermissionArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var main = new Project(&#34;main&#34;);
 * 
 *         var project = new RobotAccount(&#34;project&#34;, RobotAccountArgs.builder()        
 *             .description(&#34;project level robot account&#34;)
 *             .level(&#34;project&#34;)
 *             .permissions(RobotAccountPermissionArgs.builder()
 *                 .accesses(                
 *                     RobotAccountPermissionAccessArgs.builder()
 *                         .action(&#34;pull&#34;)
 *                         .resource(&#34;repository&#34;)
 *                         .build(),
 *                     RobotAccountPermissionAccessArgs.builder()
 *                         .action(&#34;push&#34;)
 *                         .resource(&#34;repository&#34;)
 *                         .build())
 *                 .kind(&#34;project&#34;)
 *                 .namespace(main.name())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * The above example creates a project level robot account with permissions to
 * - pull repository on project &#34;main&#34;
 * - push repository on project &#34;main&#34;
 * 
 */
@ResourceType(type="harbor:index/robotAccount:RobotAccount")
public class RobotAccount extends com.pulumi.resources.CustomResource {
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    @Export(name="disable", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> disable;

    public Output<Optional<Boolean>> disable() {
        return Codegen.optional(this.disable);
    }
    @Export(name="duration", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> duration;

    public Output<Optional<Integer>> duration() {
        return Codegen.optional(this.duration);
    }
    @Export(name="fullName", refs={String.class}, tree="[0]")
    private Output<String> fullName;

    public Output<String> fullName() {
        return this.fullName;
    }
    @Export(name="level", refs={String.class}, tree="[0]")
    private Output<String> level;

    public Output<String> level() {
        return this.level;
    }
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    public Output<String> name() {
        return this.name;
    }
    @Export(name="permissions", refs={List.class,RobotAccountPermission.class}, tree="[0,1]")
    private Output<List<RobotAccountPermission>> permissions;

    public Output<List<RobotAccountPermission>> permissions() {
        return this.permissions;
    }
    @Export(name="robotId", refs={String.class}, tree="[0]")
    private Output<String> robotId;

    public Output<String> robotId() {
        return this.robotId;
    }
    @Export(name="secret", refs={String.class}, tree="[0]")
    private Output<String> secret;

    public Output<String> secret() {
        return this.secret;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public RobotAccount(String name) {
        this(name, RobotAccountArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public RobotAccount(String name, RobotAccountArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public RobotAccount(String name, RobotAccountArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harbor:index/robotAccount:RobotAccount", name, args == null ? RobotAccountArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private RobotAccount(String name, Output<String> id, @Nullable RobotAccountState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harbor:index/robotAccount:RobotAccount", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "secret"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static RobotAccount get(String name, Output<String> id, @Nullable RobotAccountState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new RobotAccount(name, id, state, options);
    }
}
