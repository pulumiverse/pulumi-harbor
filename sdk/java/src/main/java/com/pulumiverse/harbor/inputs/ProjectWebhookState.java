// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.harbor.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectWebhookState extends com.pulumi.resources.ResourceArgs {

    public static final ProjectWebhookState Empty = new ProjectWebhookState();

    /**
     * The address of the webhook
     * 
     */
    @Import(name="address")
    private @Nullable Output<String> address;

    /**
     * @return The address of the webhook
     * 
     */
    public Optional<Output<String>> address() {
        return Optional.ofNullable(this.address);
    }

    /**
     * authentication header for you the webhook
     * 
     */
    @Import(name="authHeader")
    private @Nullable Output<String> authHeader;

    /**
     * @return authentication header for you the webhook
     * 
     */
    public Optional<Output<String>> authHeader() {
        return Optional.ofNullable(this.authHeader);
    }

    /**
     * _ (Optional, string) A description of the webhook
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return _ (Optional, string) A description of the webhook
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * , To enable / disable the webhook. Default `true`
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return , To enable / disable the webhook. Default `true`
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * ) The type events you want to subscript to can be `DELETE_ARTIFACT`, `PULL_ARTIFACT`, `PUSH_ARTIFACT`, `DELETE_CHART`, `DOWNLOAD_CHART`, `UPLOAD_CHART`, `QUOTA_EXCEED`, `QUOTA_WARNING`, `REPLICATION`, `SCANNING_FAILED`, `SCANNING_COMPLETED`, `TAG_RETENTION`
     * 
     */
    @Import(name="eventsTypes")
    private @Nullable Output<List<String>> eventsTypes;

    /**
     * @return ) The type events you want to subscript to can be `DELETE_ARTIFACT`, `PULL_ARTIFACT`, `PUSH_ARTIFACT`, `DELETE_CHART`, `DOWNLOAD_CHART`, `UPLOAD_CHART`, `QUOTA_EXCEED`, `QUOTA_WARNING`, `REPLICATION`, `SCANNING_FAILED`, `SCANNING_COMPLETED`, `TAG_RETENTION`
     * 
     */
    public Optional<Output<List<String>>> eventsTypes() {
        return Optional.ofNullable(this.eventsTypes);
    }

    /**
     * The name of the webhook that will be created in harbor.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the webhook that will be created in harbor.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The notification type either `http` or `slack`
     * 
     */
    @Import(name="notifyType")
    private @Nullable Output<String> notifyType;

    /**
     * @return The notification type either `http` or `slack`
     * 
     */
    public Optional<Output<String>> notifyType() {
        return Optional.ofNullable(this.notifyType);
    }

    /**
     * The project id of the harbor that webhook related to.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return The project id of the harbor that webhook related to.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * checks the for validate SSL certificate.
     * 
     */
    @Import(name="skipCertVerify")
    private @Nullable Output<Boolean> skipCertVerify;

    /**
     * @return checks the for validate SSL certificate.
     * 
     */
    public Optional<Output<Boolean>> skipCertVerify() {
        return Optional.ofNullable(this.skipCertVerify);
    }

    private ProjectWebhookState() {}

    private ProjectWebhookState(ProjectWebhookState $) {
        this.address = $.address;
        this.authHeader = $.authHeader;
        this.description = $.description;
        this.enabled = $.enabled;
        this.eventsTypes = $.eventsTypes;
        this.name = $.name;
        this.notifyType = $.notifyType;
        this.projectId = $.projectId;
        this.skipCertVerify = $.skipCertVerify;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectWebhookState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectWebhookState $;

        public Builder() {
            $ = new ProjectWebhookState();
        }

        public Builder(ProjectWebhookState defaults) {
            $ = new ProjectWebhookState(Objects.requireNonNull(defaults));
        }

        /**
         * @param address The address of the webhook
         * 
         * @return builder
         * 
         */
        public Builder address(@Nullable Output<String> address) {
            $.address = address;
            return this;
        }

        /**
         * @param address The address of the webhook
         * 
         * @return builder
         * 
         */
        public Builder address(String address) {
            return address(Output.of(address));
        }

        /**
         * @param authHeader authentication header for you the webhook
         * 
         * @return builder
         * 
         */
        public Builder authHeader(@Nullable Output<String> authHeader) {
            $.authHeader = authHeader;
            return this;
        }

        /**
         * @param authHeader authentication header for you the webhook
         * 
         * @return builder
         * 
         */
        public Builder authHeader(String authHeader) {
            return authHeader(Output.of(authHeader));
        }

        /**
         * @param description _ (Optional, string) A description of the webhook
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description _ (Optional, string) A description of the webhook
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param enabled , To enable / disable the webhook. Default `true`
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled , To enable / disable the webhook. Default `true`
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param eventsTypes ) The type events you want to subscript to can be `DELETE_ARTIFACT`, `PULL_ARTIFACT`, `PUSH_ARTIFACT`, `DELETE_CHART`, `DOWNLOAD_CHART`, `UPLOAD_CHART`, `QUOTA_EXCEED`, `QUOTA_WARNING`, `REPLICATION`, `SCANNING_FAILED`, `SCANNING_COMPLETED`, `TAG_RETENTION`
         * 
         * @return builder
         * 
         */
        public Builder eventsTypes(@Nullable Output<List<String>> eventsTypes) {
            $.eventsTypes = eventsTypes;
            return this;
        }

        /**
         * @param eventsTypes ) The type events you want to subscript to can be `DELETE_ARTIFACT`, `PULL_ARTIFACT`, `PUSH_ARTIFACT`, `DELETE_CHART`, `DOWNLOAD_CHART`, `UPLOAD_CHART`, `QUOTA_EXCEED`, `QUOTA_WARNING`, `REPLICATION`, `SCANNING_FAILED`, `SCANNING_COMPLETED`, `TAG_RETENTION`
         * 
         * @return builder
         * 
         */
        public Builder eventsTypes(List<String> eventsTypes) {
            return eventsTypes(Output.of(eventsTypes));
        }

        /**
         * @param eventsTypes ) The type events you want to subscript to can be `DELETE_ARTIFACT`, `PULL_ARTIFACT`, `PUSH_ARTIFACT`, `DELETE_CHART`, `DOWNLOAD_CHART`, `UPLOAD_CHART`, `QUOTA_EXCEED`, `QUOTA_WARNING`, `REPLICATION`, `SCANNING_FAILED`, `SCANNING_COMPLETED`, `TAG_RETENTION`
         * 
         * @return builder
         * 
         */
        public Builder eventsTypes(String... eventsTypes) {
            return eventsTypes(List.of(eventsTypes));
        }

        /**
         * @param name The name of the webhook that will be created in harbor.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the webhook that will be created in harbor.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param notifyType The notification type either `http` or `slack`
         * 
         * @return builder
         * 
         */
        public Builder notifyType(@Nullable Output<String> notifyType) {
            $.notifyType = notifyType;
            return this;
        }

        /**
         * @param notifyType The notification type either `http` or `slack`
         * 
         * @return builder
         * 
         */
        public Builder notifyType(String notifyType) {
            return notifyType(Output.of(notifyType));
        }

        /**
         * @param projectId The project id of the harbor that webhook related to.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The project id of the harbor that webhook related to.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param skipCertVerify checks the for validate SSL certificate.
         * 
         * @return builder
         * 
         */
        public Builder skipCertVerify(@Nullable Output<Boolean> skipCertVerify) {
            $.skipCertVerify = skipCertVerify;
            return this;
        }

        /**
         * @param skipCertVerify checks the for validate SSL certificate.
         * 
         * @return builder
         * 
         */
        public Builder skipCertVerify(Boolean skipCertVerify) {
            return skipCertVerify(Output.of(skipCertVerify));
        }

        public ProjectWebhookState build() {
            return $;
        }
    }

}
