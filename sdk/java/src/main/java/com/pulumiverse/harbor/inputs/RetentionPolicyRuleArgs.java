// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.harbor.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RetentionPolicyRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final RetentionPolicyRuleArgs Empty = new RetentionPolicyRuleArgs();

    /**
     * retain always.
     * 
     */
    @Import(name="alwaysRetain")
    private @Nullable Output<Boolean> alwaysRetain;

    /**
     * @return retain always.
     * 
     */
    public Optional<Output<Boolean>> alwaysRetain() {
        return Optional.ofNullable(this.alwaysRetain);
    }

    /**
     * Specify if the rule is disable or not. Defaults to `false`
     * 
     */
    @Import(name="disabled")
    private @Nullable Output<Boolean> disabled;

    /**
     * @return Specify if the rule is disable or not. Defaults to `false`
     * 
     */
    public Optional<Output<Boolean>> disabled() {
        return Optional.ofNullable(this.disabled);
    }

    /**
     * retain the most recently pulled n artifacts.
     * 
     */
    @Import(name="mostRecentlyPulled")
    private @Nullable Output<Integer> mostRecentlyPulled;

    /**
     * @return retain the most recently pulled n artifacts.
     * 
     */
    public Optional<Output<Integer>> mostRecentlyPulled() {
        return Optional.ofNullable(this.mostRecentlyPulled);
    }

    /**
     * retain the most recently pushed n artifacts.
     * 
     */
    @Import(name="mostRecentlyPushed")
    private @Nullable Output<Integer> mostRecentlyPushed;

    /**
     * @return retain the most recently pushed n artifacts.
     * 
     */
    public Optional<Output<Integer>> mostRecentlyPushed() {
        return Optional.ofNullable(this.mostRecentlyPushed);
    }

    /**
     * retains the artifacts pulled within the lasts n days.
     * 
     */
    @Import(name="nDaysSinceLastPull")
    private @Nullable Output<Integer> nDaysSinceLastPull;

    /**
     * @return retains the artifacts pulled within the lasts n days.
     * 
     */
    public Optional<Output<Integer>> nDaysSinceLastPull() {
        return Optional.ofNullable(this.nDaysSinceLastPull);
    }

    /**
     * retains the artifacts pushed within the lasts n days.
     * 
     */
    @Import(name="nDaysSinceLastPush")
    private @Nullable Output<Integer> nDaysSinceLastPush;

    /**
     * @return retains the artifacts pushed within the lasts n days.
     * 
     */
    public Optional<Output<Integer>> nDaysSinceLastPush() {
        return Optional.ofNullable(this.nDaysSinceLastPush);
    }

    /**
     * For the repositories excuding.
     * 
     */
    @Import(name="repoExcluding")
    private @Nullable Output<String> repoExcluding;

    /**
     * @return For the repositories excuding.
     * 
     */
    public Optional<Output<String>> repoExcluding() {
        return Optional.ofNullable(this.repoExcluding);
    }

    /**
     * For the repositories matching.
     * 
     */
    @Import(name="repoMatching")
    private @Nullable Output<String> repoMatching;

    /**
     * @return For the repositories matching.
     * 
     */
    public Optional<Output<String>> repoMatching() {
        return Optional.ofNullable(this.repoMatching);
    }

    /**
     * For the tag excuding.
     * 
     */
    @Import(name="tagExcluding")
    private @Nullable Output<String> tagExcluding;

    /**
     * @return For the tag excuding.
     * 
     */
    public Optional<Output<String>> tagExcluding() {
        return Optional.ofNullable(this.tagExcluding);
    }

    /**
     * For the tag matching.
     * 
     */
    @Import(name="tagMatching")
    private @Nullable Output<String> tagMatching;

    /**
     * @return For the tag matching.
     * 
     */
    public Optional<Output<String>> tagMatching() {
        return Optional.ofNullable(this.tagMatching);
    }

    /**
     * with untagged artifacts. Defaults to `true`
     * 
     */
    @Import(name="untaggedArtifacts")
    private @Nullable Output<Boolean> untaggedArtifacts;

    /**
     * @return with untagged artifacts. Defaults to `true`
     * 
     */
    public Optional<Output<Boolean>> untaggedArtifacts() {
        return Optional.ofNullable(this.untaggedArtifacts);
    }

    private RetentionPolicyRuleArgs() {}

    private RetentionPolicyRuleArgs(RetentionPolicyRuleArgs $) {
        this.alwaysRetain = $.alwaysRetain;
        this.disabled = $.disabled;
        this.mostRecentlyPulled = $.mostRecentlyPulled;
        this.mostRecentlyPushed = $.mostRecentlyPushed;
        this.nDaysSinceLastPull = $.nDaysSinceLastPull;
        this.nDaysSinceLastPush = $.nDaysSinceLastPush;
        this.repoExcluding = $.repoExcluding;
        this.repoMatching = $.repoMatching;
        this.tagExcluding = $.tagExcluding;
        this.tagMatching = $.tagMatching;
        this.untaggedArtifacts = $.untaggedArtifacts;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RetentionPolicyRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RetentionPolicyRuleArgs $;

        public Builder() {
            $ = new RetentionPolicyRuleArgs();
        }

        public Builder(RetentionPolicyRuleArgs defaults) {
            $ = new RetentionPolicyRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param alwaysRetain retain always.
         * 
         * @return builder
         * 
         */
        public Builder alwaysRetain(@Nullable Output<Boolean> alwaysRetain) {
            $.alwaysRetain = alwaysRetain;
            return this;
        }

        /**
         * @param alwaysRetain retain always.
         * 
         * @return builder
         * 
         */
        public Builder alwaysRetain(Boolean alwaysRetain) {
            return alwaysRetain(Output.of(alwaysRetain));
        }

        /**
         * @param disabled Specify if the rule is disable or not. Defaults to `false`
         * 
         * @return builder
         * 
         */
        public Builder disabled(@Nullable Output<Boolean> disabled) {
            $.disabled = disabled;
            return this;
        }

        /**
         * @param disabled Specify if the rule is disable or not. Defaults to `false`
         * 
         * @return builder
         * 
         */
        public Builder disabled(Boolean disabled) {
            return disabled(Output.of(disabled));
        }

        /**
         * @param mostRecentlyPulled retain the most recently pulled n artifacts.
         * 
         * @return builder
         * 
         */
        public Builder mostRecentlyPulled(@Nullable Output<Integer> mostRecentlyPulled) {
            $.mostRecentlyPulled = mostRecentlyPulled;
            return this;
        }

        /**
         * @param mostRecentlyPulled retain the most recently pulled n artifacts.
         * 
         * @return builder
         * 
         */
        public Builder mostRecentlyPulled(Integer mostRecentlyPulled) {
            return mostRecentlyPulled(Output.of(mostRecentlyPulled));
        }

        /**
         * @param mostRecentlyPushed retain the most recently pushed n artifacts.
         * 
         * @return builder
         * 
         */
        public Builder mostRecentlyPushed(@Nullable Output<Integer> mostRecentlyPushed) {
            $.mostRecentlyPushed = mostRecentlyPushed;
            return this;
        }

        /**
         * @param mostRecentlyPushed retain the most recently pushed n artifacts.
         * 
         * @return builder
         * 
         */
        public Builder mostRecentlyPushed(Integer mostRecentlyPushed) {
            return mostRecentlyPushed(Output.of(mostRecentlyPushed));
        }

        /**
         * @param nDaysSinceLastPull retains the artifacts pulled within the lasts n days.
         * 
         * @return builder
         * 
         */
        public Builder nDaysSinceLastPull(@Nullable Output<Integer> nDaysSinceLastPull) {
            $.nDaysSinceLastPull = nDaysSinceLastPull;
            return this;
        }

        /**
         * @param nDaysSinceLastPull retains the artifacts pulled within the lasts n days.
         * 
         * @return builder
         * 
         */
        public Builder nDaysSinceLastPull(Integer nDaysSinceLastPull) {
            return nDaysSinceLastPull(Output.of(nDaysSinceLastPull));
        }

        /**
         * @param nDaysSinceLastPush retains the artifacts pushed within the lasts n days.
         * 
         * @return builder
         * 
         */
        public Builder nDaysSinceLastPush(@Nullable Output<Integer> nDaysSinceLastPush) {
            $.nDaysSinceLastPush = nDaysSinceLastPush;
            return this;
        }

        /**
         * @param nDaysSinceLastPush retains the artifacts pushed within the lasts n days.
         * 
         * @return builder
         * 
         */
        public Builder nDaysSinceLastPush(Integer nDaysSinceLastPush) {
            return nDaysSinceLastPush(Output.of(nDaysSinceLastPush));
        }

        /**
         * @param repoExcluding For the repositories excuding.
         * 
         * @return builder
         * 
         */
        public Builder repoExcluding(@Nullable Output<String> repoExcluding) {
            $.repoExcluding = repoExcluding;
            return this;
        }

        /**
         * @param repoExcluding For the repositories excuding.
         * 
         * @return builder
         * 
         */
        public Builder repoExcluding(String repoExcluding) {
            return repoExcluding(Output.of(repoExcluding));
        }

        /**
         * @param repoMatching For the repositories matching.
         * 
         * @return builder
         * 
         */
        public Builder repoMatching(@Nullable Output<String> repoMatching) {
            $.repoMatching = repoMatching;
            return this;
        }

        /**
         * @param repoMatching For the repositories matching.
         * 
         * @return builder
         * 
         */
        public Builder repoMatching(String repoMatching) {
            return repoMatching(Output.of(repoMatching));
        }

        /**
         * @param tagExcluding For the tag excuding.
         * 
         * @return builder
         * 
         */
        public Builder tagExcluding(@Nullable Output<String> tagExcluding) {
            $.tagExcluding = tagExcluding;
            return this;
        }

        /**
         * @param tagExcluding For the tag excuding.
         * 
         * @return builder
         * 
         */
        public Builder tagExcluding(String tagExcluding) {
            return tagExcluding(Output.of(tagExcluding));
        }

        /**
         * @param tagMatching For the tag matching.
         * 
         * @return builder
         * 
         */
        public Builder tagMatching(@Nullable Output<String> tagMatching) {
            $.tagMatching = tagMatching;
            return this;
        }

        /**
         * @param tagMatching For the tag matching.
         * 
         * @return builder
         * 
         */
        public Builder tagMatching(String tagMatching) {
            return tagMatching(Output.of(tagMatching));
        }

        /**
         * @param untaggedArtifacts with untagged artifacts. Defaults to `true`
         * 
         * @return builder
         * 
         */
        public Builder untaggedArtifacts(@Nullable Output<Boolean> untaggedArtifacts) {
            $.untaggedArtifacts = untaggedArtifacts;
            return this;
        }

        /**
         * @param untaggedArtifacts with untagged artifacts. Defaults to `true`
         * 
         * @return builder
         * 
         */
        public Builder untaggedArtifacts(Boolean untaggedArtifacts) {
            return untaggedArtifacts(Output.of(untaggedArtifacts));
        }

        public RetentionPolicyRuleArgs build() {
            return $;
        }
    }

}
