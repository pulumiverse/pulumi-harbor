// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.harbor.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ImmutableTagRuleState extends com.pulumi.resources.ResourceArgs {

    public static final ImmutableTagRuleState Empty = new ImmutableTagRuleState();

    /**
     * Specify if the rule is disable or not. Defaults to `false`
     * 
     */
    @Import(name="disabled")
    private @Nullable Output<Boolean> disabled;

    /**
     * @return Specify if the rule is disable or not. Defaults to `false`
     * 
     */
    public Optional<Output<Boolean>> disabled() {
        return Optional.ofNullable(this.disabled);
    }

    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * For the repositories excuding.
     * 
     */
    @Import(name="repoExcluding")
    private @Nullable Output<String> repoExcluding;

    /**
     * @return For the repositories excuding.
     * 
     */
    public Optional<Output<String>> repoExcluding() {
        return Optional.ofNullable(this.repoExcluding);
    }

    /**
     * For the repositories matching.
     * 
     */
    @Import(name="repoMatching")
    private @Nullable Output<String> repoMatching;

    /**
     * @return For the repositories matching.
     * 
     */
    public Optional<Output<String>> repoMatching() {
        return Optional.ofNullable(this.repoMatching);
    }

    /**
     * For the tag excuding.
     * 
     */
    @Import(name="tagExcluding")
    private @Nullable Output<String> tagExcluding;

    /**
     * @return For the tag excuding.
     * 
     */
    public Optional<Output<String>> tagExcluding() {
        return Optional.ofNullable(this.tagExcluding);
    }

    /**
     * For the tag matching.
     * 
     */
    @Import(name="tagMatching")
    private @Nullable Output<String> tagMatching;

    /**
     * @return For the tag matching.
     * 
     */
    public Optional<Output<String>> tagMatching() {
        return Optional.ofNullable(this.tagMatching);
    }

    private ImmutableTagRuleState() {}

    private ImmutableTagRuleState(ImmutableTagRuleState $) {
        this.disabled = $.disabled;
        this.projectId = $.projectId;
        this.repoExcluding = $.repoExcluding;
        this.repoMatching = $.repoMatching;
        this.tagExcluding = $.tagExcluding;
        this.tagMatching = $.tagMatching;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ImmutableTagRuleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ImmutableTagRuleState $;

        public Builder() {
            $ = new ImmutableTagRuleState();
        }

        public Builder(ImmutableTagRuleState defaults) {
            $ = new ImmutableTagRuleState(Objects.requireNonNull(defaults));
        }

        /**
         * @param disabled Specify if the rule is disable or not. Defaults to `false`
         * 
         * @return builder
         * 
         */
        public Builder disabled(@Nullable Output<Boolean> disabled) {
            $.disabled = disabled;
            return this;
        }

        /**
         * @param disabled Specify if the rule is disable or not. Defaults to `false`
         * 
         * @return builder
         * 
         */
        public Builder disabled(Boolean disabled) {
            return disabled(Output.of(disabled));
        }

        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param repoExcluding For the repositories excuding.
         * 
         * @return builder
         * 
         */
        public Builder repoExcluding(@Nullable Output<String> repoExcluding) {
            $.repoExcluding = repoExcluding;
            return this;
        }

        /**
         * @param repoExcluding For the repositories excuding.
         * 
         * @return builder
         * 
         */
        public Builder repoExcluding(String repoExcluding) {
            return repoExcluding(Output.of(repoExcluding));
        }

        /**
         * @param repoMatching For the repositories matching.
         * 
         * @return builder
         * 
         */
        public Builder repoMatching(@Nullable Output<String> repoMatching) {
            $.repoMatching = repoMatching;
            return this;
        }

        /**
         * @param repoMatching For the repositories matching.
         * 
         * @return builder
         * 
         */
        public Builder repoMatching(String repoMatching) {
            return repoMatching(Output.of(repoMatching));
        }

        /**
         * @param tagExcluding For the tag excuding.
         * 
         * @return builder
         * 
         */
        public Builder tagExcluding(@Nullable Output<String> tagExcluding) {
            $.tagExcluding = tagExcluding;
            return this;
        }

        /**
         * @param tagExcluding For the tag excuding.
         * 
         * @return builder
         * 
         */
        public Builder tagExcluding(String tagExcluding) {
            return tagExcluding(Output.of(tagExcluding));
        }

        /**
         * @param tagMatching For the tag matching.
         * 
         * @return builder
         * 
         */
        public Builder tagMatching(@Nullable Output<String> tagMatching) {
            $.tagMatching = tagMatching;
            return this;
        }

        /**
         * @param tagMatching For the tag matching.
         * 
         * @return builder
         * 
         */
        public Builder tagMatching(String tagMatching) {
            return tagMatching(Output.of(tagMatching));
        }

        public ImmutableTagRuleState build() {
            return $;
        }
    }

}
