// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package harbor

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-harbor/sdk/v3/go/harbor"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := harbor.NewConfigEmail(ctx, "main", &harbor.ConfigEmailArgs{
//				EmailFrom: pulumi.String("dont_reply@acme.com"),
//				EmailHost: pulumi.String("server.acme.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ConfigEmail struct {
	pulumi.CustomResourceState

	EmailFrom     pulumi.StringOutput    `pulumi:"emailFrom"`
	EmailHost     pulumi.StringOutput    `pulumi:"emailHost"`
	EmailInsecure pulumi.BoolPtrOutput   `pulumi:"emailInsecure"`
	EmailPassword pulumi.StringPtrOutput `pulumi:"emailPassword"`
	EmailPort     pulumi.IntPtrOutput    `pulumi:"emailPort"`
	EmailSsl      pulumi.BoolPtrOutput   `pulumi:"emailSsl"`
	EmailUsername pulumi.StringPtrOutput `pulumi:"emailUsername"`
}

// NewConfigEmail registers a new resource with the given unique name, arguments, and options.
func NewConfigEmail(ctx *pulumi.Context,
	name string, args *ConfigEmailArgs, opts ...pulumi.ResourceOption) (*ConfigEmail, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EmailFrom == nil {
		return nil, errors.New("invalid value for required argument 'EmailFrom'")
	}
	if args.EmailHost == nil {
		return nil, errors.New("invalid value for required argument 'EmailHost'")
	}
	if args.EmailPassword != nil {
		args.EmailPassword = pulumi.ToSecret(args.EmailPassword).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"emailPassword",
	})
	opts = append(opts, secrets)
	opts = pkgResourceDefaultOpts(opts)
	var resource ConfigEmail
	err := ctx.RegisterResource("harbor:index/configEmail:ConfigEmail", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConfigEmail gets an existing ConfigEmail resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConfigEmail(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConfigEmailState, opts ...pulumi.ResourceOption) (*ConfigEmail, error) {
	var resource ConfigEmail
	err := ctx.ReadResource("harbor:index/configEmail:ConfigEmail", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConfigEmail resources.
type configEmailState struct {
	EmailFrom     *string `pulumi:"emailFrom"`
	EmailHost     *string `pulumi:"emailHost"`
	EmailInsecure *bool   `pulumi:"emailInsecure"`
	EmailPassword *string `pulumi:"emailPassword"`
	EmailPort     *int    `pulumi:"emailPort"`
	EmailSsl      *bool   `pulumi:"emailSsl"`
	EmailUsername *string `pulumi:"emailUsername"`
}

type ConfigEmailState struct {
	EmailFrom     pulumi.StringPtrInput
	EmailHost     pulumi.StringPtrInput
	EmailInsecure pulumi.BoolPtrInput
	EmailPassword pulumi.StringPtrInput
	EmailPort     pulumi.IntPtrInput
	EmailSsl      pulumi.BoolPtrInput
	EmailUsername pulumi.StringPtrInput
}

func (ConfigEmailState) ElementType() reflect.Type {
	return reflect.TypeOf((*configEmailState)(nil)).Elem()
}

type configEmailArgs struct {
	EmailFrom     string  `pulumi:"emailFrom"`
	EmailHost     string  `pulumi:"emailHost"`
	EmailInsecure *bool   `pulumi:"emailInsecure"`
	EmailPassword *string `pulumi:"emailPassword"`
	EmailPort     *int    `pulumi:"emailPort"`
	EmailSsl      *bool   `pulumi:"emailSsl"`
	EmailUsername *string `pulumi:"emailUsername"`
}

// The set of arguments for constructing a ConfigEmail resource.
type ConfigEmailArgs struct {
	EmailFrom     pulumi.StringInput
	EmailHost     pulumi.StringInput
	EmailInsecure pulumi.BoolPtrInput
	EmailPassword pulumi.StringPtrInput
	EmailPort     pulumi.IntPtrInput
	EmailSsl      pulumi.BoolPtrInput
	EmailUsername pulumi.StringPtrInput
}

func (ConfigEmailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*configEmailArgs)(nil)).Elem()
}

type ConfigEmailInput interface {
	pulumi.Input

	ToConfigEmailOutput() ConfigEmailOutput
	ToConfigEmailOutputWithContext(ctx context.Context) ConfigEmailOutput
}

func (*ConfigEmail) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigEmail)(nil)).Elem()
}

func (i *ConfigEmail) ToConfigEmailOutput() ConfigEmailOutput {
	return i.ToConfigEmailOutputWithContext(context.Background())
}

func (i *ConfigEmail) ToConfigEmailOutputWithContext(ctx context.Context) ConfigEmailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigEmailOutput)
}

// ConfigEmailArrayInput is an input type that accepts ConfigEmailArray and ConfigEmailArrayOutput values.
// You can construct a concrete instance of `ConfigEmailArrayInput` via:
//
//	ConfigEmailArray{ ConfigEmailArgs{...} }
type ConfigEmailArrayInput interface {
	pulumi.Input

	ToConfigEmailArrayOutput() ConfigEmailArrayOutput
	ToConfigEmailArrayOutputWithContext(context.Context) ConfigEmailArrayOutput
}

type ConfigEmailArray []ConfigEmailInput

func (ConfigEmailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConfigEmail)(nil)).Elem()
}

func (i ConfigEmailArray) ToConfigEmailArrayOutput() ConfigEmailArrayOutput {
	return i.ToConfigEmailArrayOutputWithContext(context.Background())
}

func (i ConfigEmailArray) ToConfigEmailArrayOutputWithContext(ctx context.Context) ConfigEmailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigEmailArrayOutput)
}

// ConfigEmailMapInput is an input type that accepts ConfigEmailMap and ConfigEmailMapOutput values.
// You can construct a concrete instance of `ConfigEmailMapInput` via:
//
//	ConfigEmailMap{ "key": ConfigEmailArgs{...} }
type ConfigEmailMapInput interface {
	pulumi.Input

	ToConfigEmailMapOutput() ConfigEmailMapOutput
	ToConfigEmailMapOutputWithContext(context.Context) ConfigEmailMapOutput
}

type ConfigEmailMap map[string]ConfigEmailInput

func (ConfigEmailMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConfigEmail)(nil)).Elem()
}

func (i ConfigEmailMap) ToConfigEmailMapOutput() ConfigEmailMapOutput {
	return i.ToConfigEmailMapOutputWithContext(context.Background())
}

func (i ConfigEmailMap) ToConfigEmailMapOutputWithContext(ctx context.Context) ConfigEmailMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigEmailMapOutput)
}

type ConfigEmailOutput struct{ *pulumi.OutputState }

func (ConfigEmailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigEmail)(nil)).Elem()
}

func (o ConfigEmailOutput) ToConfigEmailOutput() ConfigEmailOutput {
	return o
}

func (o ConfigEmailOutput) ToConfigEmailOutputWithContext(ctx context.Context) ConfigEmailOutput {
	return o
}

func (o ConfigEmailOutput) EmailFrom() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigEmail) pulumi.StringOutput { return v.EmailFrom }).(pulumi.StringOutput)
}

func (o ConfigEmailOutput) EmailHost() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigEmail) pulumi.StringOutput { return v.EmailHost }).(pulumi.StringOutput)
}

func (o ConfigEmailOutput) EmailInsecure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConfigEmail) pulumi.BoolPtrOutput { return v.EmailInsecure }).(pulumi.BoolPtrOutput)
}

func (o ConfigEmailOutput) EmailPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigEmail) pulumi.StringPtrOutput { return v.EmailPassword }).(pulumi.StringPtrOutput)
}

func (o ConfigEmailOutput) EmailPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ConfigEmail) pulumi.IntPtrOutput { return v.EmailPort }).(pulumi.IntPtrOutput)
}

func (o ConfigEmailOutput) EmailSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConfigEmail) pulumi.BoolPtrOutput { return v.EmailSsl }).(pulumi.BoolPtrOutput)
}

func (o ConfigEmailOutput) EmailUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigEmail) pulumi.StringPtrOutput { return v.EmailUsername }).(pulumi.StringPtrOutput)
}

type ConfigEmailArrayOutput struct{ *pulumi.OutputState }

func (ConfigEmailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConfigEmail)(nil)).Elem()
}

func (o ConfigEmailArrayOutput) ToConfigEmailArrayOutput() ConfigEmailArrayOutput {
	return o
}

func (o ConfigEmailArrayOutput) ToConfigEmailArrayOutputWithContext(ctx context.Context) ConfigEmailArrayOutput {
	return o
}

func (o ConfigEmailArrayOutput) Index(i pulumi.IntInput) ConfigEmailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConfigEmail {
		return vs[0].([]*ConfigEmail)[vs[1].(int)]
	}).(ConfigEmailOutput)
}

type ConfigEmailMapOutput struct{ *pulumi.OutputState }

func (ConfigEmailMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConfigEmail)(nil)).Elem()
}

func (o ConfigEmailMapOutput) ToConfigEmailMapOutput() ConfigEmailMapOutput {
	return o
}

func (o ConfigEmailMapOutput) ToConfigEmailMapOutputWithContext(ctx context.Context) ConfigEmailMapOutput {
	return o
}

func (o ConfigEmailMapOutput) MapIndex(k pulumi.StringInput) ConfigEmailOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConfigEmail {
		return vs[0].(map[string]*ConfigEmail)[vs[1].(string)]
	}).(ConfigEmailOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigEmailInput)(nil)).Elem(), &ConfigEmail{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigEmailArrayInput)(nil)).Elem(), ConfigEmailArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigEmailMapInput)(nil)).Elem(), ConfigEmailMap{})
	pulumi.RegisterOutputType(ConfigEmailOutput{})
	pulumi.RegisterOutputType(ConfigEmailArrayOutput{})
	pulumi.RegisterOutputType(ConfigEmailMapOutput{})
}
