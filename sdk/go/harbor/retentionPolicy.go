// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package harbor

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-harbor/sdk/v3/go/harbor/internal"
)

// ## Example Usage
//
// ## Import
//
// ```sh
// $ pulumi import harbor:index/retentionPolicy:RetentionPolicy main /retentions/10
// ```
type RetentionPolicy struct {
	pulumi.CustomResourceState

	Rules RetentionPolicyRuleArrayOutput `pulumi:"rules"`
	// The schedule of when you would like the policy to run. This can be `Hourly`, `Daily`, `Weekly` or can be a custom cron string.
	Schedule pulumi.StringPtrOutput `pulumi:"schedule"`
	// The project id of which you would like to apply this policy.
	Scope pulumi.StringOutput `pulumi:"scope"`
}

// NewRetentionPolicy registers a new resource with the given unique name, arguments, and options.
func NewRetentionPolicy(ctx *pulumi.Context,
	name string, args *RetentionPolicyArgs, opts ...pulumi.ResourceOption) (*RetentionPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Rules == nil {
		return nil, errors.New("invalid value for required argument 'Rules'")
	}
	if args.Scope == nil {
		return nil, errors.New("invalid value for required argument 'Scope'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RetentionPolicy
	err := ctx.RegisterResource("harbor:index/retentionPolicy:RetentionPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRetentionPolicy gets an existing RetentionPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRetentionPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RetentionPolicyState, opts ...pulumi.ResourceOption) (*RetentionPolicy, error) {
	var resource RetentionPolicy
	err := ctx.ReadResource("harbor:index/retentionPolicy:RetentionPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RetentionPolicy resources.
type retentionPolicyState struct {
	Rules []RetentionPolicyRule `pulumi:"rules"`
	// The schedule of when you would like the policy to run. This can be `Hourly`, `Daily`, `Weekly` or can be a custom cron string.
	Schedule *string `pulumi:"schedule"`
	// The project id of which you would like to apply this policy.
	Scope *string `pulumi:"scope"`
}

type RetentionPolicyState struct {
	Rules RetentionPolicyRuleArrayInput
	// The schedule of when you would like the policy to run. This can be `Hourly`, `Daily`, `Weekly` or can be a custom cron string.
	Schedule pulumi.StringPtrInput
	// The project id of which you would like to apply this policy.
	Scope pulumi.StringPtrInput
}

func (RetentionPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*retentionPolicyState)(nil)).Elem()
}

type retentionPolicyArgs struct {
	Rules []RetentionPolicyRule `pulumi:"rules"`
	// The schedule of when you would like the policy to run. This can be `Hourly`, `Daily`, `Weekly` or can be a custom cron string.
	Schedule *string `pulumi:"schedule"`
	// The project id of which you would like to apply this policy.
	Scope string `pulumi:"scope"`
}

// The set of arguments for constructing a RetentionPolicy resource.
type RetentionPolicyArgs struct {
	Rules RetentionPolicyRuleArrayInput
	// The schedule of when you would like the policy to run. This can be `Hourly`, `Daily`, `Weekly` or can be a custom cron string.
	Schedule pulumi.StringPtrInput
	// The project id of which you would like to apply this policy.
	Scope pulumi.StringInput
}

func (RetentionPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*retentionPolicyArgs)(nil)).Elem()
}

type RetentionPolicyInput interface {
	pulumi.Input

	ToRetentionPolicyOutput() RetentionPolicyOutput
	ToRetentionPolicyOutputWithContext(ctx context.Context) RetentionPolicyOutput
}

func (*RetentionPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**RetentionPolicy)(nil)).Elem()
}

func (i *RetentionPolicy) ToRetentionPolicyOutput() RetentionPolicyOutput {
	return i.ToRetentionPolicyOutputWithContext(context.Background())
}

func (i *RetentionPolicy) ToRetentionPolicyOutputWithContext(ctx context.Context) RetentionPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetentionPolicyOutput)
}

// RetentionPolicyArrayInput is an input type that accepts RetentionPolicyArray and RetentionPolicyArrayOutput values.
// You can construct a concrete instance of `RetentionPolicyArrayInput` via:
//
//	RetentionPolicyArray{ RetentionPolicyArgs{...} }
type RetentionPolicyArrayInput interface {
	pulumi.Input

	ToRetentionPolicyArrayOutput() RetentionPolicyArrayOutput
	ToRetentionPolicyArrayOutputWithContext(context.Context) RetentionPolicyArrayOutput
}

type RetentionPolicyArray []RetentionPolicyInput

func (RetentionPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RetentionPolicy)(nil)).Elem()
}

func (i RetentionPolicyArray) ToRetentionPolicyArrayOutput() RetentionPolicyArrayOutput {
	return i.ToRetentionPolicyArrayOutputWithContext(context.Background())
}

func (i RetentionPolicyArray) ToRetentionPolicyArrayOutputWithContext(ctx context.Context) RetentionPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetentionPolicyArrayOutput)
}

// RetentionPolicyMapInput is an input type that accepts RetentionPolicyMap and RetentionPolicyMapOutput values.
// You can construct a concrete instance of `RetentionPolicyMapInput` via:
//
//	RetentionPolicyMap{ "key": RetentionPolicyArgs{...} }
type RetentionPolicyMapInput interface {
	pulumi.Input

	ToRetentionPolicyMapOutput() RetentionPolicyMapOutput
	ToRetentionPolicyMapOutputWithContext(context.Context) RetentionPolicyMapOutput
}

type RetentionPolicyMap map[string]RetentionPolicyInput

func (RetentionPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RetentionPolicy)(nil)).Elem()
}

func (i RetentionPolicyMap) ToRetentionPolicyMapOutput() RetentionPolicyMapOutput {
	return i.ToRetentionPolicyMapOutputWithContext(context.Background())
}

func (i RetentionPolicyMap) ToRetentionPolicyMapOutputWithContext(ctx context.Context) RetentionPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetentionPolicyMapOutput)
}

type RetentionPolicyOutput struct{ *pulumi.OutputState }

func (RetentionPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RetentionPolicy)(nil)).Elem()
}

func (o RetentionPolicyOutput) ToRetentionPolicyOutput() RetentionPolicyOutput {
	return o
}

func (o RetentionPolicyOutput) ToRetentionPolicyOutputWithContext(ctx context.Context) RetentionPolicyOutput {
	return o
}

func (o RetentionPolicyOutput) Rules() RetentionPolicyRuleArrayOutput {
	return o.ApplyT(func(v *RetentionPolicy) RetentionPolicyRuleArrayOutput { return v.Rules }).(RetentionPolicyRuleArrayOutput)
}

// The schedule of when you would like the policy to run. This can be `Hourly`, `Daily`, `Weekly` or can be a custom cron string.
func (o RetentionPolicyOutput) Schedule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RetentionPolicy) pulumi.StringPtrOutput { return v.Schedule }).(pulumi.StringPtrOutput)
}

// The project id of which you would like to apply this policy.
func (o RetentionPolicyOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v *RetentionPolicy) pulumi.StringOutput { return v.Scope }).(pulumi.StringOutput)
}

type RetentionPolicyArrayOutput struct{ *pulumi.OutputState }

func (RetentionPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RetentionPolicy)(nil)).Elem()
}

func (o RetentionPolicyArrayOutput) ToRetentionPolicyArrayOutput() RetentionPolicyArrayOutput {
	return o
}

func (o RetentionPolicyArrayOutput) ToRetentionPolicyArrayOutputWithContext(ctx context.Context) RetentionPolicyArrayOutput {
	return o
}

func (o RetentionPolicyArrayOutput) Index(i pulumi.IntInput) RetentionPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RetentionPolicy {
		return vs[0].([]*RetentionPolicy)[vs[1].(int)]
	}).(RetentionPolicyOutput)
}

type RetentionPolicyMapOutput struct{ *pulumi.OutputState }

func (RetentionPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RetentionPolicy)(nil)).Elem()
}

func (o RetentionPolicyMapOutput) ToRetentionPolicyMapOutput() RetentionPolicyMapOutput {
	return o
}

func (o RetentionPolicyMapOutput) ToRetentionPolicyMapOutputWithContext(ctx context.Context) RetentionPolicyMapOutput {
	return o
}

func (o RetentionPolicyMapOutput) MapIndex(k pulumi.StringInput) RetentionPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RetentionPolicy {
		return vs[0].(map[string]*RetentionPolicy)[vs[1].(string)]
	}).(RetentionPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RetentionPolicyInput)(nil)).Elem(), &RetentionPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*RetentionPolicyArrayInput)(nil)).Elem(), RetentionPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RetentionPolicyMapInput)(nil)).Elem(), RetentionPolicyMap{})
	pulumi.RegisterOutputType(RetentionPolicyOutput{})
	pulumi.RegisterOutputType(RetentionPolicyArrayOutput{})
	pulumi.RegisterOutputType(RetentionPolicyMapOutput{})
}
