// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package harbor

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-harbor/sdk/v3/go/harbor/internal"
)

var _ = internal.GetEnvOrDefault

type ConfigSystemBannerMessage struct {
	// Whether or not the banner message is closable.
	Closable *bool `pulumi:"closable"`
	// The date the banner message will start displaying. (Format: `MM/DD/YYYY`)
	FromDate *string `pulumi:"fromDate"`
	// The message to display in the banner.
	Message string `pulumi:"message"`
	// The date the banner message will stop displaying. (Format: `MM/DD/YYYY`)
	ToDate *string `pulumi:"toDate"`
	// The type of banner message. Can be `"info"`, `"warning"`, `"success"` or `"danger"`.
	Type *string `pulumi:"type"`
}

// ConfigSystemBannerMessageInput is an input type that accepts ConfigSystemBannerMessageArgs and ConfigSystemBannerMessageOutput values.
// You can construct a concrete instance of `ConfigSystemBannerMessageInput` via:
//
//	ConfigSystemBannerMessageArgs{...}
type ConfigSystemBannerMessageInput interface {
	pulumi.Input

	ToConfigSystemBannerMessageOutput() ConfigSystemBannerMessageOutput
	ToConfigSystemBannerMessageOutputWithContext(context.Context) ConfigSystemBannerMessageOutput
}

type ConfigSystemBannerMessageArgs struct {
	// Whether or not the banner message is closable.
	Closable pulumi.BoolPtrInput `pulumi:"closable"`
	// The date the banner message will start displaying. (Format: `MM/DD/YYYY`)
	FromDate pulumi.StringPtrInput `pulumi:"fromDate"`
	// The message to display in the banner.
	Message pulumi.StringInput `pulumi:"message"`
	// The date the banner message will stop displaying. (Format: `MM/DD/YYYY`)
	ToDate pulumi.StringPtrInput `pulumi:"toDate"`
	// The type of banner message. Can be `"info"`, `"warning"`, `"success"` or `"danger"`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ConfigSystemBannerMessageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigSystemBannerMessage)(nil)).Elem()
}

func (i ConfigSystemBannerMessageArgs) ToConfigSystemBannerMessageOutput() ConfigSystemBannerMessageOutput {
	return i.ToConfigSystemBannerMessageOutputWithContext(context.Background())
}

func (i ConfigSystemBannerMessageArgs) ToConfigSystemBannerMessageOutputWithContext(ctx context.Context) ConfigSystemBannerMessageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigSystemBannerMessageOutput)
}

func (i ConfigSystemBannerMessageArgs) ToConfigSystemBannerMessagePtrOutput() ConfigSystemBannerMessagePtrOutput {
	return i.ToConfigSystemBannerMessagePtrOutputWithContext(context.Background())
}

func (i ConfigSystemBannerMessageArgs) ToConfigSystemBannerMessagePtrOutputWithContext(ctx context.Context) ConfigSystemBannerMessagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigSystemBannerMessageOutput).ToConfigSystemBannerMessagePtrOutputWithContext(ctx)
}

// ConfigSystemBannerMessagePtrInput is an input type that accepts ConfigSystemBannerMessageArgs, ConfigSystemBannerMessagePtr and ConfigSystemBannerMessagePtrOutput values.
// You can construct a concrete instance of `ConfigSystemBannerMessagePtrInput` via:
//
//	        ConfigSystemBannerMessageArgs{...}
//
//	or:
//
//	        nil
type ConfigSystemBannerMessagePtrInput interface {
	pulumi.Input

	ToConfigSystemBannerMessagePtrOutput() ConfigSystemBannerMessagePtrOutput
	ToConfigSystemBannerMessagePtrOutputWithContext(context.Context) ConfigSystemBannerMessagePtrOutput
}

type configSystemBannerMessagePtrType ConfigSystemBannerMessageArgs

func ConfigSystemBannerMessagePtr(v *ConfigSystemBannerMessageArgs) ConfigSystemBannerMessagePtrInput {
	return (*configSystemBannerMessagePtrType)(v)
}

func (*configSystemBannerMessagePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigSystemBannerMessage)(nil)).Elem()
}

func (i *configSystemBannerMessagePtrType) ToConfigSystemBannerMessagePtrOutput() ConfigSystemBannerMessagePtrOutput {
	return i.ToConfigSystemBannerMessagePtrOutputWithContext(context.Background())
}

func (i *configSystemBannerMessagePtrType) ToConfigSystemBannerMessagePtrOutputWithContext(ctx context.Context) ConfigSystemBannerMessagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigSystemBannerMessagePtrOutput)
}

type ConfigSystemBannerMessageOutput struct{ *pulumi.OutputState }

func (ConfigSystemBannerMessageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigSystemBannerMessage)(nil)).Elem()
}

func (o ConfigSystemBannerMessageOutput) ToConfigSystemBannerMessageOutput() ConfigSystemBannerMessageOutput {
	return o
}

func (o ConfigSystemBannerMessageOutput) ToConfigSystemBannerMessageOutputWithContext(ctx context.Context) ConfigSystemBannerMessageOutput {
	return o
}

func (o ConfigSystemBannerMessageOutput) ToConfigSystemBannerMessagePtrOutput() ConfigSystemBannerMessagePtrOutput {
	return o.ToConfigSystemBannerMessagePtrOutputWithContext(context.Background())
}

func (o ConfigSystemBannerMessageOutput) ToConfigSystemBannerMessagePtrOutputWithContext(ctx context.Context) ConfigSystemBannerMessagePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConfigSystemBannerMessage) *ConfigSystemBannerMessage {
		return &v
	}).(ConfigSystemBannerMessagePtrOutput)
}

// Whether or not the banner message is closable.
func (o ConfigSystemBannerMessageOutput) Closable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConfigSystemBannerMessage) *bool { return v.Closable }).(pulumi.BoolPtrOutput)
}

// The date the banner message will start displaying. (Format: `MM/DD/YYYY`)
func (o ConfigSystemBannerMessageOutput) FromDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigSystemBannerMessage) *string { return v.FromDate }).(pulumi.StringPtrOutput)
}

// The message to display in the banner.
func (o ConfigSystemBannerMessageOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigSystemBannerMessage) string { return v.Message }).(pulumi.StringOutput)
}

// The date the banner message will stop displaying. (Format: `MM/DD/YYYY`)
func (o ConfigSystemBannerMessageOutput) ToDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigSystemBannerMessage) *string { return v.ToDate }).(pulumi.StringPtrOutput)
}

// The type of banner message. Can be `"info"`, `"warning"`, `"success"` or `"danger"`.
func (o ConfigSystemBannerMessageOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigSystemBannerMessage) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ConfigSystemBannerMessagePtrOutput struct{ *pulumi.OutputState }

func (ConfigSystemBannerMessagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigSystemBannerMessage)(nil)).Elem()
}

func (o ConfigSystemBannerMessagePtrOutput) ToConfigSystemBannerMessagePtrOutput() ConfigSystemBannerMessagePtrOutput {
	return o
}

func (o ConfigSystemBannerMessagePtrOutput) ToConfigSystemBannerMessagePtrOutputWithContext(ctx context.Context) ConfigSystemBannerMessagePtrOutput {
	return o
}

func (o ConfigSystemBannerMessagePtrOutput) Elem() ConfigSystemBannerMessageOutput {
	return o.ApplyT(func(v *ConfigSystemBannerMessage) ConfigSystemBannerMessage {
		if v != nil {
			return *v
		}
		var ret ConfigSystemBannerMessage
		return ret
	}).(ConfigSystemBannerMessageOutput)
}

// Whether or not the banner message is closable.
func (o ConfigSystemBannerMessagePtrOutput) Closable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConfigSystemBannerMessage) *bool {
		if v == nil {
			return nil
		}
		return v.Closable
	}).(pulumi.BoolPtrOutput)
}

// The date the banner message will start displaying. (Format: `MM/DD/YYYY`)
func (o ConfigSystemBannerMessagePtrOutput) FromDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigSystemBannerMessage) *string {
		if v == nil {
			return nil
		}
		return v.FromDate
	}).(pulumi.StringPtrOutput)
}

// The message to display in the banner.
func (o ConfigSystemBannerMessagePtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigSystemBannerMessage) *string {
		if v == nil {
			return nil
		}
		return &v.Message
	}).(pulumi.StringPtrOutput)
}

// The date the banner message will stop displaying. (Format: `MM/DD/YYYY`)
func (o ConfigSystemBannerMessagePtrOutput) ToDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigSystemBannerMessage) *string {
		if v == nil {
			return nil
		}
		return v.ToDate
	}).(pulumi.StringPtrOutput)
}

// The type of banner message. Can be `"info"`, `"warning"`, `"success"` or `"danger"`.
func (o ConfigSystemBannerMessagePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigSystemBannerMessage) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type ReplicationFilter struct {
	// Matches or excludes the result. Can be one of the following. `matches`, `excludes`
	Decoration *string `pulumi:"decoration"`
	// Filter on the resource according to labels.
	Labels []string `pulumi:"labels"`
	// Filter on the name of the resource.
	Name *string `pulumi:"name"`
	// Filter on the resource type. Can be one of the following types. `chart`, `artifact`
	Resource *string `pulumi:"resource"`
	// Filter on the tag/version of the resource.
	Tag *string `pulumi:"tag"`
}

// ReplicationFilterInput is an input type that accepts ReplicationFilterArgs and ReplicationFilterOutput values.
// You can construct a concrete instance of `ReplicationFilterInput` via:
//
//	ReplicationFilterArgs{...}
type ReplicationFilterInput interface {
	pulumi.Input

	ToReplicationFilterOutput() ReplicationFilterOutput
	ToReplicationFilterOutputWithContext(context.Context) ReplicationFilterOutput
}

type ReplicationFilterArgs struct {
	// Matches or excludes the result. Can be one of the following. `matches`, `excludes`
	Decoration pulumi.StringPtrInput `pulumi:"decoration"`
	// Filter on the resource according to labels.
	Labels pulumi.StringArrayInput `pulumi:"labels"`
	// Filter on the name of the resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Filter on the resource type. Can be one of the following types. `chart`, `artifact`
	Resource pulumi.StringPtrInput `pulumi:"resource"`
	// Filter on the tag/version of the resource.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
}

func (ReplicationFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationFilter)(nil)).Elem()
}

func (i ReplicationFilterArgs) ToReplicationFilterOutput() ReplicationFilterOutput {
	return i.ToReplicationFilterOutputWithContext(context.Background())
}

func (i ReplicationFilterArgs) ToReplicationFilterOutputWithContext(ctx context.Context) ReplicationFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationFilterOutput)
}

// ReplicationFilterArrayInput is an input type that accepts ReplicationFilterArray and ReplicationFilterArrayOutput values.
// You can construct a concrete instance of `ReplicationFilterArrayInput` via:
//
//	ReplicationFilterArray{ ReplicationFilterArgs{...} }
type ReplicationFilterArrayInput interface {
	pulumi.Input

	ToReplicationFilterArrayOutput() ReplicationFilterArrayOutput
	ToReplicationFilterArrayOutputWithContext(context.Context) ReplicationFilterArrayOutput
}

type ReplicationFilterArray []ReplicationFilterInput

func (ReplicationFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReplicationFilter)(nil)).Elem()
}

func (i ReplicationFilterArray) ToReplicationFilterArrayOutput() ReplicationFilterArrayOutput {
	return i.ToReplicationFilterArrayOutputWithContext(context.Background())
}

func (i ReplicationFilterArray) ToReplicationFilterArrayOutputWithContext(ctx context.Context) ReplicationFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationFilterArrayOutput)
}

type ReplicationFilterOutput struct{ *pulumi.OutputState }

func (ReplicationFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationFilter)(nil)).Elem()
}

func (o ReplicationFilterOutput) ToReplicationFilterOutput() ReplicationFilterOutput {
	return o
}

func (o ReplicationFilterOutput) ToReplicationFilterOutputWithContext(ctx context.Context) ReplicationFilterOutput {
	return o
}

// Matches or excludes the result. Can be one of the following. `matches`, `excludes`
func (o ReplicationFilterOutput) Decoration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReplicationFilter) *string { return v.Decoration }).(pulumi.StringPtrOutput)
}

// Filter on the resource according to labels.
func (o ReplicationFilterOutput) Labels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ReplicationFilter) []string { return v.Labels }).(pulumi.StringArrayOutput)
}

// Filter on the name of the resource.
func (o ReplicationFilterOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReplicationFilter) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Filter on the resource type. Can be one of the following types. `chart`, `artifact`
func (o ReplicationFilterOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReplicationFilter) *string { return v.Resource }).(pulumi.StringPtrOutput)
}

// Filter on the tag/version of the resource.
func (o ReplicationFilterOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReplicationFilter) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

type ReplicationFilterArrayOutput struct{ *pulumi.OutputState }

func (ReplicationFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReplicationFilter)(nil)).Elem()
}

func (o ReplicationFilterArrayOutput) ToReplicationFilterArrayOutput() ReplicationFilterArrayOutput {
	return o
}

func (o ReplicationFilterArrayOutput) ToReplicationFilterArrayOutputWithContext(ctx context.Context) ReplicationFilterArrayOutput {
	return o
}

func (o ReplicationFilterArrayOutput) Index(i pulumi.IntInput) ReplicationFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReplicationFilter {
		return vs[0].([]ReplicationFilter)[vs[1].(int)]
	}).(ReplicationFilterOutput)
}

type RetentionPolicyRule struct {
	AlwaysRetain       *bool   `pulumi:"alwaysRetain"`
	Disabled           *bool   `pulumi:"disabled"`
	MostRecentlyPulled *int    `pulumi:"mostRecentlyPulled"`
	MostRecentlyPushed *int    `pulumi:"mostRecentlyPushed"`
	NDaysSinceLastPull *int    `pulumi:"nDaysSinceLastPull"`
	NDaysSinceLastPush *int    `pulumi:"nDaysSinceLastPush"`
	RepoExcluding      *string `pulumi:"repoExcluding"`
	RepoMatching       *string `pulumi:"repoMatching"`
	TagExcluding       *string `pulumi:"tagExcluding"`
	TagMatching        *string `pulumi:"tagMatching"`
	UntaggedArtifacts  *bool   `pulumi:"untaggedArtifacts"`
}

// RetentionPolicyRuleInput is an input type that accepts RetentionPolicyRuleArgs and RetentionPolicyRuleOutput values.
// You can construct a concrete instance of `RetentionPolicyRuleInput` via:
//
//	RetentionPolicyRuleArgs{...}
type RetentionPolicyRuleInput interface {
	pulumi.Input

	ToRetentionPolicyRuleOutput() RetentionPolicyRuleOutput
	ToRetentionPolicyRuleOutputWithContext(context.Context) RetentionPolicyRuleOutput
}

type RetentionPolicyRuleArgs struct {
	AlwaysRetain       pulumi.BoolPtrInput   `pulumi:"alwaysRetain"`
	Disabled           pulumi.BoolPtrInput   `pulumi:"disabled"`
	MostRecentlyPulled pulumi.IntPtrInput    `pulumi:"mostRecentlyPulled"`
	MostRecentlyPushed pulumi.IntPtrInput    `pulumi:"mostRecentlyPushed"`
	NDaysSinceLastPull pulumi.IntPtrInput    `pulumi:"nDaysSinceLastPull"`
	NDaysSinceLastPush pulumi.IntPtrInput    `pulumi:"nDaysSinceLastPush"`
	RepoExcluding      pulumi.StringPtrInput `pulumi:"repoExcluding"`
	RepoMatching       pulumi.StringPtrInput `pulumi:"repoMatching"`
	TagExcluding       pulumi.StringPtrInput `pulumi:"tagExcluding"`
	TagMatching        pulumi.StringPtrInput `pulumi:"tagMatching"`
	UntaggedArtifacts  pulumi.BoolPtrInput   `pulumi:"untaggedArtifacts"`
}

func (RetentionPolicyRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RetentionPolicyRule)(nil)).Elem()
}

func (i RetentionPolicyRuleArgs) ToRetentionPolicyRuleOutput() RetentionPolicyRuleOutput {
	return i.ToRetentionPolicyRuleOutputWithContext(context.Background())
}

func (i RetentionPolicyRuleArgs) ToRetentionPolicyRuleOutputWithContext(ctx context.Context) RetentionPolicyRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetentionPolicyRuleOutput)
}

// RetentionPolicyRuleArrayInput is an input type that accepts RetentionPolicyRuleArray and RetentionPolicyRuleArrayOutput values.
// You can construct a concrete instance of `RetentionPolicyRuleArrayInput` via:
//
//	RetentionPolicyRuleArray{ RetentionPolicyRuleArgs{...} }
type RetentionPolicyRuleArrayInput interface {
	pulumi.Input

	ToRetentionPolicyRuleArrayOutput() RetentionPolicyRuleArrayOutput
	ToRetentionPolicyRuleArrayOutputWithContext(context.Context) RetentionPolicyRuleArrayOutput
}

type RetentionPolicyRuleArray []RetentionPolicyRuleInput

func (RetentionPolicyRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RetentionPolicyRule)(nil)).Elem()
}

func (i RetentionPolicyRuleArray) ToRetentionPolicyRuleArrayOutput() RetentionPolicyRuleArrayOutput {
	return i.ToRetentionPolicyRuleArrayOutputWithContext(context.Background())
}

func (i RetentionPolicyRuleArray) ToRetentionPolicyRuleArrayOutputWithContext(ctx context.Context) RetentionPolicyRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetentionPolicyRuleArrayOutput)
}

type RetentionPolicyRuleOutput struct{ *pulumi.OutputState }

func (RetentionPolicyRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RetentionPolicyRule)(nil)).Elem()
}

func (o RetentionPolicyRuleOutput) ToRetentionPolicyRuleOutput() RetentionPolicyRuleOutput {
	return o
}

func (o RetentionPolicyRuleOutput) ToRetentionPolicyRuleOutputWithContext(ctx context.Context) RetentionPolicyRuleOutput {
	return o
}

func (o RetentionPolicyRuleOutput) AlwaysRetain() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RetentionPolicyRule) *bool { return v.AlwaysRetain }).(pulumi.BoolPtrOutput)
}

func (o RetentionPolicyRuleOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RetentionPolicyRule) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

func (o RetentionPolicyRuleOutput) MostRecentlyPulled() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RetentionPolicyRule) *int { return v.MostRecentlyPulled }).(pulumi.IntPtrOutput)
}

func (o RetentionPolicyRuleOutput) MostRecentlyPushed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RetentionPolicyRule) *int { return v.MostRecentlyPushed }).(pulumi.IntPtrOutput)
}

func (o RetentionPolicyRuleOutput) NDaysSinceLastPull() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RetentionPolicyRule) *int { return v.NDaysSinceLastPull }).(pulumi.IntPtrOutput)
}

func (o RetentionPolicyRuleOutput) NDaysSinceLastPush() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RetentionPolicyRule) *int { return v.NDaysSinceLastPush }).(pulumi.IntPtrOutput)
}

func (o RetentionPolicyRuleOutput) RepoExcluding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RetentionPolicyRule) *string { return v.RepoExcluding }).(pulumi.StringPtrOutput)
}

func (o RetentionPolicyRuleOutput) RepoMatching() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RetentionPolicyRule) *string { return v.RepoMatching }).(pulumi.StringPtrOutput)
}

func (o RetentionPolicyRuleOutput) TagExcluding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RetentionPolicyRule) *string { return v.TagExcluding }).(pulumi.StringPtrOutput)
}

func (o RetentionPolicyRuleOutput) TagMatching() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RetentionPolicyRule) *string { return v.TagMatching }).(pulumi.StringPtrOutput)
}

func (o RetentionPolicyRuleOutput) UntaggedArtifacts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RetentionPolicyRule) *bool { return v.UntaggedArtifacts }).(pulumi.BoolPtrOutput)
}

type RetentionPolicyRuleArrayOutput struct{ *pulumi.OutputState }

func (RetentionPolicyRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RetentionPolicyRule)(nil)).Elem()
}

func (o RetentionPolicyRuleArrayOutput) ToRetentionPolicyRuleArrayOutput() RetentionPolicyRuleArrayOutput {
	return o
}

func (o RetentionPolicyRuleArrayOutput) ToRetentionPolicyRuleArrayOutputWithContext(ctx context.Context) RetentionPolicyRuleArrayOutput {
	return o
}

func (o RetentionPolicyRuleArrayOutput) Index(i pulumi.IntInput) RetentionPolicyRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RetentionPolicyRule {
		return vs[0].([]RetentionPolicyRule)[vs[1].(int)]
	}).(RetentionPolicyRuleOutput)
}

type RobotAccountPermission struct {
	Accesses []RobotAccountPermissionAccess `pulumi:"accesses"`
	// Either `system` or `project`.
	Kind string `pulumi:"kind"`
	// namespace is the name of your project. For kind `system` permissions, always use `/` as namespace. Use `*` to match all projects.
	Namespace string `pulumi:"namespace"`
}

// RobotAccountPermissionInput is an input type that accepts RobotAccountPermissionArgs and RobotAccountPermissionOutput values.
// You can construct a concrete instance of `RobotAccountPermissionInput` via:
//
//	RobotAccountPermissionArgs{...}
type RobotAccountPermissionInput interface {
	pulumi.Input

	ToRobotAccountPermissionOutput() RobotAccountPermissionOutput
	ToRobotAccountPermissionOutputWithContext(context.Context) RobotAccountPermissionOutput
}

type RobotAccountPermissionArgs struct {
	Accesses RobotAccountPermissionAccessArrayInput `pulumi:"accesses"`
	// Either `system` or `project`.
	Kind pulumi.StringInput `pulumi:"kind"`
	// namespace is the name of your project. For kind `system` permissions, always use `/` as namespace. Use `*` to match all projects.
	Namespace pulumi.StringInput `pulumi:"namespace"`
}

func (RobotAccountPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RobotAccountPermission)(nil)).Elem()
}

func (i RobotAccountPermissionArgs) ToRobotAccountPermissionOutput() RobotAccountPermissionOutput {
	return i.ToRobotAccountPermissionOutputWithContext(context.Background())
}

func (i RobotAccountPermissionArgs) ToRobotAccountPermissionOutputWithContext(ctx context.Context) RobotAccountPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RobotAccountPermissionOutput)
}

// RobotAccountPermissionArrayInput is an input type that accepts RobotAccountPermissionArray and RobotAccountPermissionArrayOutput values.
// You can construct a concrete instance of `RobotAccountPermissionArrayInput` via:
//
//	RobotAccountPermissionArray{ RobotAccountPermissionArgs{...} }
type RobotAccountPermissionArrayInput interface {
	pulumi.Input

	ToRobotAccountPermissionArrayOutput() RobotAccountPermissionArrayOutput
	ToRobotAccountPermissionArrayOutputWithContext(context.Context) RobotAccountPermissionArrayOutput
}

type RobotAccountPermissionArray []RobotAccountPermissionInput

func (RobotAccountPermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RobotAccountPermission)(nil)).Elem()
}

func (i RobotAccountPermissionArray) ToRobotAccountPermissionArrayOutput() RobotAccountPermissionArrayOutput {
	return i.ToRobotAccountPermissionArrayOutputWithContext(context.Background())
}

func (i RobotAccountPermissionArray) ToRobotAccountPermissionArrayOutputWithContext(ctx context.Context) RobotAccountPermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RobotAccountPermissionArrayOutput)
}

type RobotAccountPermissionOutput struct{ *pulumi.OutputState }

func (RobotAccountPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RobotAccountPermission)(nil)).Elem()
}

func (o RobotAccountPermissionOutput) ToRobotAccountPermissionOutput() RobotAccountPermissionOutput {
	return o
}

func (o RobotAccountPermissionOutput) ToRobotAccountPermissionOutputWithContext(ctx context.Context) RobotAccountPermissionOutput {
	return o
}

func (o RobotAccountPermissionOutput) Accesses() RobotAccountPermissionAccessArrayOutput {
	return o.ApplyT(func(v RobotAccountPermission) []RobotAccountPermissionAccess { return v.Accesses }).(RobotAccountPermissionAccessArrayOutput)
}

// Either `system` or `project`.
func (o RobotAccountPermissionOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v RobotAccountPermission) string { return v.Kind }).(pulumi.StringOutput)
}

// namespace is the name of your project. For kind `system` permissions, always use `/` as namespace. Use `*` to match all projects.
func (o RobotAccountPermissionOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v RobotAccountPermission) string { return v.Namespace }).(pulumi.StringOutput)
}

type RobotAccountPermissionArrayOutput struct{ *pulumi.OutputState }

func (RobotAccountPermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RobotAccountPermission)(nil)).Elem()
}

func (o RobotAccountPermissionArrayOutput) ToRobotAccountPermissionArrayOutput() RobotAccountPermissionArrayOutput {
	return o
}

func (o RobotAccountPermissionArrayOutput) ToRobotAccountPermissionArrayOutputWithContext(ctx context.Context) RobotAccountPermissionArrayOutput {
	return o
}

func (o RobotAccountPermissionArrayOutput) Index(i pulumi.IntInput) RobotAccountPermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RobotAccountPermission {
		return vs[0].([]RobotAccountPermission)[vs[1].(int)]
	}).(RobotAccountPermissionOutput)
}

type RobotAccountPermissionAccess struct {
	// Eg. `push`, `pull`, `read`, etc. Check [available actions](https://github.com/goharbor/harbor/blob/-/src/common/rbac/const.go).
	Action string `pulumi:"action"`
	// Either `allow` or `deny`. Defaults to `allow`.
	Effect *string `pulumi:"effect"`
	// Eg. `repository`, `labels`, etc. Check [available resources](https://github.com/goharbor/harbor/blob/-/src/common/rbac/const.go).
	Resource string `pulumi:"resource"`
}

// RobotAccountPermissionAccessInput is an input type that accepts RobotAccountPermissionAccessArgs and RobotAccountPermissionAccessOutput values.
// You can construct a concrete instance of `RobotAccountPermissionAccessInput` via:
//
//	RobotAccountPermissionAccessArgs{...}
type RobotAccountPermissionAccessInput interface {
	pulumi.Input

	ToRobotAccountPermissionAccessOutput() RobotAccountPermissionAccessOutput
	ToRobotAccountPermissionAccessOutputWithContext(context.Context) RobotAccountPermissionAccessOutput
}

type RobotAccountPermissionAccessArgs struct {
	// Eg. `push`, `pull`, `read`, etc. Check [available actions](https://github.com/goharbor/harbor/blob/-/src/common/rbac/const.go).
	Action pulumi.StringInput `pulumi:"action"`
	// Either `allow` or `deny`. Defaults to `allow`.
	Effect pulumi.StringPtrInput `pulumi:"effect"`
	// Eg. `repository`, `labels`, etc. Check [available resources](https://github.com/goharbor/harbor/blob/-/src/common/rbac/const.go).
	Resource pulumi.StringInput `pulumi:"resource"`
}

func (RobotAccountPermissionAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RobotAccountPermissionAccess)(nil)).Elem()
}

func (i RobotAccountPermissionAccessArgs) ToRobotAccountPermissionAccessOutput() RobotAccountPermissionAccessOutput {
	return i.ToRobotAccountPermissionAccessOutputWithContext(context.Background())
}

func (i RobotAccountPermissionAccessArgs) ToRobotAccountPermissionAccessOutputWithContext(ctx context.Context) RobotAccountPermissionAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RobotAccountPermissionAccessOutput)
}

// RobotAccountPermissionAccessArrayInput is an input type that accepts RobotAccountPermissionAccessArray and RobotAccountPermissionAccessArrayOutput values.
// You can construct a concrete instance of `RobotAccountPermissionAccessArrayInput` via:
//
//	RobotAccountPermissionAccessArray{ RobotAccountPermissionAccessArgs{...} }
type RobotAccountPermissionAccessArrayInput interface {
	pulumi.Input

	ToRobotAccountPermissionAccessArrayOutput() RobotAccountPermissionAccessArrayOutput
	ToRobotAccountPermissionAccessArrayOutputWithContext(context.Context) RobotAccountPermissionAccessArrayOutput
}

type RobotAccountPermissionAccessArray []RobotAccountPermissionAccessInput

func (RobotAccountPermissionAccessArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RobotAccountPermissionAccess)(nil)).Elem()
}

func (i RobotAccountPermissionAccessArray) ToRobotAccountPermissionAccessArrayOutput() RobotAccountPermissionAccessArrayOutput {
	return i.ToRobotAccountPermissionAccessArrayOutputWithContext(context.Background())
}

func (i RobotAccountPermissionAccessArray) ToRobotAccountPermissionAccessArrayOutputWithContext(ctx context.Context) RobotAccountPermissionAccessArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RobotAccountPermissionAccessArrayOutput)
}

type RobotAccountPermissionAccessOutput struct{ *pulumi.OutputState }

func (RobotAccountPermissionAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RobotAccountPermissionAccess)(nil)).Elem()
}

func (o RobotAccountPermissionAccessOutput) ToRobotAccountPermissionAccessOutput() RobotAccountPermissionAccessOutput {
	return o
}

func (o RobotAccountPermissionAccessOutput) ToRobotAccountPermissionAccessOutputWithContext(ctx context.Context) RobotAccountPermissionAccessOutput {
	return o
}

// Eg. `push`, `pull`, `read`, etc. Check [available actions](https://github.com/goharbor/harbor/blob/-/src/common/rbac/const.go).
func (o RobotAccountPermissionAccessOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v RobotAccountPermissionAccess) string { return v.Action }).(pulumi.StringOutput)
}

// Either `allow` or `deny`. Defaults to `allow`.
func (o RobotAccountPermissionAccessOutput) Effect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RobotAccountPermissionAccess) *string { return v.Effect }).(pulumi.StringPtrOutput)
}

// Eg. `repository`, `labels`, etc. Check [available resources](https://github.com/goharbor/harbor/blob/-/src/common/rbac/const.go).
func (o RobotAccountPermissionAccessOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v RobotAccountPermissionAccess) string { return v.Resource }).(pulumi.StringOutput)
}

type RobotAccountPermissionAccessArrayOutput struct{ *pulumi.OutputState }

func (RobotAccountPermissionAccessArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RobotAccountPermissionAccess)(nil)).Elem()
}

func (o RobotAccountPermissionAccessArrayOutput) ToRobotAccountPermissionAccessArrayOutput() RobotAccountPermissionAccessArrayOutput {
	return o
}

func (o RobotAccountPermissionAccessArrayOutput) ToRobotAccountPermissionAccessArrayOutputWithContext(ctx context.Context) RobotAccountPermissionAccessArrayOutput {
	return o
}

func (o RobotAccountPermissionAccessArrayOutput) Index(i pulumi.IntInput) RobotAccountPermissionAccessOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RobotAccountPermissionAccess {
		return vs[0].([]RobotAccountPermissionAccess)[vs[1].(int)]
	}).(RobotAccountPermissionAccessOutput)
}

type GetGroupsGroup struct {
	// The name of the group to filter by.
	GroupName string `pulumi:"groupName"`
	GroupType int    `pulumi:"groupType"`
	// The ID of this resource.
	Id int `pulumi:"id"`
	// The LDAP group DN to filter by.
	LdapGroupDn string `pulumi:"ldapGroupDn"`
}

// GetGroupsGroupInput is an input type that accepts GetGroupsGroupArgs and GetGroupsGroupOutput values.
// You can construct a concrete instance of `GetGroupsGroupInput` via:
//
//	GetGroupsGroupArgs{...}
type GetGroupsGroupInput interface {
	pulumi.Input

	ToGetGroupsGroupOutput() GetGroupsGroupOutput
	ToGetGroupsGroupOutputWithContext(context.Context) GetGroupsGroupOutput
}

type GetGroupsGroupArgs struct {
	// The name of the group to filter by.
	GroupName pulumi.StringInput `pulumi:"groupName"`
	GroupType pulumi.IntInput    `pulumi:"groupType"`
	// The ID of this resource.
	Id pulumi.IntInput `pulumi:"id"`
	// The LDAP group DN to filter by.
	LdapGroupDn pulumi.StringInput `pulumi:"ldapGroupDn"`
}

func (GetGroupsGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupsGroup)(nil)).Elem()
}

func (i GetGroupsGroupArgs) ToGetGroupsGroupOutput() GetGroupsGroupOutput {
	return i.ToGetGroupsGroupOutputWithContext(context.Background())
}

func (i GetGroupsGroupArgs) ToGetGroupsGroupOutputWithContext(ctx context.Context) GetGroupsGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupsGroupOutput)
}

// GetGroupsGroupArrayInput is an input type that accepts GetGroupsGroupArray and GetGroupsGroupArrayOutput values.
// You can construct a concrete instance of `GetGroupsGroupArrayInput` via:
//
//	GetGroupsGroupArray{ GetGroupsGroupArgs{...} }
type GetGroupsGroupArrayInput interface {
	pulumi.Input

	ToGetGroupsGroupArrayOutput() GetGroupsGroupArrayOutput
	ToGetGroupsGroupArrayOutputWithContext(context.Context) GetGroupsGroupArrayOutput
}

type GetGroupsGroupArray []GetGroupsGroupInput

func (GetGroupsGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupsGroup)(nil)).Elem()
}

func (i GetGroupsGroupArray) ToGetGroupsGroupArrayOutput() GetGroupsGroupArrayOutput {
	return i.ToGetGroupsGroupArrayOutputWithContext(context.Background())
}

func (i GetGroupsGroupArray) ToGetGroupsGroupArrayOutputWithContext(ctx context.Context) GetGroupsGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupsGroupArrayOutput)
}

type GetGroupsGroupOutput struct{ *pulumi.OutputState }

func (GetGroupsGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupsGroup)(nil)).Elem()
}

func (o GetGroupsGroupOutput) ToGetGroupsGroupOutput() GetGroupsGroupOutput {
	return o
}

func (o GetGroupsGroupOutput) ToGetGroupsGroupOutputWithContext(ctx context.Context) GetGroupsGroupOutput {
	return o
}

// The name of the group to filter by.
func (o GetGroupsGroupOutput) GroupName() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsGroup) string { return v.GroupName }).(pulumi.StringOutput)
}

func (o GetGroupsGroupOutput) GroupType() pulumi.IntOutput {
	return o.ApplyT(func(v GetGroupsGroup) int { return v.GroupType }).(pulumi.IntOutput)
}

// The ID of this resource.
func (o GetGroupsGroupOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetGroupsGroup) int { return v.Id }).(pulumi.IntOutput)
}

// The LDAP group DN to filter by.
func (o GetGroupsGroupOutput) LdapGroupDn() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsGroup) string { return v.LdapGroupDn }).(pulumi.StringOutput)
}

type GetGroupsGroupArrayOutput struct{ *pulumi.OutputState }

func (GetGroupsGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupsGroup)(nil)).Elem()
}

func (o GetGroupsGroupArrayOutput) ToGetGroupsGroupArrayOutput() GetGroupsGroupArrayOutput {
	return o
}

func (o GetGroupsGroupArrayOutput) ToGetGroupsGroupArrayOutputWithContext(ctx context.Context) GetGroupsGroupArrayOutput {
	return o
}

func (o GetGroupsGroupArrayOutput) Index(i pulumi.IntInput) GetGroupsGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetGroupsGroup {
		return vs[0].([]GetGroupsGroup)[vs[1].(int)]
	}).(GetGroupsGroupOutput)
}

type GetProjectMemberGroupsProjectMemberGroup struct {
	GroupName string `pulumi:"groupName"`
	// The ID of this resource.
	Id string `pulumi:"id"`
	// The id of the project within harbor.
	ProjectId string `pulumi:"projectId"`
	Role      string `pulumi:"role"`
}

// GetProjectMemberGroupsProjectMemberGroupInput is an input type that accepts GetProjectMemberGroupsProjectMemberGroupArgs and GetProjectMemberGroupsProjectMemberGroupOutput values.
// You can construct a concrete instance of `GetProjectMemberGroupsProjectMemberGroupInput` via:
//
//	GetProjectMemberGroupsProjectMemberGroupArgs{...}
type GetProjectMemberGroupsProjectMemberGroupInput interface {
	pulumi.Input

	ToGetProjectMemberGroupsProjectMemberGroupOutput() GetProjectMemberGroupsProjectMemberGroupOutput
	ToGetProjectMemberGroupsProjectMemberGroupOutputWithContext(context.Context) GetProjectMemberGroupsProjectMemberGroupOutput
}

type GetProjectMemberGroupsProjectMemberGroupArgs struct {
	GroupName pulumi.StringInput `pulumi:"groupName"`
	// The ID of this resource.
	Id pulumi.StringInput `pulumi:"id"`
	// The id of the project within harbor.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	Role      pulumi.StringInput `pulumi:"role"`
}

func (GetProjectMemberGroupsProjectMemberGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectMemberGroupsProjectMemberGroup)(nil)).Elem()
}

func (i GetProjectMemberGroupsProjectMemberGroupArgs) ToGetProjectMemberGroupsProjectMemberGroupOutput() GetProjectMemberGroupsProjectMemberGroupOutput {
	return i.ToGetProjectMemberGroupsProjectMemberGroupOutputWithContext(context.Background())
}

func (i GetProjectMemberGroupsProjectMemberGroupArgs) ToGetProjectMemberGroupsProjectMemberGroupOutputWithContext(ctx context.Context) GetProjectMemberGroupsProjectMemberGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectMemberGroupsProjectMemberGroupOutput)
}

// GetProjectMemberGroupsProjectMemberGroupArrayInput is an input type that accepts GetProjectMemberGroupsProjectMemberGroupArray and GetProjectMemberGroupsProjectMemberGroupArrayOutput values.
// You can construct a concrete instance of `GetProjectMemberGroupsProjectMemberGroupArrayInput` via:
//
//	GetProjectMemberGroupsProjectMemberGroupArray{ GetProjectMemberGroupsProjectMemberGroupArgs{...} }
type GetProjectMemberGroupsProjectMemberGroupArrayInput interface {
	pulumi.Input

	ToGetProjectMemberGroupsProjectMemberGroupArrayOutput() GetProjectMemberGroupsProjectMemberGroupArrayOutput
	ToGetProjectMemberGroupsProjectMemberGroupArrayOutputWithContext(context.Context) GetProjectMemberGroupsProjectMemberGroupArrayOutput
}

type GetProjectMemberGroupsProjectMemberGroupArray []GetProjectMemberGroupsProjectMemberGroupInput

func (GetProjectMemberGroupsProjectMemberGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectMemberGroupsProjectMemberGroup)(nil)).Elem()
}

func (i GetProjectMemberGroupsProjectMemberGroupArray) ToGetProjectMemberGroupsProjectMemberGroupArrayOutput() GetProjectMemberGroupsProjectMemberGroupArrayOutput {
	return i.ToGetProjectMemberGroupsProjectMemberGroupArrayOutputWithContext(context.Background())
}

func (i GetProjectMemberGroupsProjectMemberGroupArray) ToGetProjectMemberGroupsProjectMemberGroupArrayOutputWithContext(ctx context.Context) GetProjectMemberGroupsProjectMemberGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectMemberGroupsProjectMemberGroupArrayOutput)
}

type GetProjectMemberGroupsProjectMemberGroupOutput struct{ *pulumi.OutputState }

func (GetProjectMemberGroupsProjectMemberGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectMemberGroupsProjectMemberGroup)(nil)).Elem()
}

func (o GetProjectMemberGroupsProjectMemberGroupOutput) ToGetProjectMemberGroupsProjectMemberGroupOutput() GetProjectMemberGroupsProjectMemberGroupOutput {
	return o
}

func (o GetProjectMemberGroupsProjectMemberGroupOutput) ToGetProjectMemberGroupsProjectMemberGroupOutputWithContext(ctx context.Context) GetProjectMemberGroupsProjectMemberGroupOutput {
	return o
}

func (o GetProjectMemberGroupsProjectMemberGroupOutput) GroupName() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectMemberGroupsProjectMemberGroup) string { return v.GroupName }).(pulumi.StringOutput)
}

// The ID of this resource.
func (o GetProjectMemberGroupsProjectMemberGroupOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectMemberGroupsProjectMemberGroup) string { return v.Id }).(pulumi.StringOutput)
}

// The id of the project within harbor.
func (o GetProjectMemberGroupsProjectMemberGroupOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectMemberGroupsProjectMemberGroup) string { return v.ProjectId }).(pulumi.StringOutput)
}

func (o GetProjectMemberGroupsProjectMemberGroupOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectMemberGroupsProjectMemberGroup) string { return v.Role }).(pulumi.StringOutput)
}

type GetProjectMemberGroupsProjectMemberGroupArrayOutput struct{ *pulumi.OutputState }

func (GetProjectMemberGroupsProjectMemberGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectMemberGroupsProjectMemberGroup)(nil)).Elem()
}

func (o GetProjectMemberGroupsProjectMemberGroupArrayOutput) ToGetProjectMemberGroupsProjectMemberGroupArrayOutput() GetProjectMemberGroupsProjectMemberGroupArrayOutput {
	return o
}

func (o GetProjectMemberGroupsProjectMemberGroupArrayOutput) ToGetProjectMemberGroupsProjectMemberGroupArrayOutputWithContext(ctx context.Context) GetProjectMemberGroupsProjectMemberGroupArrayOutput {
	return o
}

func (o GetProjectMemberGroupsProjectMemberGroupArrayOutput) Index(i pulumi.IntInput) GetProjectMemberGroupsProjectMemberGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectMemberGroupsProjectMemberGroup {
		return vs[0].([]GetProjectMemberGroupsProjectMemberGroup)[vs[1].(int)]
	}).(GetProjectMemberGroupsProjectMemberGroupOutput)
}

type GetProjectMemberUsersProjectMemberUser struct {
	// The ID of this resource.
	Id string `pulumi:"id"`
	// The id of the project within harbor.
	ProjectId string `pulumi:"projectId"`
	Role      string `pulumi:"role"`
	UserName  string `pulumi:"userName"`
}

// GetProjectMemberUsersProjectMemberUserInput is an input type that accepts GetProjectMemberUsersProjectMemberUserArgs and GetProjectMemberUsersProjectMemberUserOutput values.
// You can construct a concrete instance of `GetProjectMemberUsersProjectMemberUserInput` via:
//
//	GetProjectMemberUsersProjectMemberUserArgs{...}
type GetProjectMemberUsersProjectMemberUserInput interface {
	pulumi.Input

	ToGetProjectMemberUsersProjectMemberUserOutput() GetProjectMemberUsersProjectMemberUserOutput
	ToGetProjectMemberUsersProjectMemberUserOutputWithContext(context.Context) GetProjectMemberUsersProjectMemberUserOutput
}

type GetProjectMemberUsersProjectMemberUserArgs struct {
	// The ID of this resource.
	Id pulumi.StringInput `pulumi:"id"`
	// The id of the project within harbor.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	Role      pulumi.StringInput `pulumi:"role"`
	UserName  pulumi.StringInput `pulumi:"userName"`
}

func (GetProjectMemberUsersProjectMemberUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectMemberUsersProjectMemberUser)(nil)).Elem()
}

func (i GetProjectMemberUsersProjectMemberUserArgs) ToGetProjectMemberUsersProjectMemberUserOutput() GetProjectMemberUsersProjectMemberUserOutput {
	return i.ToGetProjectMemberUsersProjectMemberUserOutputWithContext(context.Background())
}

func (i GetProjectMemberUsersProjectMemberUserArgs) ToGetProjectMemberUsersProjectMemberUserOutputWithContext(ctx context.Context) GetProjectMemberUsersProjectMemberUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectMemberUsersProjectMemberUserOutput)
}

// GetProjectMemberUsersProjectMemberUserArrayInput is an input type that accepts GetProjectMemberUsersProjectMemberUserArray and GetProjectMemberUsersProjectMemberUserArrayOutput values.
// You can construct a concrete instance of `GetProjectMemberUsersProjectMemberUserArrayInput` via:
//
//	GetProjectMemberUsersProjectMemberUserArray{ GetProjectMemberUsersProjectMemberUserArgs{...} }
type GetProjectMemberUsersProjectMemberUserArrayInput interface {
	pulumi.Input

	ToGetProjectMemberUsersProjectMemberUserArrayOutput() GetProjectMemberUsersProjectMemberUserArrayOutput
	ToGetProjectMemberUsersProjectMemberUserArrayOutputWithContext(context.Context) GetProjectMemberUsersProjectMemberUserArrayOutput
}

type GetProjectMemberUsersProjectMemberUserArray []GetProjectMemberUsersProjectMemberUserInput

func (GetProjectMemberUsersProjectMemberUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectMemberUsersProjectMemberUser)(nil)).Elem()
}

func (i GetProjectMemberUsersProjectMemberUserArray) ToGetProjectMemberUsersProjectMemberUserArrayOutput() GetProjectMemberUsersProjectMemberUserArrayOutput {
	return i.ToGetProjectMemberUsersProjectMemberUserArrayOutputWithContext(context.Background())
}

func (i GetProjectMemberUsersProjectMemberUserArray) ToGetProjectMemberUsersProjectMemberUserArrayOutputWithContext(ctx context.Context) GetProjectMemberUsersProjectMemberUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectMemberUsersProjectMemberUserArrayOutput)
}

type GetProjectMemberUsersProjectMemberUserOutput struct{ *pulumi.OutputState }

func (GetProjectMemberUsersProjectMemberUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectMemberUsersProjectMemberUser)(nil)).Elem()
}

func (o GetProjectMemberUsersProjectMemberUserOutput) ToGetProjectMemberUsersProjectMemberUserOutput() GetProjectMemberUsersProjectMemberUserOutput {
	return o
}

func (o GetProjectMemberUsersProjectMemberUserOutput) ToGetProjectMemberUsersProjectMemberUserOutputWithContext(ctx context.Context) GetProjectMemberUsersProjectMemberUserOutput {
	return o
}

// The ID of this resource.
func (o GetProjectMemberUsersProjectMemberUserOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectMemberUsersProjectMemberUser) string { return v.Id }).(pulumi.StringOutput)
}

// The id of the project within harbor.
func (o GetProjectMemberUsersProjectMemberUserOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectMemberUsersProjectMemberUser) string { return v.ProjectId }).(pulumi.StringOutput)
}

func (o GetProjectMemberUsersProjectMemberUserOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectMemberUsersProjectMemberUser) string { return v.Role }).(pulumi.StringOutput)
}

func (o GetProjectMemberUsersProjectMemberUserOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectMemberUsersProjectMemberUser) string { return v.UserName }).(pulumi.StringOutput)
}

type GetProjectMemberUsersProjectMemberUserArrayOutput struct{ *pulumi.OutputState }

func (GetProjectMemberUsersProjectMemberUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectMemberUsersProjectMemberUser)(nil)).Elem()
}

func (o GetProjectMemberUsersProjectMemberUserArrayOutput) ToGetProjectMemberUsersProjectMemberUserArrayOutput() GetProjectMemberUsersProjectMemberUserArrayOutput {
	return o
}

func (o GetProjectMemberUsersProjectMemberUserArrayOutput) ToGetProjectMemberUsersProjectMemberUserArrayOutputWithContext(ctx context.Context) GetProjectMemberUsersProjectMemberUserArrayOutput {
	return o
}

func (o GetProjectMemberUsersProjectMemberUserArrayOutput) Index(i pulumi.IntInput) GetProjectMemberUsersProjectMemberUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectMemberUsersProjectMemberUser {
		return vs[0].([]GetProjectMemberUsersProjectMemberUser)[vs[1].(int)]
	}).(GetProjectMemberUsersProjectMemberUserOutput)
}

type GetProjectsProject struct {
	Name                  string `pulumi:"name"`
	ProjectId             int    `pulumi:"projectId"`
	Public                bool   `pulumi:"public"`
	Type                  string `pulumi:"type"`
	VulnerabilityScanning bool   `pulumi:"vulnerabilityScanning"`
}

// GetProjectsProjectInput is an input type that accepts GetProjectsProjectArgs and GetProjectsProjectOutput values.
// You can construct a concrete instance of `GetProjectsProjectInput` via:
//
//	GetProjectsProjectArgs{...}
type GetProjectsProjectInput interface {
	pulumi.Input

	ToGetProjectsProjectOutput() GetProjectsProjectOutput
	ToGetProjectsProjectOutputWithContext(context.Context) GetProjectsProjectOutput
}

type GetProjectsProjectArgs struct {
	Name                  pulumi.StringInput `pulumi:"name"`
	ProjectId             pulumi.IntInput    `pulumi:"projectId"`
	Public                pulumi.BoolInput   `pulumi:"public"`
	Type                  pulumi.StringInput `pulumi:"type"`
	VulnerabilityScanning pulumi.BoolInput   `pulumi:"vulnerabilityScanning"`
}

func (GetProjectsProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectsProject)(nil)).Elem()
}

func (i GetProjectsProjectArgs) ToGetProjectsProjectOutput() GetProjectsProjectOutput {
	return i.ToGetProjectsProjectOutputWithContext(context.Background())
}

func (i GetProjectsProjectArgs) ToGetProjectsProjectOutputWithContext(ctx context.Context) GetProjectsProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectsProjectOutput)
}

// GetProjectsProjectArrayInput is an input type that accepts GetProjectsProjectArray and GetProjectsProjectArrayOutput values.
// You can construct a concrete instance of `GetProjectsProjectArrayInput` via:
//
//	GetProjectsProjectArray{ GetProjectsProjectArgs{...} }
type GetProjectsProjectArrayInput interface {
	pulumi.Input

	ToGetProjectsProjectArrayOutput() GetProjectsProjectArrayOutput
	ToGetProjectsProjectArrayOutputWithContext(context.Context) GetProjectsProjectArrayOutput
}

type GetProjectsProjectArray []GetProjectsProjectInput

func (GetProjectsProjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectsProject)(nil)).Elem()
}

func (i GetProjectsProjectArray) ToGetProjectsProjectArrayOutput() GetProjectsProjectArrayOutput {
	return i.ToGetProjectsProjectArrayOutputWithContext(context.Background())
}

func (i GetProjectsProjectArray) ToGetProjectsProjectArrayOutputWithContext(ctx context.Context) GetProjectsProjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectsProjectArrayOutput)
}

type GetProjectsProjectOutput struct{ *pulumi.OutputState }

func (GetProjectsProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectsProject)(nil)).Elem()
}

func (o GetProjectsProjectOutput) ToGetProjectsProjectOutput() GetProjectsProjectOutput {
	return o
}

func (o GetProjectsProjectOutput) ToGetProjectsProjectOutputWithContext(ctx context.Context) GetProjectsProjectOutput {
	return o
}

func (o GetProjectsProjectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectsProject) int { return v.ProjectId }).(pulumi.IntOutput)
}

func (o GetProjectsProjectOutput) Public() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.Public }).(pulumi.BoolOutput)
}

func (o GetProjectsProjectOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.Type }).(pulumi.StringOutput)
}

func (o GetProjectsProjectOutput) VulnerabilityScanning() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.VulnerabilityScanning }).(pulumi.BoolOutput)
}

type GetProjectsProjectArrayOutput struct{ *pulumi.OutputState }

func (GetProjectsProjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectsProject)(nil)).Elem()
}

func (o GetProjectsProjectArrayOutput) ToGetProjectsProjectArrayOutput() GetProjectsProjectArrayOutput {
	return o
}

func (o GetProjectsProjectArrayOutput) ToGetProjectsProjectArrayOutputWithContext(ctx context.Context) GetProjectsProjectArrayOutput {
	return o
}

func (o GetProjectsProjectArrayOutput) Index(i pulumi.IntInput) GetProjectsProjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectsProject {
		return vs[0].([]GetProjectsProject)[vs[1].(int)]
	}).(GetProjectsProjectOutput)
}

type GetRobotAccountsRobotAccount struct {
	Description string `pulumi:"description"`
	Disable     bool   `pulumi:"disable"`
	Duration    int    `pulumi:"duration"`
	// The ID of this resource.
	Id string `pulumi:"id"`
	// Level of the robot account, currently either `system` or `project`. Default is `system`.
	Level string `pulumi:"level"`
	// The name of the robot account to filter by.
	Name string `pulumi:"name"`
}

// GetRobotAccountsRobotAccountInput is an input type that accepts GetRobotAccountsRobotAccountArgs and GetRobotAccountsRobotAccountOutput values.
// You can construct a concrete instance of `GetRobotAccountsRobotAccountInput` via:
//
//	GetRobotAccountsRobotAccountArgs{...}
type GetRobotAccountsRobotAccountInput interface {
	pulumi.Input

	ToGetRobotAccountsRobotAccountOutput() GetRobotAccountsRobotAccountOutput
	ToGetRobotAccountsRobotAccountOutputWithContext(context.Context) GetRobotAccountsRobotAccountOutput
}

type GetRobotAccountsRobotAccountArgs struct {
	Description pulumi.StringInput `pulumi:"description"`
	Disable     pulumi.BoolInput   `pulumi:"disable"`
	Duration    pulumi.IntInput    `pulumi:"duration"`
	// The ID of this resource.
	Id pulumi.StringInput `pulumi:"id"`
	// Level of the robot account, currently either `system` or `project`. Default is `system`.
	Level pulumi.StringInput `pulumi:"level"`
	// The name of the robot account to filter by.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetRobotAccountsRobotAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRobotAccountsRobotAccount)(nil)).Elem()
}

func (i GetRobotAccountsRobotAccountArgs) ToGetRobotAccountsRobotAccountOutput() GetRobotAccountsRobotAccountOutput {
	return i.ToGetRobotAccountsRobotAccountOutputWithContext(context.Background())
}

func (i GetRobotAccountsRobotAccountArgs) ToGetRobotAccountsRobotAccountOutputWithContext(ctx context.Context) GetRobotAccountsRobotAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRobotAccountsRobotAccountOutput)
}

// GetRobotAccountsRobotAccountArrayInput is an input type that accepts GetRobotAccountsRobotAccountArray and GetRobotAccountsRobotAccountArrayOutput values.
// You can construct a concrete instance of `GetRobotAccountsRobotAccountArrayInput` via:
//
//	GetRobotAccountsRobotAccountArray{ GetRobotAccountsRobotAccountArgs{...} }
type GetRobotAccountsRobotAccountArrayInput interface {
	pulumi.Input

	ToGetRobotAccountsRobotAccountArrayOutput() GetRobotAccountsRobotAccountArrayOutput
	ToGetRobotAccountsRobotAccountArrayOutputWithContext(context.Context) GetRobotAccountsRobotAccountArrayOutput
}

type GetRobotAccountsRobotAccountArray []GetRobotAccountsRobotAccountInput

func (GetRobotAccountsRobotAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRobotAccountsRobotAccount)(nil)).Elem()
}

func (i GetRobotAccountsRobotAccountArray) ToGetRobotAccountsRobotAccountArrayOutput() GetRobotAccountsRobotAccountArrayOutput {
	return i.ToGetRobotAccountsRobotAccountArrayOutputWithContext(context.Background())
}

func (i GetRobotAccountsRobotAccountArray) ToGetRobotAccountsRobotAccountArrayOutputWithContext(ctx context.Context) GetRobotAccountsRobotAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRobotAccountsRobotAccountArrayOutput)
}

type GetRobotAccountsRobotAccountOutput struct{ *pulumi.OutputState }

func (GetRobotAccountsRobotAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRobotAccountsRobotAccount)(nil)).Elem()
}

func (o GetRobotAccountsRobotAccountOutput) ToGetRobotAccountsRobotAccountOutput() GetRobotAccountsRobotAccountOutput {
	return o
}

func (o GetRobotAccountsRobotAccountOutput) ToGetRobotAccountsRobotAccountOutputWithContext(ctx context.Context) GetRobotAccountsRobotAccountOutput {
	return o
}

func (o GetRobotAccountsRobotAccountOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetRobotAccountsRobotAccount) string { return v.Description }).(pulumi.StringOutput)
}

func (o GetRobotAccountsRobotAccountOutput) Disable() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRobotAccountsRobotAccount) bool { return v.Disable }).(pulumi.BoolOutput)
}

func (o GetRobotAccountsRobotAccountOutput) Duration() pulumi.IntOutput {
	return o.ApplyT(func(v GetRobotAccountsRobotAccount) int { return v.Duration }).(pulumi.IntOutput)
}

// The ID of this resource.
func (o GetRobotAccountsRobotAccountOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetRobotAccountsRobotAccount) string { return v.Id }).(pulumi.StringOutput)
}

// Level of the robot account, currently either `system` or `project`. Default is `system`.
func (o GetRobotAccountsRobotAccountOutput) Level() pulumi.StringOutput {
	return o.ApplyT(func(v GetRobotAccountsRobotAccount) string { return v.Level }).(pulumi.StringOutput)
}

// The name of the robot account to filter by.
func (o GetRobotAccountsRobotAccountOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetRobotAccountsRobotAccount) string { return v.Name }).(pulumi.StringOutput)
}

type GetRobotAccountsRobotAccountArrayOutput struct{ *pulumi.OutputState }

func (GetRobotAccountsRobotAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRobotAccountsRobotAccount)(nil)).Elem()
}

func (o GetRobotAccountsRobotAccountArrayOutput) ToGetRobotAccountsRobotAccountArrayOutput() GetRobotAccountsRobotAccountArrayOutput {
	return o
}

func (o GetRobotAccountsRobotAccountArrayOutput) ToGetRobotAccountsRobotAccountArrayOutputWithContext(ctx context.Context) GetRobotAccountsRobotAccountArrayOutput {
	return o
}

func (o GetRobotAccountsRobotAccountArrayOutput) Index(i pulumi.IntInput) GetRobotAccountsRobotAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRobotAccountsRobotAccount {
		return vs[0].([]GetRobotAccountsRobotAccount)[vs[1].(int)]
	}).(GetRobotAccountsRobotAccountOutput)
}

type GetUsersUser struct {
	Admin   bool   `pulumi:"admin"`
	Comment string `pulumi:"comment"`
	// The email of the user to filter by.
	Email    string `pulumi:"email"`
	FullName string `pulumi:"fullName"`
	// The ID of this resource.
	Id string `pulumi:"id"`
	// The name of the user to filter by.
	Username string `pulumi:"username"`
}

// GetUsersUserInput is an input type that accepts GetUsersUserArgs and GetUsersUserOutput values.
// You can construct a concrete instance of `GetUsersUserInput` via:
//
//	GetUsersUserArgs{...}
type GetUsersUserInput interface {
	pulumi.Input

	ToGetUsersUserOutput() GetUsersUserOutput
	ToGetUsersUserOutputWithContext(context.Context) GetUsersUserOutput
}

type GetUsersUserArgs struct {
	Admin   pulumi.BoolInput   `pulumi:"admin"`
	Comment pulumi.StringInput `pulumi:"comment"`
	// The email of the user to filter by.
	Email    pulumi.StringInput `pulumi:"email"`
	FullName pulumi.StringInput `pulumi:"fullName"`
	// The ID of this resource.
	Id pulumi.StringInput `pulumi:"id"`
	// The name of the user to filter by.
	Username pulumi.StringInput `pulumi:"username"`
}

func (GetUsersUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUser)(nil)).Elem()
}

func (i GetUsersUserArgs) ToGetUsersUserOutput() GetUsersUserOutput {
	return i.ToGetUsersUserOutputWithContext(context.Background())
}

func (i GetUsersUserArgs) ToGetUsersUserOutputWithContext(ctx context.Context) GetUsersUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserOutput)
}

// GetUsersUserArrayInput is an input type that accepts GetUsersUserArray and GetUsersUserArrayOutput values.
// You can construct a concrete instance of `GetUsersUserArrayInput` via:
//
//	GetUsersUserArray{ GetUsersUserArgs{...} }
type GetUsersUserArrayInput interface {
	pulumi.Input

	ToGetUsersUserArrayOutput() GetUsersUserArrayOutput
	ToGetUsersUserArrayOutputWithContext(context.Context) GetUsersUserArrayOutput
}

type GetUsersUserArray []GetUsersUserInput

func (GetUsersUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUser)(nil)).Elem()
}

func (i GetUsersUserArray) ToGetUsersUserArrayOutput() GetUsersUserArrayOutput {
	return i.ToGetUsersUserArrayOutputWithContext(context.Background())
}

func (i GetUsersUserArray) ToGetUsersUserArrayOutputWithContext(ctx context.Context) GetUsersUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserArrayOutput)
}

type GetUsersUserOutput struct{ *pulumi.OutputState }

func (GetUsersUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUser)(nil)).Elem()
}

func (o GetUsersUserOutput) ToGetUsersUserOutput() GetUsersUserOutput {
	return o
}

func (o GetUsersUserOutput) ToGetUsersUserOutputWithContext(ctx context.Context) GetUsersUserOutput {
	return o
}

func (o GetUsersUserOutput) Admin() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUsersUser) bool { return v.Admin }).(pulumi.BoolOutput)
}

func (o GetUsersUserOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Comment }).(pulumi.StringOutput)
}

// The email of the user to filter by.
func (o GetUsersUserOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Email }).(pulumi.StringOutput)
}

func (o GetUsersUserOutput) FullName() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.FullName }).(pulumi.StringOutput)
}

// The ID of this resource.
func (o GetUsersUserOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the user to filter by.
func (o GetUsersUserOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Username }).(pulumi.StringOutput)
}

type GetUsersUserArrayOutput struct{ *pulumi.OutputState }

func (GetUsersUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUser)(nil)).Elem()
}

func (o GetUsersUserArrayOutput) ToGetUsersUserArrayOutput() GetUsersUserArrayOutput {
	return o
}

func (o GetUsersUserArrayOutput) ToGetUsersUserArrayOutputWithContext(ctx context.Context) GetUsersUserArrayOutput {
	return o
}

func (o GetUsersUserArrayOutput) Index(i pulumi.IntInput) GetUsersUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUsersUser {
		return vs[0].([]GetUsersUser)[vs[1].(int)]
	}).(GetUsersUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigSystemBannerMessageInput)(nil)).Elem(), ConfigSystemBannerMessageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigSystemBannerMessagePtrInput)(nil)).Elem(), ConfigSystemBannerMessageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicationFilterInput)(nil)).Elem(), ReplicationFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicationFilterArrayInput)(nil)).Elem(), ReplicationFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RetentionPolicyRuleInput)(nil)).Elem(), RetentionPolicyRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RetentionPolicyRuleArrayInput)(nil)).Elem(), RetentionPolicyRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RobotAccountPermissionInput)(nil)).Elem(), RobotAccountPermissionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RobotAccountPermissionArrayInput)(nil)).Elem(), RobotAccountPermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RobotAccountPermissionAccessInput)(nil)).Elem(), RobotAccountPermissionAccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RobotAccountPermissionAccessArrayInput)(nil)).Elem(), RobotAccountPermissionAccessArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupsGroupInput)(nil)).Elem(), GetGroupsGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupsGroupArrayInput)(nil)).Elem(), GetGroupsGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectMemberGroupsProjectMemberGroupInput)(nil)).Elem(), GetProjectMemberGroupsProjectMemberGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectMemberGroupsProjectMemberGroupArrayInput)(nil)).Elem(), GetProjectMemberGroupsProjectMemberGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectMemberUsersProjectMemberUserInput)(nil)).Elem(), GetProjectMemberUsersProjectMemberUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectMemberUsersProjectMemberUserArrayInput)(nil)).Elem(), GetProjectMemberUsersProjectMemberUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectsProjectInput)(nil)).Elem(), GetProjectsProjectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectsProjectArrayInput)(nil)).Elem(), GetProjectsProjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRobotAccountsRobotAccountInput)(nil)).Elem(), GetRobotAccountsRobotAccountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRobotAccountsRobotAccountArrayInput)(nil)).Elem(), GetRobotAccountsRobotAccountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserInput)(nil)).Elem(), GetUsersUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserArrayInput)(nil)).Elem(), GetUsersUserArray{})
	pulumi.RegisterOutputType(ConfigSystemBannerMessageOutput{})
	pulumi.RegisterOutputType(ConfigSystemBannerMessagePtrOutput{})
	pulumi.RegisterOutputType(ReplicationFilterOutput{})
	pulumi.RegisterOutputType(ReplicationFilterArrayOutput{})
	pulumi.RegisterOutputType(RetentionPolicyRuleOutput{})
	pulumi.RegisterOutputType(RetentionPolicyRuleArrayOutput{})
	pulumi.RegisterOutputType(RobotAccountPermissionOutput{})
	pulumi.RegisterOutputType(RobotAccountPermissionArrayOutput{})
	pulumi.RegisterOutputType(RobotAccountPermissionAccessOutput{})
	pulumi.RegisterOutputType(RobotAccountPermissionAccessArrayOutput{})
	pulumi.RegisterOutputType(GetGroupsGroupOutput{})
	pulumi.RegisterOutputType(GetGroupsGroupArrayOutput{})
	pulumi.RegisterOutputType(GetProjectMemberGroupsProjectMemberGroupOutput{})
	pulumi.RegisterOutputType(GetProjectMemberGroupsProjectMemberGroupArrayOutput{})
	pulumi.RegisterOutputType(GetProjectMemberUsersProjectMemberUserOutput{})
	pulumi.RegisterOutputType(GetProjectMemberUsersProjectMemberUserArrayOutput{})
	pulumi.RegisterOutputType(GetProjectsProjectOutput{})
	pulumi.RegisterOutputType(GetProjectsProjectArrayOutput{})
	pulumi.RegisterOutputType(GetRobotAccountsRobotAccountOutput{})
	pulumi.RegisterOutputType(GetRobotAccountsRobotAccountArrayOutput{})
	pulumi.RegisterOutputType(GetUsersUserOutput{})
	pulumi.RegisterOutputType(GetUsersUserArrayOutput{})
}
