// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package harbor

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-harbor/sdk/v3/go/harbor/internal"
)

// ## Example Usage
//
// ### Basic Usage
//
// ### Usage with Authentication
//
// ## Import
//
// The `harbor_preheat_instance` resource can be imported using the preheat instance ID.
//
// ```sh
// $ pulumi import harbor:index/preheatInstance:PreheatInstance example /p2p/preheat/instances/example-preheat-instance
// ```
type PreheatInstance struct {
	pulumi.CustomResourceState

	// The authentication mode for the preheat instance. Must be either "NONE", "BASIC", or "OAUTH". Defaults to "NONE".
	AuthMode pulumi.StringPtrOutput `pulumi:"authMode"`
	// Whether the preheat instance is the default instance. Defaults to false.
	Default pulumi.BoolPtrOutput `pulumi:"default"`
	// The description of the preheat instance. Defaults to an empty string.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Whether the preheat instance is enabled. Defaults to true.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// The endpoint of the preheat instance.
	Endpoint pulumi.StringOutput `pulumi:"endpoint"`
	// Whether to allow insecure connections to the preheat instance. Defaults to false.
	Insecure pulumi.BoolPtrOutput `pulumi:"insecure"`
	// The name of the preheat instance.
	Name pulumi.StringOutput `pulumi:"name"`
	// The password for the preheat instance. Required if `authMode` is "BASIC". Defaults to an empty string.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// The token for the preheat instance. Required if `authMode` is "OAUTH". Defaults to an empty string.
	Token pulumi.StringPtrOutput `pulumi:"token"`
	// The username for the preheat instance. Required if `authMode` is "BASIC". Defaults to an empty string.
	Username pulumi.StringPtrOutput `pulumi:"username"`
	// The vendor of the preheat instance. Must be either "dragonfly" or "kraken".
	Vendor pulumi.StringOutput `pulumi:"vendor"`
}

// NewPreheatInstance registers a new resource with the given unique name, arguments, and options.
func NewPreheatInstance(ctx *pulumi.Context,
	name string, args *PreheatInstanceArgs, opts ...pulumi.ResourceOption) (*PreheatInstance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Endpoint == nil {
		return nil, errors.New("invalid value for required argument 'Endpoint'")
	}
	if args.Vendor == nil {
		return nil, errors.New("invalid value for required argument 'Vendor'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	if args.Token != nil {
		args.Token = pulumi.ToSecret(args.Token).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
		"token",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PreheatInstance
	err := ctx.RegisterResource("harbor:index/preheatInstance:PreheatInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPreheatInstance gets an existing PreheatInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPreheatInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PreheatInstanceState, opts ...pulumi.ResourceOption) (*PreheatInstance, error) {
	var resource PreheatInstance
	err := ctx.ReadResource("harbor:index/preheatInstance:PreheatInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PreheatInstance resources.
type preheatInstanceState struct {
	// The authentication mode for the preheat instance. Must be either "NONE", "BASIC", or "OAUTH". Defaults to "NONE".
	AuthMode *string `pulumi:"authMode"`
	// Whether the preheat instance is the default instance. Defaults to false.
	Default *bool `pulumi:"default"`
	// The description of the preheat instance. Defaults to an empty string.
	Description *string `pulumi:"description"`
	// Whether the preheat instance is enabled. Defaults to true.
	Enabled *bool `pulumi:"enabled"`
	// The endpoint of the preheat instance.
	Endpoint *string `pulumi:"endpoint"`
	// Whether to allow insecure connections to the preheat instance. Defaults to false.
	Insecure *bool `pulumi:"insecure"`
	// The name of the preheat instance.
	Name *string `pulumi:"name"`
	// The password for the preheat instance. Required if `authMode` is "BASIC". Defaults to an empty string.
	Password *string `pulumi:"password"`
	// The token for the preheat instance. Required if `authMode` is "OAUTH". Defaults to an empty string.
	Token *string `pulumi:"token"`
	// The username for the preheat instance. Required if `authMode` is "BASIC". Defaults to an empty string.
	Username *string `pulumi:"username"`
	// The vendor of the preheat instance. Must be either "dragonfly" or "kraken".
	Vendor *string `pulumi:"vendor"`
}

type PreheatInstanceState struct {
	// The authentication mode for the preheat instance. Must be either "NONE", "BASIC", or "OAUTH". Defaults to "NONE".
	AuthMode pulumi.StringPtrInput
	// Whether the preheat instance is the default instance. Defaults to false.
	Default pulumi.BoolPtrInput
	// The description of the preheat instance. Defaults to an empty string.
	Description pulumi.StringPtrInput
	// Whether the preheat instance is enabled. Defaults to true.
	Enabled pulumi.BoolPtrInput
	// The endpoint of the preheat instance.
	Endpoint pulumi.StringPtrInput
	// Whether to allow insecure connections to the preheat instance. Defaults to false.
	Insecure pulumi.BoolPtrInput
	// The name of the preheat instance.
	Name pulumi.StringPtrInput
	// The password for the preheat instance. Required if `authMode` is "BASIC". Defaults to an empty string.
	Password pulumi.StringPtrInput
	// The token for the preheat instance. Required if `authMode` is "OAUTH". Defaults to an empty string.
	Token pulumi.StringPtrInput
	// The username for the preheat instance. Required if `authMode` is "BASIC". Defaults to an empty string.
	Username pulumi.StringPtrInput
	// The vendor of the preheat instance. Must be either "dragonfly" or "kraken".
	Vendor pulumi.StringPtrInput
}

func (PreheatInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*preheatInstanceState)(nil)).Elem()
}

type preheatInstanceArgs struct {
	// The authentication mode for the preheat instance. Must be either "NONE", "BASIC", or "OAUTH". Defaults to "NONE".
	AuthMode *string `pulumi:"authMode"`
	// Whether the preheat instance is the default instance. Defaults to false.
	Default *bool `pulumi:"default"`
	// The description of the preheat instance. Defaults to an empty string.
	Description *string `pulumi:"description"`
	// Whether the preheat instance is enabled. Defaults to true.
	Enabled *bool `pulumi:"enabled"`
	// The endpoint of the preheat instance.
	Endpoint string `pulumi:"endpoint"`
	// Whether to allow insecure connections to the preheat instance. Defaults to false.
	Insecure *bool `pulumi:"insecure"`
	// The name of the preheat instance.
	Name *string `pulumi:"name"`
	// The password for the preheat instance. Required if `authMode` is "BASIC". Defaults to an empty string.
	Password *string `pulumi:"password"`
	// The token for the preheat instance. Required if `authMode` is "OAUTH". Defaults to an empty string.
	Token *string `pulumi:"token"`
	// The username for the preheat instance. Required if `authMode` is "BASIC". Defaults to an empty string.
	Username *string `pulumi:"username"`
	// The vendor of the preheat instance. Must be either "dragonfly" or "kraken".
	Vendor string `pulumi:"vendor"`
}

// The set of arguments for constructing a PreheatInstance resource.
type PreheatInstanceArgs struct {
	// The authentication mode for the preheat instance. Must be either "NONE", "BASIC", or "OAUTH". Defaults to "NONE".
	AuthMode pulumi.StringPtrInput
	// Whether the preheat instance is the default instance. Defaults to false.
	Default pulumi.BoolPtrInput
	// The description of the preheat instance. Defaults to an empty string.
	Description pulumi.StringPtrInput
	// Whether the preheat instance is enabled. Defaults to true.
	Enabled pulumi.BoolPtrInput
	// The endpoint of the preheat instance.
	Endpoint pulumi.StringInput
	// Whether to allow insecure connections to the preheat instance. Defaults to false.
	Insecure pulumi.BoolPtrInput
	// The name of the preheat instance.
	Name pulumi.StringPtrInput
	// The password for the preheat instance. Required if `authMode` is "BASIC". Defaults to an empty string.
	Password pulumi.StringPtrInput
	// The token for the preheat instance. Required if `authMode` is "OAUTH". Defaults to an empty string.
	Token pulumi.StringPtrInput
	// The username for the preheat instance. Required if `authMode` is "BASIC". Defaults to an empty string.
	Username pulumi.StringPtrInput
	// The vendor of the preheat instance. Must be either "dragonfly" or "kraken".
	Vendor pulumi.StringInput
}

func (PreheatInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*preheatInstanceArgs)(nil)).Elem()
}

type PreheatInstanceInput interface {
	pulumi.Input

	ToPreheatInstanceOutput() PreheatInstanceOutput
	ToPreheatInstanceOutputWithContext(ctx context.Context) PreheatInstanceOutput
}

func (*PreheatInstance) ElementType() reflect.Type {
	return reflect.TypeOf((**PreheatInstance)(nil)).Elem()
}

func (i *PreheatInstance) ToPreheatInstanceOutput() PreheatInstanceOutput {
	return i.ToPreheatInstanceOutputWithContext(context.Background())
}

func (i *PreheatInstance) ToPreheatInstanceOutputWithContext(ctx context.Context) PreheatInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreheatInstanceOutput)
}

// PreheatInstanceArrayInput is an input type that accepts PreheatInstanceArray and PreheatInstanceArrayOutput values.
// You can construct a concrete instance of `PreheatInstanceArrayInput` via:
//
//	PreheatInstanceArray{ PreheatInstanceArgs{...} }
type PreheatInstanceArrayInput interface {
	pulumi.Input

	ToPreheatInstanceArrayOutput() PreheatInstanceArrayOutput
	ToPreheatInstanceArrayOutputWithContext(context.Context) PreheatInstanceArrayOutput
}

type PreheatInstanceArray []PreheatInstanceInput

func (PreheatInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PreheatInstance)(nil)).Elem()
}

func (i PreheatInstanceArray) ToPreheatInstanceArrayOutput() PreheatInstanceArrayOutput {
	return i.ToPreheatInstanceArrayOutputWithContext(context.Background())
}

func (i PreheatInstanceArray) ToPreheatInstanceArrayOutputWithContext(ctx context.Context) PreheatInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreheatInstanceArrayOutput)
}

// PreheatInstanceMapInput is an input type that accepts PreheatInstanceMap and PreheatInstanceMapOutput values.
// You can construct a concrete instance of `PreheatInstanceMapInput` via:
//
//	PreheatInstanceMap{ "key": PreheatInstanceArgs{...} }
type PreheatInstanceMapInput interface {
	pulumi.Input

	ToPreheatInstanceMapOutput() PreheatInstanceMapOutput
	ToPreheatInstanceMapOutputWithContext(context.Context) PreheatInstanceMapOutput
}

type PreheatInstanceMap map[string]PreheatInstanceInput

func (PreheatInstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PreheatInstance)(nil)).Elem()
}

func (i PreheatInstanceMap) ToPreheatInstanceMapOutput() PreheatInstanceMapOutput {
	return i.ToPreheatInstanceMapOutputWithContext(context.Background())
}

func (i PreheatInstanceMap) ToPreheatInstanceMapOutputWithContext(ctx context.Context) PreheatInstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreheatInstanceMapOutput)
}

type PreheatInstanceOutput struct{ *pulumi.OutputState }

func (PreheatInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PreheatInstance)(nil)).Elem()
}

func (o PreheatInstanceOutput) ToPreheatInstanceOutput() PreheatInstanceOutput {
	return o
}

func (o PreheatInstanceOutput) ToPreheatInstanceOutputWithContext(ctx context.Context) PreheatInstanceOutput {
	return o
}

// The authentication mode for the preheat instance. Must be either "NONE", "BASIC", or "OAUTH". Defaults to "NONE".
func (o PreheatInstanceOutput) AuthMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PreheatInstance) pulumi.StringPtrOutput { return v.AuthMode }).(pulumi.StringPtrOutput)
}

// Whether the preheat instance is the default instance. Defaults to false.
func (o PreheatInstanceOutput) Default() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PreheatInstance) pulumi.BoolPtrOutput { return v.Default }).(pulumi.BoolPtrOutput)
}

// The description of the preheat instance. Defaults to an empty string.
func (o PreheatInstanceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PreheatInstance) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether the preheat instance is enabled. Defaults to true.
func (o PreheatInstanceOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PreheatInstance) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The endpoint of the preheat instance.
func (o PreheatInstanceOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *PreheatInstance) pulumi.StringOutput { return v.Endpoint }).(pulumi.StringOutput)
}

// Whether to allow insecure connections to the preheat instance. Defaults to false.
func (o PreheatInstanceOutput) Insecure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PreheatInstance) pulumi.BoolPtrOutput { return v.Insecure }).(pulumi.BoolPtrOutput)
}

// The name of the preheat instance.
func (o PreheatInstanceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PreheatInstance) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The password for the preheat instance. Required if `authMode` is "BASIC". Defaults to an empty string.
func (o PreheatInstanceOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PreheatInstance) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// The token for the preheat instance. Required if `authMode` is "OAUTH". Defaults to an empty string.
func (o PreheatInstanceOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PreheatInstance) pulumi.StringPtrOutput { return v.Token }).(pulumi.StringPtrOutput)
}

// The username for the preheat instance. Required if `authMode` is "BASIC". Defaults to an empty string.
func (o PreheatInstanceOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PreheatInstance) pulumi.StringPtrOutput { return v.Username }).(pulumi.StringPtrOutput)
}

// The vendor of the preheat instance. Must be either "dragonfly" or "kraken".
func (o PreheatInstanceOutput) Vendor() pulumi.StringOutput {
	return o.ApplyT(func(v *PreheatInstance) pulumi.StringOutput { return v.Vendor }).(pulumi.StringOutput)
}

type PreheatInstanceArrayOutput struct{ *pulumi.OutputState }

func (PreheatInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PreheatInstance)(nil)).Elem()
}

func (o PreheatInstanceArrayOutput) ToPreheatInstanceArrayOutput() PreheatInstanceArrayOutput {
	return o
}

func (o PreheatInstanceArrayOutput) ToPreheatInstanceArrayOutputWithContext(ctx context.Context) PreheatInstanceArrayOutput {
	return o
}

func (o PreheatInstanceArrayOutput) Index(i pulumi.IntInput) PreheatInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PreheatInstance {
		return vs[0].([]*PreheatInstance)[vs[1].(int)]
	}).(PreheatInstanceOutput)
}

type PreheatInstanceMapOutput struct{ *pulumi.OutputState }

func (PreheatInstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PreheatInstance)(nil)).Elem()
}

func (o PreheatInstanceMapOutput) ToPreheatInstanceMapOutput() PreheatInstanceMapOutput {
	return o
}

func (o PreheatInstanceMapOutput) ToPreheatInstanceMapOutputWithContext(ctx context.Context) PreheatInstanceMapOutput {
	return o
}

func (o PreheatInstanceMapOutput) MapIndex(k pulumi.StringInput) PreheatInstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PreheatInstance {
		return vs[0].(map[string]*PreheatInstance)[vs[1].(string)]
	}).(PreheatInstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PreheatInstanceInput)(nil)).Elem(), &PreheatInstance{})
	pulumi.RegisterInputType(reflect.TypeOf((*PreheatInstanceArrayInput)(nil)).Elem(), PreheatInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PreheatInstanceMapInput)(nil)).Elem(), PreheatInstanceMap{})
	pulumi.RegisterOutputType(PreheatInstanceOutput{})
	pulumi.RegisterOutputType(PreheatInstanceArrayOutput{})
	pulumi.RegisterOutputType(PreheatInstanceMapOutput{})
}
