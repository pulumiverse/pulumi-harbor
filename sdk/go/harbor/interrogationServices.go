// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package harbor

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-harbor/sdk/v3/go/harbor"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := harbor.NewInterrogationServices(ctx, "main", &harbor.InterrogationServicesArgs{
//				VulnerabilityScanPolicy: pulumi.String("Daily"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type InterrogationServices struct {
	pulumi.CustomResourceState

	// Sets the default interrogation service **Clair**
	DefaultScanner pulumi.StringPtrOutput `pulumi:"defaultScanner"`
	// The frequency of the vulnerability scanning is done. This can be `Daily`, `Weekly`, `Monthly` or can be a custom cron string.
	VulnerabilityScanPolicy pulumi.StringOutput `pulumi:"vulnerabilityScanPolicy"`
}

// NewInterrogationServices registers a new resource with the given unique name, arguments, and options.
func NewInterrogationServices(ctx *pulumi.Context,
	name string, args *InterrogationServicesArgs, opts ...pulumi.ResourceOption) (*InterrogationServices, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.VulnerabilityScanPolicy == nil {
		return nil, errors.New("invalid value for required argument 'VulnerabilityScanPolicy'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource InterrogationServices
	err := ctx.RegisterResource("harbor:index/interrogationServices:InterrogationServices", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInterrogationServices gets an existing InterrogationServices resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInterrogationServices(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InterrogationServicesState, opts ...pulumi.ResourceOption) (*InterrogationServices, error) {
	var resource InterrogationServices
	err := ctx.ReadResource("harbor:index/interrogationServices:InterrogationServices", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InterrogationServices resources.
type interrogationServicesState struct {
	// Sets the default interrogation service **Clair**
	DefaultScanner *string `pulumi:"defaultScanner"`
	// The frequency of the vulnerability scanning is done. This can be `Daily`, `Weekly`, `Monthly` or can be a custom cron string.
	VulnerabilityScanPolicy *string `pulumi:"vulnerabilityScanPolicy"`
}

type InterrogationServicesState struct {
	// Sets the default interrogation service **Clair**
	DefaultScanner pulumi.StringPtrInput
	// The frequency of the vulnerability scanning is done. This can be `Daily`, `Weekly`, `Monthly` or can be a custom cron string.
	VulnerabilityScanPolicy pulumi.StringPtrInput
}

func (InterrogationServicesState) ElementType() reflect.Type {
	return reflect.TypeOf((*interrogationServicesState)(nil)).Elem()
}

type interrogationServicesArgs struct {
	// Sets the default interrogation service **Clair**
	DefaultScanner *string `pulumi:"defaultScanner"`
	// The frequency of the vulnerability scanning is done. This can be `Daily`, `Weekly`, `Monthly` or can be a custom cron string.
	VulnerabilityScanPolicy string `pulumi:"vulnerabilityScanPolicy"`
}

// The set of arguments for constructing a InterrogationServices resource.
type InterrogationServicesArgs struct {
	// Sets the default interrogation service **Clair**
	DefaultScanner pulumi.StringPtrInput
	// The frequency of the vulnerability scanning is done. This can be `Daily`, `Weekly`, `Monthly` or can be a custom cron string.
	VulnerabilityScanPolicy pulumi.StringInput
}

func (InterrogationServicesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*interrogationServicesArgs)(nil)).Elem()
}

type InterrogationServicesInput interface {
	pulumi.Input

	ToInterrogationServicesOutput() InterrogationServicesOutput
	ToInterrogationServicesOutputWithContext(ctx context.Context) InterrogationServicesOutput
}

func (*InterrogationServices) ElementType() reflect.Type {
	return reflect.TypeOf((**InterrogationServices)(nil)).Elem()
}

func (i *InterrogationServices) ToInterrogationServicesOutput() InterrogationServicesOutput {
	return i.ToInterrogationServicesOutputWithContext(context.Background())
}

func (i *InterrogationServices) ToInterrogationServicesOutputWithContext(ctx context.Context) InterrogationServicesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterrogationServicesOutput)
}

// InterrogationServicesArrayInput is an input type that accepts InterrogationServicesArray and InterrogationServicesArrayOutput values.
// You can construct a concrete instance of `InterrogationServicesArrayInput` via:
//
//	InterrogationServicesArray{ InterrogationServicesArgs{...} }
type InterrogationServicesArrayInput interface {
	pulumi.Input

	ToInterrogationServicesArrayOutput() InterrogationServicesArrayOutput
	ToInterrogationServicesArrayOutputWithContext(context.Context) InterrogationServicesArrayOutput
}

type InterrogationServicesArray []InterrogationServicesInput

func (InterrogationServicesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InterrogationServices)(nil)).Elem()
}

func (i InterrogationServicesArray) ToInterrogationServicesArrayOutput() InterrogationServicesArrayOutput {
	return i.ToInterrogationServicesArrayOutputWithContext(context.Background())
}

func (i InterrogationServicesArray) ToInterrogationServicesArrayOutputWithContext(ctx context.Context) InterrogationServicesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterrogationServicesArrayOutput)
}

// InterrogationServicesMapInput is an input type that accepts InterrogationServicesMap and InterrogationServicesMapOutput values.
// You can construct a concrete instance of `InterrogationServicesMapInput` via:
//
//	InterrogationServicesMap{ "key": InterrogationServicesArgs{...} }
type InterrogationServicesMapInput interface {
	pulumi.Input

	ToInterrogationServicesMapOutput() InterrogationServicesMapOutput
	ToInterrogationServicesMapOutputWithContext(context.Context) InterrogationServicesMapOutput
}

type InterrogationServicesMap map[string]InterrogationServicesInput

func (InterrogationServicesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InterrogationServices)(nil)).Elem()
}

func (i InterrogationServicesMap) ToInterrogationServicesMapOutput() InterrogationServicesMapOutput {
	return i.ToInterrogationServicesMapOutputWithContext(context.Background())
}

func (i InterrogationServicesMap) ToInterrogationServicesMapOutputWithContext(ctx context.Context) InterrogationServicesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterrogationServicesMapOutput)
}

type InterrogationServicesOutput struct{ *pulumi.OutputState }

func (InterrogationServicesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InterrogationServices)(nil)).Elem()
}

func (o InterrogationServicesOutput) ToInterrogationServicesOutput() InterrogationServicesOutput {
	return o
}

func (o InterrogationServicesOutput) ToInterrogationServicesOutputWithContext(ctx context.Context) InterrogationServicesOutput {
	return o
}

// Sets the default interrogation service **Clair**
func (o InterrogationServicesOutput) DefaultScanner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterrogationServices) pulumi.StringPtrOutput { return v.DefaultScanner }).(pulumi.StringPtrOutput)
}

// The frequency of the vulnerability scanning is done. This can be `Daily`, `Weekly`, `Monthly` or can be a custom cron string.
func (o InterrogationServicesOutput) VulnerabilityScanPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v *InterrogationServices) pulumi.StringOutput { return v.VulnerabilityScanPolicy }).(pulumi.StringOutput)
}

type InterrogationServicesArrayOutput struct{ *pulumi.OutputState }

func (InterrogationServicesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InterrogationServices)(nil)).Elem()
}

func (o InterrogationServicesArrayOutput) ToInterrogationServicesArrayOutput() InterrogationServicesArrayOutput {
	return o
}

func (o InterrogationServicesArrayOutput) ToInterrogationServicesArrayOutputWithContext(ctx context.Context) InterrogationServicesArrayOutput {
	return o
}

func (o InterrogationServicesArrayOutput) Index(i pulumi.IntInput) InterrogationServicesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InterrogationServices {
		return vs[0].([]*InterrogationServices)[vs[1].(int)]
	}).(InterrogationServicesOutput)
}

type InterrogationServicesMapOutput struct{ *pulumi.OutputState }

func (InterrogationServicesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InterrogationServices)(nil)).Elem()
}

func (o InterrogationServicesMapOutput) ToInterrogationServicesMapOutput() InterrogationServicesMapOutput {
	return o
}

func (o InterrogationServicesMapOutput) ToInterrogationServicesMapOutputWithContext(ctx context.Context) InterrogationServicesMapOutput {
	return o
}

func (o InterrogationServicesMapOutput) MapIndex(k pulumi.StringInput) InterrogationServicesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InterrogationServices {
		return vs[0].(map[string]*InterrogationServices)[vs[1].(string)]
	}).(InterrogationServicesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InterrogationServicesInput)(nil)).Elem(), &InterrogationServices{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterrogationServicesArrayInput)(nil)).Elem(), InterrogationServicesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterrogationServicesMapInput)(nil)).Elem(), InterrogationServicesMap{})
	pulumi.RegisterOutputType(InterrogationServicesOutput{})
	pulumi.RegisterOutputType(InterrogationServicesArrayOutput{})
	pulumi.RegisterOutputType(InterrogationServicesMapOutput{})
}
