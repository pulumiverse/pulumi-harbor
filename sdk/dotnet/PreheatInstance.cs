// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Harbor
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ### Basic Usage
    /// 
    /// ### Usage with Authentication
    /// 
    /// ## Import
    /// 
    /// The `harbor_preheat_instance` resource can be imported using the preheat instance ID.
    /// 
    /// ```sh
    /// $ pulumi import harbor:index/preheatInstance:PreheatInstance example /p2p/preheat/instances/example-preheat-instance
    /// ```
    /// </summary>
    [HarborResourceType("harbor:index/preheatInstance:PreheatInstance")]
    public partial class PreheatInstance : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The authentication mode for the preheat instance. Must be either "NONE", "BASIC", or "OAUTH". Defaults to "NONE".
        /// </summary>
        [Output("authMode")]
        public Output<string?> AuthMode { get; private set; } = null!;

        /// <summary>
        /// Whether the preheat instance is the default instance. Defaults to false.
        /// </summary>
        [Output("default")]
        public Output<bool?> Default { get; private set; } = null!;

        /// <summary>
        /// The description of the preheat instance. Defaults to an empty string.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Whether the preheat instance is enabled. Defaults to true.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// The endpoint of the preheat instance.
        /// </summary>
        [Output("endpoint")]
        public Output<string> Endpoint { get; private set; } = null!;

        /// <summary>
        /// Whether to allow insecure connections to the preheat instance. Defaults to false.
        /// </summary>
        [Output("insecure")]
        public Output<bool?> Insecure { get; private set; } = null!;

        /// <summary>
        /// The name of the preheat instance.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The password for the preheat instance. Required if `auth_mode` is "BASIC". Defaults to an empty string.
        /// </summary>
        [Output("password")]
        public Output<string?> Password { get; private set; } = null!;

        /// <summary>
        /// The token for the preheat instance. Required if `auth_mode` is "OAUTH". Defaults to an empty string.
        /// </summary>
        [Output("token")]
        public Output<string?> Token { get; private set; } = null!;

        /// <summary>
        /// The username for the preheat instance. Required if `auth_mode` is "BASIC". Defaults to an empty string.
        /// </summary>
        [Output("username")]
        public Output<string?> Username { get; private set; } = null!;

        /// <summary>
        /// The vendor of the preheat instance. Must be either "dragonfly" or "kraken".
        /// </summary>
        [Output("vendor")]
        public Output<string> Vendor { get; private set; } = null!;


        /// <summary>
        /// Create a PreheatInstance resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PreheatInstance(string name, PreheatInstanceArgs args, CustomResourceOptions? options = null)
            : base("harbor:index/preheatInstance:PreheatInstance", name, args ?? new PreheatInstanceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PreheatInstance(string name, Input<string> id, PreheatInstanceState? state = null, CustomResourceOptions? options = null)
            : base("harbor:index/preheatInstance:PreheatInstance", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-harbor",
                AdditionalSecretOutputs =
                {
                    "password",
                    "token",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PreheatInstance resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PreheatInstance Get(string name, Input<string> id, PreheatInstanceState? state = null, CustomResourceOptions? options = null)
        {
            return new PreheatInstance(name, id, state, options);
        }
    }

    public sealed class PreheatInstanceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The authentication mode for the preheat instance. Must be either "NONE", "BASIC", or "OAUTH". Defaults to "NONE".
        /// </summary>
        [Input("authMode")]
        public Input<string>? AuthMode { get; set; }

        /// <summary>
        /// Whether the preheat instance is the default instance. Defaults to false.
        /// </summary>
        [Input("default")]
        public Input<bool>? Default { get; set; }

        /// <summary>
        /// The description of the preheat instance. Defaults to an empty string.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether the preheat instance is enabled. Defaults to true.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The endpoint of the preheat instance.
        /// </summary>
        [Input("endpoint", required: true)]
        public Input<string> Endpoint { get; set; } = null!;

        /// <summary>
        /// Whether to allow insecure connections to the preheat instance. Defaults to false.
        /// </summary>
        [Input("insecure")]
        public Input<bool>? Insecure { get; set; }

        /// <summary>
        /// The name of the preheat instance.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// The password for the preheat instance. Required if `auth_mode` is "BASIC". Defaults to an empty string.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("token")]
        private Input<string>? _token;

        /// <summary>
        /// The token for the preheat instance. Required if `auth_mode` is "OAUTH". Defaults to an empty string.
        /// </summary>
        public Input<string>? Token
        {
            get => _token;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _token = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The username for the preheat instance. Required if `auth_mode` is "BASIC". Defaults to an empty string.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        /// <summary>
        /// The vendor of the preheat instance. Must be either "dragonfly" or "kraken".
        /// </summary>
        [Input("vendor", required: true)]
        public Input<string> Vendor { get; set; } = null!;

        public PreheatInstanceArgs()
        {
        }
        public static new PreheatInstanceArgs Empty => new PreheatInstanceArgs();
    }

    public sealed class PreheatInstanceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The authentication mode for the preheat instance. Must be either "NONE", "BASIC", or "OAUTH". Defaults to "NONE".
        /// </summary>
        [Input("authMode")]
        public Input<string>? AuthMode { get; set; }

        /// <summary>
        /// Whether the preheat instance is the default instance. Defaults to false.
        /// </summary>
        [Input("default")]
        public Input<bool>? Default { get; set; }

        /// <summary>
        /// The description of the preheat instance. Defaults to an empty string.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether the preheat instance is enabled. Defaults to true.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The endpoint of the preheat instance.
        /// </summary>
        [Input("endpoint")]
        public Input<string>? Endpoint { get; set; }

        /// <summary>
        /// Whether to allow insecure connections to the preheat instance. Defaults to false.
        /// </summary>
        [Input("insecure")]
        public Input<bool>? Insecure { get; set; }

        /// <summary>
        /// The name of the preheat instance.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// The password for the preheat instance. Required if `auth_mode` is "BASIC". Defaults to an empty string.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("token")]
        private Input<string>? _token;

        /// <summary>
        /// The token for the preheat instance. Required if `auth_mode` is "OAUTH". Defaults to an empty string.
        /// </summary>
        public Input<string>? Token
        {
            get => _token;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _token = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The username for the preheat instance. Required if `auth_mode` is "BASIC". Defaults to an empty string.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        /// <summary>
        /// The vendor of the preheat instance. Must be either "dragonfly" or "kraken".
        /// </summary>
        [Input("vendor")]
        public Input<string>? Vendor { get; set; }

        public PreheatInstanceState()
        {
        }
        public static new PreheatInstanceState Empty => new PreheatInstanceState();
    }
}
