// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Harbor
{
    public static class GetProjects
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```terraform
        /// data "harbor_projects" "proxycache" {
        ///     type = "ProxyCache"
        /// }
        /// 
        /// output "proxy_cache_projects" {
        ///     value = data.harbor_projects.proxycache
        /// }
        /// ```
        /// </summary>
        public static Task<GetProjectsResult> InvokeAsync(GetProjectsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetProjectsResult>("harbor:index/getProjects:getProjects", args ?? new GetProjectsArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```terraform
        /// data "harbor_projects" "proxycache" {
        ///     type = "ProxyCache"
        /// }
        /// 
        /// output "proxy_cache_projects" {
        ///     value = data.harbor_projects.proxycache
        /// }
        /// ```
        /// </summary>
        public static Output<GetProjectsResult> Invoke(GetProjectsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetProjectsResult>("harbor:index/getProjects:getProjects", args ?? new GetProjectsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetProjectsArgs : global::Pulumi.InvokeArgs
    {
        [Input("name")]
        public string? Name { get; set; }

        [Input("public")]
        public bool? Public { get; set; }

        [Input("type")]
        public string? Type { get; set; }

        [Input("vulnerabilityScanning")]
        public bool? VulnerabilityScanning { get; set; }

        public GetProjectsArgs()
        {
        }
        public static new GetProjectsArgs Empty => new GetProjectsArgs();
    }

    public sealed class GetProjectsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("public")]
        public Input<bool>? Public { get; set; }

        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("vulnerabilityScanning")]
        public Input<bool>? VulnerabilityScanning { get; set; }

        public GetProjectsInvokeArgs()
        {
        }
        public static new GetProjectsInvokeArgs Empty => new GetProjectsInvokeArgs();
    }


    [OutputType]
    public sealed class GetProjectsResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the project.
        /// </summary>
        public readonly string? Name;
        public readonly ImmutableArray<Outputs.GetProjectsProjectResult> Projects;
        /// <summary>
        /// If the project has public accessibility.
        /// </summary>
        public readonly bool? Public;
        /// <summary>
        /// The type of the project : Project or ProxyCache.
        /// </summary>
        public readonly string? Type;
        /// <summary>
        /// If the images will be scanned for vulnerabilities when push to harbor.
        /// </summary>
        public readonly bool? VulnerabilityScanning;

        [OutputConstructor]
        private GetProjectsResult(
            string id,

            string? name,

            ImmutableArray<Outputs.GetProjectsProjectResult> projects,

            bool? @public,

            string? type,

            bool? vulnerabilityScanning)
        {
            Id = id;
            Name = name;
            Projects = projects;
            Public = @public;
            Type = type;
            VulnerabilityScanning = vulnerabilityScanning;
        }
    }
}
