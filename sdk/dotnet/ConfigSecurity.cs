// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Harbor
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// import using the id of the repo
    /// 
    /// ```sh
    /// $ pulumi import harbor:index/configSecurity:ConfigSecurity main "7"
    /// ```
    /// 
    /// Note that at this point of time Harbor doesn't has any api endpoint for deleting this list. Only updating the records.
    /// </summary>
    [HarborResourceType("harbor:index/configSecurity:ConfigSecurity")]
    public partial class ConfigSecurity : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Time of creation of the list.
        /// </summary>
        [Output("creationTime")]
        public Output<string> CreationTime { get; private set; } = null!;

        /// <summary>
        /// System allowlist. Vulnerabilities in this list will be ignored when pushing and pulling images. Should be in the format or `["CVE-123", "CVE-145"]` or `["CVE-123"]`
        /// </summary>
        [Output("cveAllowlists")]
        public Output<ImmutableArray<string>> CveAllowlists { get; private set; } = null!;

        /// <summary>
        /// The time for expiration of the allowlist, in the form of seconds since epoch. This is an optional attribute, if it's not set the CVE allowlist does not expire.
        /// </summary>
        [Output("expiresAt")]
        public Output<int?> ExpiresAt { get; private set; } = null!;

        /// <summary>
        /// Time of update of the list.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a ConfigSecurity resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ConfigSecurity(string name, ConfigSecurityArgs args, CustomResourceOptions? options = null)
            : base("harbor:index/configSecurity:ConfigSecurity", name, args ?? new ConfigSecurityArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ConfigSecurity(string name, Input<string> id, ConfigSecurityState? state = null, CustomResourceOptions? options = null)
            : base("harbor:index/configSecurity:ConfigSecurity", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-harbor",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ConfigSecurity resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ConfigSecurity Get(string name, Input<string> id, ConfigSecurityState? state = null, CustomResourceOptions? options = null)
        {
            return new ConfigSecurity(name, id, state, options);
        }
    }

    public sealed class ConfigSecurityArgs : global::Pulumi.ResourceArgs
    {
        [Input("cveAllowlists", required: true)]
        private InputList<string>? _cveAllowlists;

        /// <summary>
        /// System allowlist. Vulnerabilities in this list will be ignored when pushing and pulling images. Should be in the format or `["CVE-123", "CVE-145"]` or `["CVE-123"]`
        /// </summary>
        public InputList<string> CveAllowlists
        {
            get => _cveAllowlists ?? (_cveAllowlists = new InputList<string>());
            set => _cveAllowlists = value;
        }

        /// <summary>
        /// The time for expiration of the allowlist, in the form of seconds since epoch. This is an optional attribute, if it's not set the CVE allowlist does not expire.
        /// </summary>
        [Input("expiresAt")]
        public Input<int>? ExpiresAt { get; set; }

        public ConfigSecurityArgs()
        {
        }
        public static new ConfigSecurityArgs Empty => new ConfigSecurityArgs();
    }

    public sealed class ConfigSecurityState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Time of creation of the list.
        /// </summary>
        [Input("creationTime")]
        public Input<string>? CreationTime { get; set; }

        [Input("cveAllowlists")]
        private InputList<string>? _cveAllowlists;

        /// <summary>
        /// System allowlist. Vulnerabilities in this list will be ignored when pushing and pulling images. Should be in the format or `["CVE-123", "CVE-145"]` or `["CVE-123"]`
        /// </summary>
        public InputList<string> CveAllowlists
        {
            get => _cveAllowlists ?? (_cveAllowlists = new InputList<string>());
            set => _cveAllowlists = value;
        }

        /// <summary>
        /// The time for expiration of the allowlist, in the form of seconds since epoch. This is an optional attribute, if it's not set the CVE allowlist does not expire.
        /// </summary>
        [Input("expiresAt")]
        public Input<int>? ExpiresAt { get; set; }

        /// <summary>
        /// Time of update of the list.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public ConfigSecurityState()
        {
        }
        public static new ConfigSecurityState Empty => new ConfigSecurityState();
    }
}
