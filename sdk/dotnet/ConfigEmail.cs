// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Harbor
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Harbor = Pulumiverse.Harbor;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var main = new Harbor.ConfigEmail("main", new()
    ///     {
    ///         EmailFrom = "dont_reply@acme.com",
    ///         EmailHost = "server.acme.com",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [HarborResourceType("harbor:index/configEmail:ConfigEmail")]
    public partial class ConfigEmail : global::Pulumi.CustomResource
    {
        [Output("emailFrom")]
        public Output<string> EmailFrom { get; private set; } = null!;

        [Output("emailHost")]
        public Output<string> EmailHost { get; private set; } = null!;

        [Output("emailInsecure")]
        public Output<bool?> EmailInsecure { get; private set; } = null!;

        [Output("emailPassword")]
        public Output<string?> EmailPassword { get; private set; } = null!;

        [Output("emailPort")]
        public Output<int?> EmailPort { get; private set; } = null!;

        [Output("emailSsl")]
        public Output<bool?> EmailSsl { get; private set; } = null!;

        [Output("emailUsername")]
        public Output<string?> EmailUsername { get; private set; } = null!;


        /// <summary>
        /// Create a ConfigEmail resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ConfigEmail(string name, ConfigEmailArgs args, CustomResourceOptions? options = null)
            : base("harbor:index/configEmail:ConfigEmail", name, args ?? new ConfigEmailArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ConfigEmail(string name, Input<string> id, ConfigEmailState? state = null, CustomResourceOptions? options = null)
            : base("harbor:index/configEmail:ConfigEmail", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-harbor",
                AdditionalSecretOutputs =
                {
                    "emailPassword",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ConfigEmail resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ConfigEmail Get(string name, Input<string> id, ConfigEmailState? state = null, CustomResourceOptions? options = null)
        {
            return new ConfigEmail(name, id, state, options);
        }
    }

    public sealed class ConfigEmailArgs : global::Pulumi.ResourceArgs
    {
        [Input("emailFrom", required: true)]
        public Input<string> EmailFrom { get; set; } = null!;

        [Input("emailHost", required: true)]
        public Input<string> EmailHost { get; set; } = null!;

        [Input("emailInsecure")]
        public Input<bool>? EmailInsecure { get; set; }

        [Input("emailPassword")]
        private Input<string>? _emailPassword;
        public Input<string>? EmailPassword
        {
            get => _emailPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _emailPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("emailPort")]
        public Input<int>? EmailPort { get; set; }

        [Input("emailSsl")]
        public Input<bool>? EmailSsl { get; set; }

        [Input("emailUsername")]
        public Input<string>? EmailUsername { get; set; }

        public ConfigEmailArgs()
        {
        }
        public static new ConfigEmailArgs Empty => new ConfigEmailArgs();
    }

    public sealed class ConfigEmailState : global::Pulumi.ResourceArgs
    {
        [Input("emailFrom")]
        public Input<string>? EmailFrom { get; set; }

        [Input("emailHost")]
        public Input<string>? EmailHost { get; set; }

        [Input("emailInsecure")]
        public Input<bool>? EmailInsecure { get; set; }

        [Input("emailPassword")]
        private Input<string>? _emailPassword;
        public Input<string>? EmailPassword
        {
            get => _emailPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _emailPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("emailPort")]
        public Input<int>? EmailPort { get; set; }

        [Input("emailSsl")]
        public Input<bool>? EmailSsl { get; set; }

        [Input("emailUsername")]
        public Input<string>? EmailUsername { get; set; }

        public ConfigEmailState()
        {
        }
        public static new ConfigEmailState Empty => new ConfigEmailState();
    }
}
