// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Harbor
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// Harbor immutable tag rule can be imported using the `project and immutabletagrule ids` eg, `&lt;break&gt;&lt;break&gt;```sh&lt;break&gt; $ pulumi import harbor:index/immutableTagRule:ImmutableTagRule main /projects/4/immutabletagrules/25 &lt;break&gt;```&lt;break&gt;&lt;break&gt;`
    /// </summary>
    [HarborResourceType("harbor:index/immutableTagRule:ImmutableTagRule")]
    public partial class ImmutableTagRule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specify if the rule is disable or not. Defaults to `false`
        /// </summary>
        [Output("disabled")]
        public Output<bool?> Disabled { get; private set; } = null!;

        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// For the repositories excuding.
        /// </summary>
        [Output("repoExcluding")]
        public Output<string?> RepoExcluding { get; private set; } = null!;

        /// <summary>
        /// For the repositories matching.
        /// </summary>
        [Output("repoMatching")]
        public Output<string?> RepoMatching { get; private set; } = null!;

        /// <summary>
        /// For the tag excuding.
        /// </summary>
        [Output("tagExcluding")]
        public Output<string?> TagExcluding { get; private set; } = null!;

        /// <summary>
        /// For the tag matching.
        /// </summary>
        [Output("tagMatching")]
        public Output<string?> TagMatching { get; private set; } = null!;


        /// <summary>
        /// Create a ImmutableTagRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ImmutableTagRule(string name, ImmutableTagRuleArgs args, CustomResourceOptions? options = null)
            : base("harbor:index/immutableTagRule:ImmutableTagRule", name, args ?? new ImmutableTagRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ImmutableTagRule(string name, Input<string> id, ImmutableTagRuleState? state = null, CustomResourceOptions? options = null)
            : base("harbor:index/immutableTagRule:ImmutableTagRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-harbor",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ImmutableTagRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ImmutableTagRule Get(string name, Input<string> id, ImmutableTagRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new ImmutableTagRule(name, id, state, options);
        }
    }

    public sealed class ImmutableTagRuleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specify if the rule is disable or not. Defaults to `false`
        /// </summary>
        [Input("disabled")]
        public Input<bool>? Disabled { get; set; }

        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// For the repositories excuding.
        /// </summary>
        [Input("repoExcluding")]
        public Input<string>? RepoExcluding { get; set; }

        /// <summary>
        /// For the repositories matching.
        /// </summary>
        [Input("repoMatching")]
        public Input<string>? RepoMatching { get; set; }

        /// <summary>
        /// For the tag excuding.
        /// </summary>
        [Input("tagExcluding")]
        public Input<string>? TagExcluding { get; set; }

        /// <summary>
        /// For the tag matching.
        /// </summary>
        [Input("tagMatching")]
        public Input<string>? TagMatching { get; set; }

        public ImmutableTagRuleArgs()
        {
        }
        public static new ImmutableTagRuleArgs Empty => new ImmutableTagRuleArgs();
    }

    public sealed class ImmutableTagRuleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specify if the rule is disable or not. Defaults to `false`
        /// </summary>
        [Input("disabled")]
        public Input<bool>? Disabled { get; set; }

        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// For the repositories excuding.
        /// </summary>
        [Input("repoExcluding")]
        public Input<string>? RepoExcluding { get; set; }

        /// <summary>
        /// For the repositories matching.
        /// </summary>
        [Input("repoMatching")]
        public Input<string>? RepoMatching { get; set; }

        /// <summary>
        /// For the tag excuding.
        /// </summary>
        [Input("tagExcluding")]
        public Input<string>? TagExcluding { get; set; }

        /// <summary>
        /// For the tag matching.
        /// </summary>
        [Input("tagMatching")]
        public Input<string>? TagMatching { get; set; }

        public ImmutableTagRuleState()
        {
        }
        public static new ImmutableTagRuleState Empty => new ImmutableTagRuleState();
    }
}
