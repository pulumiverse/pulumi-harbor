// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harbor from "@pulumiverse/harbor";
 *
 * const main = new harbor.Registry("main", {
 *     providerName: "docker-hub",
 *     endpointUrl: "https://hub.docker.com",
 * });
 * const push = new harbor.Replication("push", {
 *     action: "push",
 *     registryId: main.registryId,
 * });
 * const alpineReplication = new harbor.Replication("alpineReplication", {
 *     action: "pull",
 *     registryId: main.registryId,
 *     schedule: "* 0/15 * * * *",
 *     filters: [
 *         {
 *             name: "library/alpine",
 *         },
 *         {
 *             tag: "3.*.*",
 *         },
 *         {
 *             resource: "artifact",
 *         },
 *         {
 *             labels: ["qa"],
 *         },
 *     ],
 * });
 * const alpineIndex_replicationReplication = new harbor.Replication("alpineIndex/replicationReplication", {
 *     action: "pull",
 *     registryId: main.registryId,
 *     schedule: "event_based",
 *     filters: [
 *         {
 *             name: "library/alpine",
 *         },
 *         {
 *             tag: "3.*.*",
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * Harbor project can be imported using the `replication id` eg, `
 *
 * ```sh
 *  $ pulumi import harbor:index/replication:Replication main /replication/policies/1
 * ```
 *
 *  `
 */
export class Replication extends pulumi.CustomResource {
    /**
     * Get an existing Replication resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ReplicationState, opts?: pulumi.CustomResourceOptions): Replication {
        return new Replication(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harbor:index/replication:Replication';

    /**
     * Returns true if the given object is an instance of Replication.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Replication {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Replication.__pulumiType;
    }

    public readonly action!: pulumi.Output<string>;
    public readonly deletion!: pulumi.Output<boolean | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly destNamespace!: pulumi.Output<string | undefined>;
    public readonly destNamespaceReplace!: pulumi.Output<number | undefined>;
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public readonly filters!: pulumi.Output<outputs.ReplicationFilter[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly override!: pulumi.Output<boolean | undefined>;
    public readonly registryId!: pulumi.Output<number>;
    public /*out*/ readonly replicationPolicyId!: pulumi.Output<number>;
    public readonly schedule!: pulumi.Output<string | undefined>;

    /**
     * Create a Replication resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ReplicationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ReplicationArgs | ReplicationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ReplicationState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["deletion"] = state ? state.deletion : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["destNamespace"] = state ? state.destNamespace : undefined;
            resourceInputs["destNamespaceReplace"] = state ? state.destNamespaceReplace : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["filters"] = state ? state.filters : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["override"] = state ? state.override : undefined;
            resourceInputs["registryId"] = state ? state.registryId : undefined;
            resourceInputs["replicationPolicyId"] = state ? state.replicationPolicyId : undefined;
            resourceInputs["schedule"] = state ? state.schedule : undefined;
        } else {
            const args = argsOrState as ReplicationArgs | undefined;
            if ((!args || args.action === undefined) && !opts.urn) {
                throw new Error("Missing required property 'action'");
            }
            if ((!args || args.registryId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'registryId'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["deletion"] = args ? args.deletion : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["destNamespace"] = args ? args.destNamespace : undefined;
            resourceInputs["destNamespaceReplace"] = args ? args.destNamespaceReplace : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["filters"] = args ? args.filters : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["override"] = args ? args.override : undefined;
            resourceInputs["registryId"] = args ? args.registryId : undefined;
            resourceInputs["schedule"] = args ? args.schedule : undefined;
            resourceInputs["replicationPolicyId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Replication.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Replication resources.
 */
export interface ReplicationState {
    action?: pulumi.Input<string>;
    deletion?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    destNamespace?: pulumi.Input<string>;
    destNamespaceReplace?: pulumi.Input<number>;
    enabled?: pulumi.Input<boolean>;
    filters?: pulumi.Input<pulumi.Input<inputs.ReplicationFilter>[]>;
    name?: pulumi.Input<string>;
    override?: pulumi.Input<boolean>;
    registryId?: pulumi.Input<number>;
    replicationPolicyId?: pulumi.Input<number>;
    schedule?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Replication resource.
 */
export interface ReplicationArgs {
    action: pulumi.Input<string>;
    deletion?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    destNamespace?: pulumi.Input<string>;
    destNamespaceReplace?: pulumi.Input<number>;
    enabled?: pulumi.Input<boolean>;
    filters?: pulumi.Input<pulumi.Input<inputs.ReplicationFilter>[]>;
    name?: pulumi.Input<string>;
    override?: pulumi.Input<boolean>;
    registryId: pulumi.Input<number>;
    schedule?: pulumi.Input<string>;
}
