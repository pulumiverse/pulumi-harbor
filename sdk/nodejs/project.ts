// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ### Hosted
 *
 * ### Proxy
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import harbor:index/project:Project main /projects/1
 * ```
 */
export class Project extends pulumi.CustomResource {
    /**
     * Get an existing Project resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectState, opts?: pulumi.CustomResourceOptions): Project {
        return new Project(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harbor:index/project:Project';

    /**
     * Returns true if the given object is an instance of Project.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Project {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Project.__pulumiType;
    }

    /**
     * Project allowlist allows vulnerabilities in this list to be ignored in this project when pushing and pulling images. Should be in the format or `["CVE-123", "CVE-145"]` or `["CVE-123"]`
     */
    public readonly cveAllowlists!: pulumi.Output<string[] | undefined>;
    /**
     * Prevent deployment of images with vulnerability severity equal or higher than the specified value. Images must be scanned before this takes effect. Possible values: `"critical"`, `"high"`, `"medium"`, `"low"`, `"none"`. (Default: `""` - empty)
     */
    public readonly deploymentSecurity!: pulumi.Output<string | undefined>;
    /**
     * Enables Content Trust for project. When enabled it queries the embedded docker notary server. (Default: `false`).
     */
    public readonly enableContentTrust!: pulumi.Output<boolean | undefined>;
    /**
     * Enables Content Trust Cosign for project. When enabled it queries Cosign. (Default: `false`)
     */
    public readonly enableContentTrustCosign!: pulumi.Output<boolean | undefined>;
    /**
     * A boolean that indicates all repositories should be deleted from the project so that the project can be destroyed without error. These repositories are *not* recoverable.
     */
    public readonly forceDestroy!: pulumi.Output<boolean | undefined>;
    /**
     * The name of the project that will be created in harbor.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The project id of this resource.
     */
    public /*out*/ readonly projectId!: pulumi.Output<number>;
    /**
     * The project will be public accessibility.(Default: `false`)
     */
    public readonly public!: pulumi.Output<boolean | undefined>;
    /**
     * To enable project as Proxy Cache.
     */
    public readonly registryId!: pulumi.Output<number>;
    /**
     * The storage quota of the project in GB's.
     */
    public readonly storageQuota!: pulumi.Output<number | undefined>;
    /**
     * Images will be scanned for vulnerabilities when push to harbor. (Default: `true`)
     */
    public readonly vulnerabilityScanning!: pulumi.Output<boolean | undefined>;

    /**
     * Create a Project resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ProjectArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectArgs | ProjectState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProjectState | undefined;
            resourceInputs["cveAllowlists"] = state ? state.cveAllowlists : undefined;
            resourceInputs["deploymentSecurity"] = state ? state.deploymentSecurity : undefined;
            resourceInputs["enableContentTrust"] = state ? state.enableContentTrust : undefined;
            resourceInputs["enableContentTrustCosign"] = state ? state.enableContentTrustCosign : undefined;
            resourceInputs["forceDestroy"] = state ? state.forceDestroy : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["public"] = state ? state.public : undefined;
            resourceInputs["registryId"] = state ? state.registryId : undefined;
            resourceInputs["storageQuota"] = state ? state.storageQuota : undefined;
            resourceInputs["vulnerabilityScanning"] = state ? state.vulnerabilityScanning : undefined;
        } else {
            const args = argsOrState as ProjectArgs | undefined;
            resourceInputs["cveAllowlists"] = args ? args.cveAllowlists : undefined;
            resourceInputs["deploymentSecurity"] = args ? args.deploymentSecurity : undefined;
            resourceInputs["enableContentTrust"] = args ? args.enableContentTrust : undefined;
            resourceInputs["enableContentTrustCosign"] = args ? args.enableContentTrustCosign : undefined;
            resourceInputs["forceDestroy"] = args ? args.forceDestroy : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["public"] = args ? args.public : undefined;
            resourceInputs["registryId"] = args ? args.registryId : undefined;
            resourceInputs["storageQuota"] = args ? args.storageQuota : undefined;
            resourceInputs["vulnerabilityScanning"] = args ? args.vulnerabilityScanning : undefined;
            resourceInputs["projectId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Project.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Project resources.
 */
export interface ProjectState {
    /**
     * Project allowlist allows vulnerabilities in this list to be ignored in this project when pushing and pulling images. Should be in the format or `["CVE-123", "CVE-145"]` or `["CVE-123"]`
     */
    cveAllowlists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Prevent deployment of images with vulnerability severity equal or higher than the specified value. Images must be scanned before this takes effect. Possible values: `"critical"`, `"high"`, `"medium"`, `"low"`, `"none"`. (Default: `""` - empty)
     */
    deploymentSecurity?: pulumi.Input<string>;
    /**
     * Enables Content Trust for project. When enabled it queries the embedded docker notary server. (Default: `false`).
     */
    enableContentTrust?: pulumi.Input<boolean>;
    /**
     * Enables Content Trust Cosign for project. When enabled it queries Cosign. (Default: `false`)
     */
    enableContentTrustCosign?: pulumi.Input<boolean>;
    /**
     * A boolean that indicates all repositories should be deleted from the project so that the project can be destroyed without error. These repositories are *not* recoverable.
     */
    forceDestroy?: pulumi.Input<boolean>;
    /**
     * The name of the project that will be created in harbor.
     */
    name?: pulumi.Input<string>;
    /**
     * The project id of this resource.
     */
    projectId?: pulumi.Input<number>;
    /**
     * The project will be public accessibility.(Default: `false`)
     */
    public?: pulumi.Input<boolean>;
    /**
     * To enable project as Proxy Cache.
     */
    registryId?: pulumi.Input<number>;
    /**
     * The storage quota of the project in GB's.
     */
    storageQuota?: pulumi.Input<number>;
    /**
     * Images will be scanned for vulnerabilities when push to harbor. (Default: `true`)
     */
    vulnerabilityScanning?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Project resource.
 */
export interface ProjectArgs {
    /**
     * Project allowlist allows vulnerabilities in this list to be ignored in this project when pushing and pulling images. Should be in the format or `["CVE-123", "CVE-145"]` or `["CVE-123"]`
     */
    cveAllowlists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Prevent deployment of images with vulnerability severity equal or higher than the specified value. Images must be scanned before this takes effect. Possible values: `"critical"`, `"high"`, `"medium"`, `"low"`, `"none"`. (Default: `""` - empty)
     */
    deploymentSecurity?: pulumi.Input<string>;
    /**
     * Enables Content Trust for project. When enabled it queries the embedded docker notary server. (Default: `false`).
     */
    enableContentTrust?: pulumi.Input<boolean>;
    /**
     * Enables Content Trust Cosign for project. When enabled it queries Cosign. (Default: `false`)
     */
    enableContentTrustCosign?: pulumi.Input<boolean>;
    /**
     * A boolean that indicates all repositories should be deleted from the project so that the project can be destroyed without error. These repositories are *not* recoverable.
     */
    forceDestroy?: pulumi.Input<boolean>;
    /**
     * The name of the project that will be created in harbor.
     */
    name?: pulumi.Input<string>;
    /**
     * The project will be public accessibility.(Default: `false`)
     */
    public?: pulumi.Input<boolean>;
    /**
     * To enable project as Proxy Cache.
     */
    registryId?: pulumi.Input<number>;
    /**
     * The storage quota of the project in GB's.
     */
    storageQuota?: pulumi.Input<number>;
    /**
     * Images will be scanned for vulnerabilities when push to harbor. (Default: `true`)
     */
    vulnerabilityScanning?: pulumi.Input<boolean>;
}
