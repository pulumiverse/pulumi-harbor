// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ## Import
 *
 * import using the id of the repo
 *
 * ```sh
 * $ pulumi import harbor:index/configSecurity:ConfigSecurity main "7"
 * ```
 *
 * Note that at this point of time Harbor doesn't has any api endpoint for deleting this list. Only updating the records.
 */
export class ConfigSecurity extends pulumi.CustomResource {
    /**
     * Get an existing ConfigSecurity resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConfigSecurityState, opts?: pulumi.CustomResourceOptions): ConfigSecurity {
        return new ConfigSecurity(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harbor:index/configSecurity:ConfigSecurity';

    /**
     * Returns true if the given object is an instance of ConfigSecurity.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConfigSecurity {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConfigSecurity.__pulumiType;
    }

    /**
     * Time of creation of the list.
     */
    public /*out*/ readonly creationTime!: pulumi.Output<string>;
    /**
     * System allowlist. Vulnerabilities in this list will be ignored when pushing and pulling images. Should be in the format or `["CVE-123", "CVE-145"]` or `["CVE-123"]`
     */
    public readonly cveAllowlists!: pulumi.Output<string[]>;
    /**
     * The time for expiration of the allowlist, in the form of seconds since epoch. This is an optional attribute, if it's not set the CVE allowlist does not expire.
     */
    public readonly expiresAt!: pulumi.Output<number | undefined>;
    /**
     * Time of update of the list.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a ConfigSecurity resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConfigSecurityArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConfigSecurityArgs | ConfigSecurityState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConfigSecurityState | undefined;
            resourceInputs["creationTime"] = state ? state.creationTime : undefined;
            resourceInputs["cveAllowlists"] = state ? state.cveAllowlists : undefined;
            resourceInputs["expiresAt"] = state ? state.expiresAt : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as ConfigSecurityArgs | undefined;
            if ((!args || args.cveAllowlists === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cveAllowlists'");
            }
            resourceInputs["cveAllowlists"] = args ? args.cveAllowlists : undefined;
            resourceInputs["expiresAt"] = args ? args.expiresAt : undefined;
            resourceInputs["creationTime"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ConfigSecurity.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ConfigSecurity resources.
 */
export interface ConfigSecurityState {
    /**
     * Time of creation of the list.
     */
    creationTime?: pulumi.Input<string>;
    /**
     * System allowlist. Vulnerabilities in this list will be ignored when pushing and pulling images. Should be in the format or `["CVE-123", "CVE-145"]` or `["CVE-123"]`
     */
    cveAllowlists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The time for expiration of the allowlist, in the form of seconds since epoch. This is an optional attribute, if it's not set the CVE allowlist does not expire.
     */
    expiresAt?: pulumi.Input<number>;
    /**
     * Time of update of the list.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ConfigSecurity resource.
 */
export interface ConfigSecurityArgs {
    /**
     * System allowlist. Vulnerabilities in this list will be ignored when pushing and pulling images. Should be in the format or `["CVE-123", "CVE-145"]` or `["CVE-123"]`
     */
    cveAllowlists: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The time for expiration of the allowlist, in the form of seconds since epoch. This is an optional attribute, if it's not set the CVE allowlist does not expire.
     */
    expiresAt?: pulumi.Input<number>;
}
