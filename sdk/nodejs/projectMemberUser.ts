// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harbor from "@pulumiverse/harbor";
 *
 * const mainProject = new harbor.Project("mainProject", {});
 * const mainProjectMemberUser = new harbor.ProjectMemberUser("mainProjectMemberUser", {
 *     projectId: mainProject.id,
 *     userName: "testing1",
 *     role: "projectadmin",
 * });
 * ```
 *
 * ## Import
 *
 * Harbor project member user can be imported using the `project id` and `member id` eg, `
 *
 * ```sh
 *  $ pulumi import harbor:index/projectMemberUser:ProjectMemberUser main /projects/10/members/200
 * ```
 *
 *  `
 */
export class ProjectMemberUser extends pulumi.CustomResource {
    /**
     * Get an existing ProjectMemberUser resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectMemberUserState, opts?: pulumi.CustomResourceOptions): ProjectMemberUser {
        return new ProjectMemberUser(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harbor:index/projectMemberUser:ProjectMemberUser';

    /**
     * Returns true if the given object is an instance of ProjectMemberUser.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProjectMemberUser {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProjectMemberUser.__pulumiType;
    }

    public /*out*/ readonly memberId!: pulumi.Output<number>;
    public readonly projectId!: pulumi.Output<string>;
    public readonly role!: pulumi.Output<string>;
    public readonly userName!: pulumi.Output<string>;

    /**
     * Create a ProjectMemberUser resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProjectMemberUserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectMemberUserArgs | ProjectMemberUserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProjectMemberUserState | undefined;
            resourceInputs["memberId"] = state ? state.memberId : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["role"] = state ? state.role : undefined;
            resourceInputs["userName"] = state ? state.userName : undefined;
        } else {
            const args = argsOrState as ProjectMemberUserArgs | undefined;
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.role === undefined) && !opts.urn) {
                throw new Error("Missing required property 'role'");
            }
            if ((!args || args.userName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userName'");
            }
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["role"] = args ? args.role : undefined;
            resourceInputs["userName"] = args ? args.userName : undefined;
            resourceInputs["memberId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProjectMemberUser.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ProjectMemberUser resources.
 */
export interface ProjectMemberUserState {
    memberId?: pulumi.Input<number>;
    projectId?: pulumi.Input<string>;
    role?: pulumi.Input<string>;
    userName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ProjectMemberUser resource.
 */
export interface ProjectMemberUserArgs {
    projectId: pulumi.Input<string>;
    role: pulumi.Input<string>;
    userName: pulumi.Input<string>;
}
