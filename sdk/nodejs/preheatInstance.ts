// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ### Usage with Authentication
 *
 * ## Import
 *
 * The `harbor_preheat_instance` resource can be imported using the preheat instance ID.
 *
 * ```sh
 * $ pulumi import harbor:index/preheatInstance:PreheatInstance example /p2p/preheat/instances/example-preheat-instance
 * ```
 */
export class PreheatInstance extends pulumi.CustomResource {
    /**
     * Get an existing PreheatInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PreheatInstanceState, opts?: pulumi.CustomResourceOptions): PreheatInstance {
        return new PreheatInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harbor:index/preheatInstance:PreheatInstance';

    /**
     * Returns true if the given object is an instance of PreheatInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PreheatInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PreheatInstance.__pulumiType;
    }

    /**
     * The authentication mode for the preheat instance. Must be either "NONE", "BASIC", or "OAUTH". Defaults to "NONE".
     */
    public readonly authMode!: pulumi.Output<string | undefined>;
    /**
     * Whether the preheat instance is the default instance. Defaults to false.
     */
    public readonly default!: pulumi.Output<boolean | undefined>;
    /**
     * The description of the preheat instance. Defaults to an empty string.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Whether the preheat instance is enabled. Defaults to true.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * The endpoint of the preheat instance.
     */
    public readonly endpoint!: pulumi.Output<string>;
    /**
     * Whether to allow insecure connections to the preheat instance. Defaults to false.
     */
    public readonly insecure!: pulumi.Output<boolean | undefined>;
    /**
     * The name of the preheat instance.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The password for the preheat instance. Required if `authMode` is "BASIC". Defaults to an empty string.
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * The token for the preheat instance. Required if `authMode` is "OAUTH". Defaults to an empty string.
     */
    public readonly token!: pulumi.Output<string | undefined>;
    /**
     * The username for the preheat instance. Required if `authMode` is "BASIC". Defaults to an empty string.
     */
    public readonly username!: pulumi.Output<string | undefined>;
    /**
     * The vendor of the preheat instance. Must be either "dragonfly" or "kraken".
     */
    public readonly vendor!: pulumi.Output<string>;

    /**
     * Create a PreheatInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PreheatInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PreheatInstanceArgs | PreheatInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PreheatInstanceState | undefined;
            resourceInputs["authMode"] = state ? state.authMode : undefined;
            resourceInputs["default"] = state ? state.default : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["endpoint"] = state ? state.endpoint : undefined;
            resourceInputs["insecure"] = state ? state.insecure : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["token"] = state ? state.token : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
            resourceInputs["vendor"] = state ? state.vendor : undefined;
        } else {
            const args = argsOrState as PreheatInstanceArgs | undefined;
            if ((!args || args.endpoint === undefined) && !opts.urn) {
                throw new Error("Missing required property 'endpoint'");
            }
            if ((!args || args.vendor === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vendor'");
            }
            resourceInputs["authMode"] = args ? args.authMode : undefined;
            resourceInputs["default"] = args ? args.default : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["endpoint"] = args ? args.endpoint : undefined;
            resourceInputs["insecure"] = args ? args.insecure : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["token"] = args?.token ? pulumi.secret(args.token) : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["vendor"] = args ? args.vendor : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password", "token"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(PreheatInstance.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PreheatInstance resources.
 */
export interface PreheatInstanceState {
    /**
     * The authentication mode for the preheat instance. Must be either "NONE", "BASIC", or "OAUTH". Defaults to "NONE".
     */
    authMode?: pulumi.Input<string>;
    /**
     * Whether the preheat instance is the default instance. Defaults to false.
     */
    default?: pulumi.Input<boolean>;
    /**
     * The description of the preheat instance. Defaults to an empty string.
     */
    description?: pulumi.Input<string>;
    /**
     * Whether the preheat instance is enabled. Defaults to true.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The endpoint of the preheat instance.
     */
    endpoint?: pulumi.Input<string>;
    /**
     * Whether to allow insecure connections to the preheat instance. Defaults to false.
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * The name of the preheat instance.
     */
    name?: pulumi.Input<string>;
    /**
     * The password for the preheat instance. Required if `authMode` is "BASIC". Defaults to an empty string.
     */
    password?: pulumi.Input<string>;
    /**
     * The token for the preheat instance. Required if `authMode` is "OAUTH". Defaults to an empty string.
     */
    token?: pulumi.Input<string>;
    /**
     * The username for the preheat instance. Required if `authMode` is "BASIC". Defaults to an empty string.
     */
    username?: pulumi.Input<string>;
    /**
     * The vendor of the preheat instance. Must be either "dragonfly" or "kraken".
     */
    vendor?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PreheatInstance resource.
 */
export interface PreheatInstanceArgs {
    /**
     * The authentication mode for the preheat instance. Must be either "NONE", "BASIC", or "OAUTH". Defaults to "NONE".
     */
    authMode?: pulumi.Input<string>;
    /**
     * Whether the preheat instance is the default instance. Defaults to false.
     */
    default?: pulumi.Input<boolean>;
    /**
     * The description of the preheat instance. Defaults to an empty string.
     */
    description?: pulumi.Input<string>;
    /**
     * Whether the preheat instance is enabled. Defaults to true.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The endpoint of the preheat instance.
     */
    endpoint: pulumi.Input<string>;
    /**
     * Whether to allow insecure connections to the preheat instance. Defaults to false.
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * The name of the preheat instance.
     */
    name?: pulumi.Input<string>;
    /**
     * The password for the preheat instance. Required if `authMode` is "BASIC". Defaults to an empty string.
     */
    password?: pulumi.Input<string>;
    /**
     * The token for the preheat instance. Required if `authMode` is "OAUTH". Defaults to an empty string.
     */
    token?: pulumi.Input<string>;
    /**
     * The username for the preheat instance. Required if `authMode` is "BASIC". Defaults to an empty string.
     */
    username?: pulumi.Input<string>;
    /**
     * The vendor of the preheat instance. Must be either "dragonfly" or "kraken".
     */
    vendor: pulumi.Input<string>;
}
