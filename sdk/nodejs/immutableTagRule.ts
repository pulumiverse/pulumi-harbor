// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import harbor:index/immutableTagRule:ImmutableTagRule main /projects/4/immutabletagrules/25
 * ```
 */
export class ImmutableTagRule extends pulumi.CustomResource {
    /**
     * Get an existing ImmutableTagRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ImmutableTagRuleState, opts?: pulumi.CustomResourceOptions): ImmutableTagRule {
        return new ImmutableTagRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harbor:index/immutableTagRule:ImmutableTagRule';

    /**
     * Returns true if the given object is an instance of ImmutableTagRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ImmutableTagRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ImmutableTagRule.__pulumiType;
    }

    /**
     * Specify if the rule is disable or not. Defaults to `false`
     */
    public readonly disabled!: pulumi.Output<boolean | undefined>;
    /**
     * The project id of which you would like to apply this policy.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * For the repositories excluding.
     */
    public readonly repoExcluding!: pulumi.Output<string | undefined>;
    /**
     * For the repositories matching.
     */
    public readonly repoMatching!: pulumi.Output<string | undefined>;
    /**
     * For the tag excluding.
     */
    public readonly tagExcluding!: pulumi.Output<string | undefined>;
    /**
     * For the tag matching.
     */
    public readonly tagMatching!: pulumi.Output<string | undefined>;

    /**
     * Create a ImmutableTagRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ImmutableTagRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ImmutableTagRuleArgs | ImmutableTagRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ImmutableTagRuleState | undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["repoExcluding"] = state ? state.repoExcluding : undefined;
            resourceInputs["repoMatching"] = state ? state.repoMatching : undefined;
            resourceInputs["tagExcluding"] = state ? state.tagExcluding : undefined;
            resourceInputs["tagMatching"] = state ? state.tagMatching : undefined;
        } else {
            const args = argsOrState as ImmutableTagRuleArgs | undefined;
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["repoExcluding"] = args ? args.repoExcluding : undefined;
            resourceInputs["repoMatching"] = args ? args.repoMatching : undefined;
            resourceInputs["tagExcluding"] = args ? args.tagExcluding : undefined;
            resourceInputs["tagMatching"] = args ? args.tagMatching : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ImmutableTagRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ImmutableTagRule resources.
 */
export interface ImmutableTagRuleState {
    /**
     * Specify if the rule is disable or not. Defaults to `false`
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * The project id of which you would like to apply this policy.
     */
    projectId?: pulumi.Input<string>;
    /**
     * For the repositories excluding.
     */
    repoExcluding?: pulumi.Input<string>;
    /**
     * For the repositories matching.
     */
    repoMatching?: pulumi.Input<string>;
    /**
     * For the tag excluding.
     */
    tagExcluding?: pulumi.Input<string>;
    /**
     * For the tag matching.
     */
    tagMatching?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ImmutableTagRule resource.
 */
export interface ImmutableTagRuleArgs {
    /**
     * Specify if the rule is disable or not. Defaults to `false`
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * The project id of which you would like to apply this policy.
     */
    projectId: pulumi.Input<string>;
    /**
     * For the repositories excluding.
     */
    repoExcluding?: pulumi.Input<string>;
    /**
     * For the repositories matching.
     */
    repoMatching?: pulumi.Input<string>;
    /**
     * For the tag excluding.
     */
    tagExcluding?: pulumi.Input<string>;
    /**
     * For the tag matching.
     */
    tagMatching?: pulumi.Input<string>;
}
