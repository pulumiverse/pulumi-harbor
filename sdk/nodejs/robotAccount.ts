// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## # Resource: harbor.RobotAccount
 *
 * Harbor supports different levels of robot accounts. Currently `system` and `project` level robot accounts are supported.
 *
 * ## Example Usage
 * ### System Level
 * Introduced in harbor 2.2.0, system level robot accounts can have basically [all available permissions](https://github.com/goharbor/harbor/blob/-/src/common/rbac/const.go) in harbor and are not dependent on a single project.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harbor from "@pulumiverse/harbor";
 * import * as random from "@pulumi/random";
 *
 * const password = new random.RandomPassword("password", {
 *     length: 12,
 *     special: false,
 * });
 * const main = new harbor.Project("main", {});
 * const system = new harbor.RobotAccount("system", {
 *     description: "system level robot account",
 *     level: "system",
 *     secret: resource.random_password.password.result,
 *     permissions: [
 *         {
 *             accesses: [{
 *                 action: "create",
 *                 resource: "labels",
 *             }],
 *             kind: "system",
 *             namespace: "/",
 *         },
 *         {
 *             accesses: [
 *                 {
 *                     action: "push",
 *                     resource: "repository",
 *                 },
 *                 {
 *                     action: "read",
 *                     resource: "helm-chart",
 *                 },
 *                 {
 *                     action: "read",
 *                     resource: "helm-chart-version",
 *                 },
 *             ],
 *             kind: "project",
 *             namespace: main.name,
 *         },
 *         {
 *             accesses: [{
 *                 action: "pull",
 *                 resource: "repository",
 *             }],
 *             kind: "project",
 *             namespace: "*",
 *         },
 *     ],
 * });
 * ```
 *
 * The above example, creates a system level robot account with permissions to
 * - permission to create labels on system level
 * - pull repository across all projects
 * - push repository to project "my-project-name"
 * - read helm-chart and helm-chart-version in project "my-project-name"
 * ### Project Level
 *
 * Other than system level robot accounts, project level robot accounts can interact on project level only.
 * The [available permissions](https://github.com/goharbor/harbor/blob/-/src/common/rbac/const.go) are mostly the same as for system level robots.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harbor from "@pulumiverse/harbor";
 *
 * const main = new harbor.Project("main", {});
 * const project = new harbor.RobotAccount("project", {
 *     description: "project level robot account",
 *     level: "project",
 *     permissions: [{
 *         accesses: [
 *             {
 *                 action: "pull",
 *                 resource: "repository",
 *             },
 *             {
 *                 action: "push",
 *                 resource: "repository",
 *             },
 *         ],
 *         kind: "project",
 *         namespace: main.name,
 *     }],
 * });
 * ```
 *
 * The above example creates a project level robot account with permissions to
 * - pull repository on project "main"
 * - push repository on project "main"
 */
export class RobotAccount extends pulumi.CustomResource {
    /**
     * Get an existing RobotAccount resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RobotAccountState, opts?: pulumi.CustomResourceOptions): RobotAccount {
        return new RobotAccount(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harbor:index/robotAccount:RobotAccount';

    /**
     * Returns true if the given object is an instance of RobotAccount.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RobotAccount {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RobotAccount.__pulumiType;
    }

    public readonly description!: pulumi.Output<string | undefined>;
    public readonly disable!: pulumi.Output<boolean | undefined>;
    public readonly duration!: pulumi.Output<number | undefined>;
    public /*out*/ readonly fullName!: pulumi.Output<string>;
    public readonly level!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly permissions!: pulumi.Output<outputs.RobotAccountPermission[]>;
    public /*out*/ readonly robotId!: pulumi.Output<string>;
    public readonly secret!: pulumi.Output<string>;

    /**
     * Create a RobotAccount resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RobotAccountArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RobotAccountArgs | RobotAccountState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RobotAccountState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["disable"] = state ? state.disable : undefined;
            resourceInputs["duration"] = state ? state.duration : undefined;
            resourceInputs["fullName"] = state ? state.fullName : undefined;
            resourceInputs["level"] = state ? state.level : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["permissions"] = state ? state.permissions : undefined;
            resourceInputs["robotId"] = state ? state.robotId : undefined;
            resourceInputs["secret"] = state ? state.secret : undefined;
        } else {
            const args = argsOrState as RobotAccountArgs | undefined;
            if ((!args || args.level === undefined) && !opts.urn) {
                throw new Error("Missing required property 'level'");
            }
            if ((!args || args.permissions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'permissions'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["disable"] = args ? args.disable : undefined;
            resourceInputs["duration"] = args ? args.duration : undefined;
            resourceInputs["level"] = args ? args.level : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["permissions"] = args ? args.permissions : undefined;
            resourceInputs["secret"] = args?.secret ? pulumi.secret(args.secret) : undefined;
            resourceInputs["fullName"] = undefined /*out*/;
            resourceInputs["robotId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["secret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(RobotAccount.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RobotAccount resources.
 */
export interface RobotAccountState {
    description?: pulumi.Input<string>;
    disable?: pulumi.Input<boolean>;
    duration?: pulumi.Input<number>;
    fullName?: pulumi.Input<string>;
    level?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    permissions?: pulumi.Input<pulumi.Input<inputs.RobotAccountPermission>[]>;
    robotId?: pulumi.Input<string>;
    secret?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RobotAccount resource.
 */
export interface RobotAccountArgs {
    description?: pulumi.Input<string>;
    disable?: pulumi.Input<boolean>;
    duration?: pulumi.Input<number>;
    level: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    permissions: pulumi.Input<pulumi.Input<inputs.RobotAccountPermission>[]>;
    secret?: pulumi.Input<string>;
}
