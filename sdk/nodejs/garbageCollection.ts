// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 */
export class GarbageCollection extends pulumi.CustomResource {
    /**
     * Get an existing GarbageCollection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GarbageCollectionState, opts?: pulumi.CustomResourceOptions): GarbageCollection {
        return new GarbageCollection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harbor:index/garbageCollection:GarbageCollection';

    /**
     * Returns true if the given object is an instance of GarbageCollection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GarbageCollection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GarbageCollection.__pulumiType;
    }

    /**
     * Allow garbage collection on untagged artifacts.
     */
    public readonly deleteUntagged!: pulumi.Output<boolean | undefined>;
    /**
     * Sets the schedule how often the Garbage Collection will run.  Can be to `"hourly"`, `"daily"`, `"weekly"` or can be a custom cron string ie, `"0 5 4 * * *"`
     */
    public readonly schedule!: pulumi.Output<string>;
    /**
     * Number of workers to run the garbage collection, value must be between 1 and 5.
     */
    public readonly workers!: pulumi.Output<number | undefined>;

    /**
     * Create a GarbageCollection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GarbageCollectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GarbageCollectionArgs | GarbageCollectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GarbageCollectionState | undefined;
            resourceInputs["deleteUntagged"] = state ? state.deleteUntagged : undefined;
            resourceInputs["schedule"] = state ? state.schedule : undefined;
            resourceInputs["workers"] = state ? state.workers : undefined;
        } else {
            const args = argsOrState as GarbageCollectionArgs | undefined;
            if ((!args || args.schedule === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schedule'");
            }
            resourceInputs["deleteUntagged"] = args ? args.deleteUntagged : undefined;
            resourceInputs["schedule"] = args ? args.schedule : undefined;
            resourceInputs["workers"] = args ? args.workers : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GarbageCollection.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GarbageCollection resources.
 */
export interface GarbageCollectionState {
    /**
     * Allow garbage collection on untagged artifacts.
     */
    deleteUntagged?: pulumi.Input<boolean>;
    /**
     * Sets the schedule how often the Garbage Collection will run.  Can be to `"hourly"`, `"daily"`, `"weekly"` or can be a custom cron string ie, `"0 5 4 * * *"`
     */
    schedule?: pulumi.Input<string>;
    /**
     * Number of workers to run the garbage collection, value must be between 1 and 5.
     */
    workers?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a GarbageCollection resource.
 */
export interface GarbageCollectionArgs {
    /**
     * Allow garbage collection on untagged artifacts.
     */
    deleteUntagged?: pulumi.Input<boolean>;
    /**
     * Sets the schedule how often the Garbage Collection will run.  Can be to `"hourly"`, `"daily"`, `"weekly"` or can be a custom cron string ie, `"0 5 4 * * *"`
     */
    schedule: pulumi.Input<string>;
    /**
     * Number of workers to run the garbage collection, value must be between 1 and 5.
     */
    workers?: pulumi.Input<number>;
}
