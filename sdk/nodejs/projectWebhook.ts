// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 */
export class ProjectWebhook extends pulumi.CustomResource {
    /**
     * Get an existing ProjectWebhook resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectWebhookState, opts?: pulumi.CustomResourceOptions): ProjectWebhook {
        return new ProjectWebhook(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harbor:index/projectWebhook:ProjectWebhook';

    /**
     * Returns true if the given object is an instance of ProjectWebhook.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProjectWebhook {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProjectWebhook.__pulumiType;
    }

    /**
     * The address of the webhook.
     */
    public readonly address!: pulumi.Output<string>;
    public readonly authHeader!: pulumi.Output<string | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * The type events you want to subscript to can be
     */
    public readonly eventsTypes!: pulumi.Output<string[]>;
    /**
     * The name of the webhook that will be created in harbor.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The notification type either `http` or `slack`.
     */
    public readonly notifyType!: pulumi.Output<string>;
    /**
     * The project id of the harbor that webhook related to.
     */
    public readonly projectId!: pulumi.Output<string>;
    public readonly skipCertVerify!: pulumi.Output<boolean | undefined>;

    /**
     * Create a ProjectWebhook resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProjectWebhookArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectWebhookArgs | ProjectWebhookState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProjectWebhookState | undefined;
            resourceInputs["address"] = state ? state.address : undefined;
            resourceInputs["authHeader"] = state ? state.authHeader : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["eventsTypes"] = state ? state.eventsTypes : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notifyType"] = state ? state.notifyType : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["skipCertVerify"] = state ? state.skipCertVerify : undefined;
        } else {
            const args = argsOrState as ProjectWebhookArgs | undefined;
            if ((!args || args.address === undefined) && !opts.urn) {
                throw new Error("Missing required property 'address'");
            }
            if ((!args || args.eventsTypes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'eventsTypes'");
            }
            if ((!args || args.notifyType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'notifyType'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["address"] = args ? args.address : undefined;
            resourceInputs["authHeader"] = args ? args.authHeader : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["eventsTypes"] = args ? args.eventsTypes : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notifyType"] = args ? args.notifyType : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["skipCertVerify"] = args ? args.skipCertVerify : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProjectWebhook.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ProjectWebhook resources.
 */
export interface ProjectWebhookState {
    /**
     * The address of the webhook.
     */
    address?: pulumi.Input<string>;
    authHeader?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    /**
     * The type events you want to subscript to can be
     */
    eventsTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the webhook that will be created in harbor.
     */
    name?: pulumi.Input<string>;
    /**
     * The notification type either `http` or `slack`.
     */
    notifyType?: pulumi.Input<string>;
    /**
     * The project id of the harbor that webhook related to.
     */
    projectId?: pulumi.Input<string>;
    skipCertVerify?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a ProjectWebhook resource.
 */
export interface ProjectWebhookArgs {
    /**
     * The address of the webhook.
     */
    address: pulumi.Input<string>;
    authHeader?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    /**
     * The type events you want to subscript to can be
     */
    eventsTypes: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the webhook that will be created in harbor.
     */
    name?: pulumi.Input<string>;
    /**
     * The notification type either `http` or `slack`.
     */
    notifyType: pulumi.Input<string>;
    /**
     * The project id of the harbor that webhook related to.
     */
    projectId: pulumi.Input<string>;
    skipCertVerify?: pulumi.Input<boolean>;
}
