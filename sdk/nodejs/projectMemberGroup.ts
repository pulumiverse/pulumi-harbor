// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import harbor:index/projectMemberGroup:ProjectMemberGroup main /projects/10/members/200
 * ```
 */
export class ProjectMemberGroup extends pulumi.CustomResource {
    /**
     * Get an existing ProjectMemberGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectMemberGroupState, opts?: pulumi.CustomResourceOptions): ProjectMemberGroup {
        return new ProjectMemberGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harbor:index/projectMemberGroup:ProjectMemberGroup';

    /**
     * Returns true if the given object is an instance of ProjectMemberGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProjectMemberGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProjectMemberGroup.__pulumiType;
    }

    public readonly groupId!: pulumi.Output<number | undefined>;
    public readonly groupName!: pulumi.Output<string | undefined>;
    public readonly ldapGroupDn!: pulumi.Output<string | undefined>;
    public /*out*/ readonly memberId!: pulumi.Output<number>;
    /**
     * The project id of the project that the entity will have access to.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * The permissions that the entity will be granted.
     */
    public readonly role!: pulumi.Output<string>;
    /**
     * The group type.  Can be set to `"ldap"`, `"internal"` or `"oidc"`.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a ProjectMemberGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProjectMemberGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectMemberGroupArgs | ProjectMemberGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProjectMemberGroupState | undefined;
            resourceInputs["groupId"] = state ? state.groupId : undefined;
            resourceInputs["groupName"] = state ? state.groupName : undefined;
            resourceInputs["ldapGroupDn"] = state ? state.ldapGroupDn : undefined;
            resourceInputs["memberId"] = state ? state.memberId : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["role"] = state ? state.role : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as ProjectMemberGroupArgs | undefined;
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.role === undefined) && !opts.urn) {
                throw new Error("Missing required property 'role'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["groupId"] = args ? args.groupId : undefined;
            resourceInputs["groupName"] = args ? args.groupName : undefined;
            resourceInputs["ldapGroupDn"] = args ? args.ldapGroupDn : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["role"] = args ? args.role : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["memberId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProjectMemberGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ProjectMemberGroup resources.
 */
export interface ProjectMemberGroupState {
    groupId?: pulumi.Input<number>;
    groupName?: pulumi.Input<string>;
    ldapGroupDn?: pulumi.Input<string>;
    memberId?: pulumi.Input<number>;
    /**
     * The project id of the project that the entity will have access to.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The permissions that the entity will be granted.
     */
    role?: pulumi.Input<string>;
    /**
     * The group type.  Can be set to `"ldap"`, `"internal"` or `"oidc"`.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ProjectMemberGroup resource.
 */
export interface ProjectMemberGroupArgs {
    groupId?: pulumi.Input<number>;
    groupName?: pulumi.Input<string>;
    ldapGroupDn?: pulumi.Input<string>;
    /**
     * The project id of the project that the entity will have access to.
     */
    projectId: pulumi.Input<string>;
    /**
     * The permissions that the entity will be granted.
     */
    role: pulumi.Input<string>;
    /**
     * The group type.  Can be set to `"ldap"`, `"internal"` or `"oidc"`.
     */
    type: pulumi.Input<string>;
}
