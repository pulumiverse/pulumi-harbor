// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ConfigAuthArgs, ConfigAuthState } from "./configAuth";
export type ConfigAuth = import("./configAuth").ConfigAuth;
export const ConfigAuth: typeof import("./configAuth").ConfigAuth = null as any;
utilities.lazyLoad(exports, ["ConfigAuth"], () => require("./configAuth"));

export { ConfigSecurityArgs, ConfigSecurityState } from "./configSecurity";
export type ConfigSecurity = import("./configSecurity").ConfigSecurity;
export const ConfigSecurity: typeof import("./configSecurity").ConfigSecurity = null as any;
utilities.lazyLoad(exports, ["ConfigSecurity"], () => require("./configSecurity"));

export { ConfigSystemArgs, ConfigSystemState } from "./configSystem";
export type ConfigSystem = import("./configSystem").ConfigSystem;
export const ConfigSystem: typeof import("./configSystem").ConfigSystem = null as any;
utilities.lazyLoad(exports, ["ConfigSystem"], () => require("./configSystem"));

export { GarbageCollectionArgs, GarbageCollectionState } from "./garbageCollection";
export type GarbageCollection = import("./garbageCollection").GarbageCollection;
export const GarbageCollection: typeof import("./garbageCollection").GarbageCollection = null as any;
utilities.lazyLoad(exports, ["GarbageCollection"], () => require("./garbageCollection"));

export { GetGroupsArgs, GetGroupsResult, GetGroupsOutputArgs } from "./getGroups";
export const getGroups: typeof import("./getGroups").getGroups = null as any;
export const getGroupsOutput: typeof import("./getGroups").getGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getGroups","getGroupsOutput"], () => require("./getGroups"));

export { GetProjectArgs, GetProjectResult, GetProjectOutputArgs } from "./getProject";
export const getProject: typeof import("./getProject").getProject = null as any;
export const getProjectOutput: typeof import("./getProject").getProjectOutput = null as any;
utilities.lazyLoad(exports, ["getProject","getProjectOutput"], () => require("./getProject"));

export { GetProjectMemberGroupsArgs, GetProjectMemberGroupsResult, GetProjectMemberGroupsOutputArgs } from "./getProjectMemberGroups";
export const getProjectMemberGroups: typeof import("./getProjectMemberGroups").getProjectMemberGroups = null as any;
export const getProjectMemberGroupsOutput: typeof import("./getProjectMemberGroups").getProjectMemberGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getProjectMemberGroups","getProjectMemberGroupsOutput"], () => require("./getProjectMemberGroups"));

export { GetProjectMemberUsersArgs, GetProjectMemberUsersResult, GetProjectMemberUsersOutputArgs } from "./getProjectMemberUsers";
export const getProjectMemberUsers: typeof import("./getProjectMemberUsers").getProjectMemberUsers = null as any;
export const getProjectMemberUsersOutput: typeof import("./getProjectMemberUsers").getProjectMemberUsersOutput = null as any;
utilities.lazyLoad(exports, ["getProjectMemberUsers","getProjectMemberUsersOutput"], () => require("./getProjectMemberUsers"));

export { GetProjectsArgs, GetProjectsResult, GetProjectsOutputArgs } from "./getProjects";
export const getProjects: typeof import("./getProjects").getProjects = null as any;
export const getProjectsOutput: typeof import("./getProjects").getProjectsOutput = null as any;
utilities.lazyLoad(exports, ["getProjects","getProjectsOutput"], () => require("./getProjects"));

export { GetRegistryArgs, GetRegistryResult, GetRegistryOutputArgs } from "./getRegistry";
export const getRegistry: typeof import("./getRegistry").getRegistry = null as any;
export const getRegistryOutput: typeof import("./getRegistry").getRegistryOutput = null as any;
utilities.lazyLoad(exports, ["getRegistry","getRegistryOutput"], () => require("./getRegistry"));

export { GetRobotAccountsArgs, GetRobotAccountsResult, GetRobotAccountsOutputArgs } from "./getRobotAccounts";
export const getRobotAccounts: typeof import("./getRobotAccounts").getRobotAccounts = null as any;
export const getRobotAccountsOutput: typeof import("./getRobotAccounts").getRobotAccountsOutput = null as any;
utilities.lazyLoad(exports, ["getRobotAccounts","getRobotAccountsOutput"], () => require("./getRobotAccounts"));

export { GetUsersArgs, GetUsersResult, GetUsersOutputArgs } from "./getUsers";
export const getUsers: typeof import("./getUsers").getUsers = null as any;
export const getUsersOutput: typeof import("./getUsers").getUsersOutput = null as any;
utilities.lazyLoad(exports, ["getUsers","getUsersOutput"], () => require("./getUsers"));

export { GroupArgs, GroupState } from "./group";
export type Group = import("./group").Group;
export const Group: typeof import("./group").Group = null as any;
utilities.lazyLoad(exports, ["Group"], () => require("./group"));

export { ImmutableTagRuleArgs, ImmutableTagRuleState } from "./immutableTagRule";
export type ImmutableTagRule = import("./immutableTagRule").ImmutableTagRule;
export const ImmutableTagRule: typeof import("./immutableTagRule").ImmutableTagRule = null as any;
utilities.lazyLoad(exports, ["ImmutableTagRule"], () => require("./immutableTagRule"));

export { InterrogationServicesArgs, InterrogationServicesState } from "./interrogationServices";
export type InterrogationServices = import("./interrogationServices").InterrogationServices;
export const InterrogationServices: typeof import("./interrogationServices").InterrogationServices = null as any;
utilities.lazyLoad(exports, ["InterrogationServices"], () => require("./interrogationServices"));

export { LabelArgs, LabelState } from "./label";
export type Label = import("./label").Label;
export const Label: typeof import("./label").Label = null as any;
utilities.lazyLoad(exports, ["Label"], () => require("./label"));

export { PreheatInstanceArgs, PreheatInstanceState } from "./preheatInstance";
export type PreheatInstance = import("./preheatInstance").PreheatInstance;
export const PreheatInstance: typeof import("./preheatInstance").PreheatInstance = null as any;
utilities.lazyLoad(exports, ["PreheatInstance"], () => require("./preheatInstance"));

export { ProjectArgs, ProjectState } from "./project";
export type Project = import("./project").Project;
export const Project: typeof import("./project").Project = null as any;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));

export { ProjectMemberGroupArgs, ProjectMemberGroupState } from "./projectMemberGroup";
export type ProjectMemberGroup = import("./projectMemberGroup").ProjectMemberGroup;
export const ProjectMemberGroup: typeof import("./projectMemberGroup").ProjectMemberGroup = null as any;
utilities.lazyLoad(exports, ["ProjectMemberGroup"], () => require("./projectMemberGroup"));

export { ProjectMemberUserArgs, ProjectMemberUserState } from "./projectMemberUser";
export type ProjectMemberUser = import("./projectMemberUser").ProjectMemberUser;
export const ProjectMemberUser: typeof import("./projectMemberUser").ProjectMemberUser = null as any;
utilities.lazyLoad(exports, ["ProjectMemberUser"], () => require("./projectMemberUser"));

export { ProjectWebhookArgs, ProjectWebhookState } from "./projectWebhook";
export type ProjectWebhook = import("./projectWebhook").ProjectWebhook;
export const ProjectWebhook: typeof import("./projectWebhook").ProjectWebhook = null as any;
utilities.lazyLoad(exports, ["ProjectWebhook"], () => require("./projectWebhook"));

export * from "./provider";
import { Provider } from "./provider";

export { PurgeAuditLogArgs, PurgeAuditLogState } from "./purgeAuditLog";
export type PurgeAuditLog = import("./purgeAuditLog").PurgeAuditLog;
export const PurgeAuditLog: typeof import("./purgeAuditLog").PurgeAuditLog = null as any;
utilities.lazyLoad(exports, ["PurgeAuditLog"], () => require("./purgeAuditLog"));

export { RegistryArgs, RegistryState } from "./registry";
export type Registry = import("./registry").Registry;
export const Registry: typeof import("./registry").Registry = null as any;
utilities.lazyLoad(exports, ["Registry"], () => require("./registry"));

export { ReplicationArgs, ReplicationState } from "./replication";
export type Replication = import("./replication").Replication;
export const Replication: typeof import("./replication").Replication = null as any;
utilities.lazyLoad(exports, ["Replication"], () => require("./replication"));

export { RetentionPolicyArgs, RetentionPolicyState } from "./retentionPolicy";
export type RetentionPolicy = import("./retentionPolicy").RetentionPolicy;
export const RetentionPolicy: typeof import("./retentionPolicy").RetentionPolicy = null as any;
utilities.lazyLoad(exports, ["RetentionPolicy"], () => require("./retentionPolicy"));

export { RobotAccountArgs, RobotAccountState } from "./robotAccount";
export type RobotAccount = import("./robotAccount").RobotAccount;
export const RobotAccount: typeof import("./robotAccount").RobotAccount = null as any;
utilities.lazyLoad(exports, ["RobotAccount"], () => require("./robotAccount"));

export { TasksArgs, TasksState } from "./tasks";
export type Tasks = import("./tasks").Tasks;
export const Tasks: typeof import("./tasks").Tasks = null as any;
utilities.lazyLoad(exports, ["Tasks"], () => require("./tasks"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "harbor:index/configAuth:ConfigAuth":
                return new ConfigAuth(name, <any>undefined, { urn })
            case "harbor:index/configSecurity:ConfigSecurity":
                return new ConfigSecurity(name, <any>undefined, { urn })
            case "harbor:index/configSystem:ConfigSystem":
                return new ConfigSystem(name, <any>undefined, { urn })
            case "harbor:index/garbageCollection:GarbageCollection":
                return new GarbageCollection(name, <any>undefined, { urn })
            case "harbor:index/group:Group":
                return new Group(name, <any>undefined, { urn })
            case "harbor:index/immutableTagRule:ImmutableTagRule":
                return new ImmutableTagRule(name, <any>undefined, { urn })
            case "harbor:index/interrogationServices:InterrogationServices":
                return new InterrogationServices(name, <any>undefined, { urn })
            case "harbor:index/label:Label":
                return new Label(name, <any>undefined, { urn })
            case "harbor:index/preheatInstance:PreheatInstance":
                return new PreheatInstance(name, <any>undefined, { urn })
            case "harbor:index/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "harbor:index/projectMemberGroup:ProjectMemberGroup":
                return new ProjectMemberGroup(name, <any>undefined, { urn })
            case "harbor:index/projectMemberUser:ProjectMemberUser":
                return new ProjectMemberUser(name, <any>undefined, { urn })
            case "harbor:index/projectWebhook:ProjectWebhook":
                return new ProjectWebhook(name, <any>undefined, { urn })
            case "harbor:index/purgeAuditLog:PurgeAuditLog":
                return new PurgeAuditLog(name, <any>undefined, { urn })
            case "harbor:index/registry:Registry":
                return new Registry(name, <any>undefined, { urn })
            case "harbor:index/replication:Replication":
                return new Replication(name, <any>undefined, { urn })
            case "harbor:index/retentionPolicy:RetentionPolicy":
                return new RetentionPolicy(name, <any>undefined, { urn })
            case "harbor:index/robotAccount:RobotAccount":
                return new RobotAccount(name, <any>undefined, { urn })
            case "harbor:index/tasks:Tasks":
                return new Tasks(name, <any>undefined, { urn })
            case "harbor:index/user:User":
                return new User(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("harbor", "index/configAuth", _module)
pulumi.runtime.registerResourceModule("harbor", "index/configSecurity", _module)
pulumi.runtime.registerResourceModule("harbor", "index/configSystem", _module)
pulumi.runtime.registerResourceModule("harbor", "index/garbageCollection", _module)
pulumi.runtime.registerResourceModule("harbor", "index/group", _module)
pulumi.runtime.registerResourceModule("harbor", "index/immutableTagRule", _module)
pulumi.runtime.registerResourceModule("harbor", "index/interrogationServices", _module)
pulumi.runtime.registerResourceModule("harbor", "index/label", _module)
pulumi.runtime.registerResourceModule("harbor", "index/preheatInstance", _module)
pulumi.runtime.registerResourceModule("harbor", "index/project", _module)
pulumi.runtime.registerResourceModule("harbor", "index/projectMemberGroup", _module)
pulumi.runtime.registerResourceModule("harbor", "index/projectMemberUser", _module)
pulumi.runtime.registerResourceModule("harbor", "index/projectWebhook", _module)
pulumi.runtime.registerResourceModule("harbor", "index/purgeAuditLog", _module)
pulumi.runtime.registerResourceModule("harbor", "index/registry", _module)
pulumi.runtime.registerResourceModule("harbor", "index/replication", _module)
pulumi.runtime.registerResourceModule("harbor", "index/retentionPolicy", _module)
pulumi.runtime.registerResourceModule("harbor", "index/robotAccount", _module)
pulumi.runtime.registerResourceModule("harbor", "index/tasks", _module)
pulumi.runtime.registerResourceModule("harbor", "index/user", _module)
pulumi.runtime.registerResourcePackage("harbor", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:harbor") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
