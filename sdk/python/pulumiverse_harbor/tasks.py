# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['TasksArgs', 'Tasks']

@pulumi.input_type
class TasksArgs:
    def __init__(__self__, *,
                 vulnerability_scan_policy: pulumi.Input[str]):
        """
        The set of arguments for constructing a Tasks resource.
        """
        TasksArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            vulnerability_scan_policy=vulnerability_scan_policy,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             vulnerability_scan_policy: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'vulnerabilityScanPolicy' in kwargs:
            vulnerability_scan_policy = kwargs['vulnerabilityScanPolicy']

        _setter("vulnerability_scan_policy", vulnerability_scan_policy)

    @property
    @pulumi.getter(name="vulnerabilityScanPolicy")
    def vulnerability_scan_policy(self) -> pulumi.Input[str]:
        return pulumi.get(self, "vulnerability_scan_policy")

    @vulnerability_scan_policy.setter
    def vulnerability_scan_policy(self, value: pulumi.Input[str]):
        pulumi.set(self, "vulnerability_scan_policy", value)


@pulumi.input_type
class _TasksState:
    def __init__(__self__, *,
                 vulnerability_scan_policy: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Tasks resources.
        """
        _TasksState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            vulnerability_scan_policy=vulnerability_scan_policy,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             vulnerability_scan_policy: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'vulnerabilityScanPolicy' in kwargs:
            vulnerability_scan_policy = kwargs['vulnerabilityScanPolicy']

        if vulnerability_scan_policy is not None:
            _setter("vulnerability_scan_policy", vulnerability_scan_policy)

    @property
    @pulumi.getter(name="vulnerabilityScanPolicy")
    def vulnerability_scan_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vulnerability_scan_policy")

    @vulnerability_scan_policy.setter
    def vulnerability_scan_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vulnerability_scan_policy", value)


class Tasks(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 vulnerability_scan_policy: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Example Usage

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TasksArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        :param str resource_name: The name of the resource.
        :param TasksArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TasksArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            TasksArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 vulnerability_scan_policy: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TasksArgs.__new__(TasksArgs)

            if vulnerability_scan_policy is None and not opts.urn:
                raise TypeError("Missing required property 'vulnerability_scan_policy'")
            __props__.__dict__["vulnerability_scan_policy"] = vulnerability_scan_policy
        super(Tasks, __self__).__init__(
            'harbor:index/tasks:Tasks',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            vulnerability_scan_policy: Optional[pulumi.Input[str]] = None) -> 'Tasks':
        """
        Get an existing Tasks resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TasksState.__new__(_TasksState)

        __props__.__dict__["vulnerability_scan_policy"] = vulnerability_scan_policy
        return Tasks(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="vulnerabilityScanPolicy")
    def vulnerability_scan_policy(self) -> pulumi.Output[str]:
        return pulumi.get(self, "vulnerability_scan_policy")

