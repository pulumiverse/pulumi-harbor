# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['GarbageCollectionArgs', 'GarbageCollection']

@pulumi.input_type
class GarbageCollectionArgs:
    def __init__(__self__, *,
                 schedule: pulumi.Input[str],
                 delete_untagged: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a GarbageCollection resource.
        """
        GarbageCollectionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            schedule=schedule,
            delete_untagged=delete_untagged,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             schedule: pulumi.Input[str],
             delete_untagged: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'deleteUntagged' in kwargs:
            delete_untagged = kwargs['deleteUntagged']

        _setter("schedule", schedule)
        if delete_untagged is not None:
            _setter("delete_untagged", delete_untagged)

    @property
    @pulumi.getter
    def schedule(self) -> pulumi.Input[str]:
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: pulumi.Input[str]):
        pulumi.set(self, "schedule", value)

    @property
    @pulumi.getter(name="deleteUntagged")
    def delete_untagged(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "delete_untagged")

    @delete_untagged.setter
    def delete_untagged(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_untagged", value)


@pulumi.input_type
class _GarbageCollectionState:
    def __init__(__self__, *,
                 delete_untagged: Optional[pulumi.Input[bool]] = None,
                 schedule: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering GarbageCollection resources.
        """
        _GarbageCollectionState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            delete_untagged=delete_untagged,
            schedule=schedule,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             delete_untagged: Optional[pulumi.Input[bool]] = None,
             schedule: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'deleteUntagged' in kwargs:
            delete_untagged = kwargs['deleteUntagged']

        if delete_untagged is not None:
            _setter("delete_untagged", delete_untagged)
        if schedule is not None:
            _setter("schedule", schedule)

    @property
    @pulumi.getter(name="deleteUntagged")
    def delete_untagged(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "delete_untagged")

    @delete_untagged.setter
    def delete_untagged(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_untagged", value)

    @property
    @pulumi.getter
    def schedule(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule", value)


class GarbageCollection(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 delete_untagged: Optional[pulumi.Input[bool]] = None,
                 schedule: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Example Usage

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: GarbageCollectionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        :param str resource_name: The name of the resource.
        :param GarbageCollectionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(GarbageCollectionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            GarbageCollectionArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 delete_untagged: Optional[pulumi.Input[bool]] = None,
                 schedule: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = GarbageCollectionArgs.__new__(GarbageCollectionArgs)

            __props__.__dict__["delete_untagged"] = delete_untagged
            if schedule is None and not opts.urn:
                raise TypeError("Missing required property 'schedule'")
            __props__.__dict__["schedule"] = schedule
        super(GarbageCollection, __self__).__init__(
            'harbor:index/garbageCollection:GarbageCollection',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            delete_untagged: Optional[pulumi.Input[bool]] = None,
            schedule: Optional[pulumi.Input[str]] = None) -> 'GarbageCollection':
        """
        Get an existing GarbageCollection resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _GarbageCollectionState.__new__(_GarbageCollectionState)

        __props__.__dict__["delete_untagged"] = delete_untagged
        __props__.__dict__["schedule"] = schedule
        return GarbageCollection(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="deleteUntagged")
    def delete_untagged(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "delete_untagged")

    @property
    @pulumi.getter
    def schedule(self) -> pulumi.Output[str]:
        return pulumi.get(self, "schedule")

