# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ImmutableTagRuleArgs', 'ImmutableTagRule']

@pulumi.input_type
class ImmutableTagRuleArgs:
    def __init__(__self__, *,
                 project_id: pulumi.Input[str],
                 disabled: Optional[pulumi.Input[bool]] = None,
                 repo_excluding: Optional[pulumi.Input[str]] = None,
                 repo_matching: Optional[pulumi.Input[str]] = None,
                 tag_excluding: Optional[pulumi.Input[str]] = None,
                 tag_matching: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ImmutableTagRule resource.
        :param pulumi.Input[bool] disabled: Specify if the rule is disable or not. Defaults to `false`
        :param pulumi.Input[str] repo_excluding: For the repositories excuding.
        :param pulumi.Input[str] repo_matching: For the repositories matching.
        :param pulumi.Input[str] tag_excluding: For the tag excuding.
        :param pulumi.Input[str] tag_matching: For the tag matching.
        """
        ImmutableTagRuleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            project_id=project_id,
            disabled=disabled,
            repo_excluding=repo_excluding,
            repo_matching=repo_matching,
            tag_excluding=tag_excluding,
            tag_matching=tag_matching,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             project_id: pulumi.Input[str],
             disabled: Optional[pulumi.Input[bool]] = None,
             repo_excluding: Optional[pulumi.Input[str]] = None,
             repo_matching: Optional[pulumi.Input[str]] = None,
             tag_excluding: Optional[pulumi.Input[str]] = None,
             tag_matching: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'projectId' in kwargs:
            project_id = kwargs['projectId']
        if 'repoExcluding' in kwargs:
            repo_excluding = kwargs['repoExcluding']
        if 'repoMatching' in kwargs:
            repo_matching = kwargs['repoMatching']
        if 'tagExcluding' in kwargs:
            tag_excluding = kwargs['tagExcluding']
        if 'tagMatching' in kwargs:
            tag_matching = kwargs['tagMatching']

        _setter("project_id", project_id)
        if disabled is not None:
            _setter("disabled", disabled)
        if repo_excluding is not None:
            _setter("repo_excluding", repo_excluding)
        if repo_matching is not None:
            _setter("repo_matching", repo_matching)
        if tag_excluding is not None:
            _setter("tag_excluding", tag_excluding)
        if tag_matching is not None:
            _setter("tag_matching", tag_matching)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify if the rule is disable or not. Defaults to `false`
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter(name="repoExcluding")
    def repo_excluding(self) -> Optional[pulumi.Input[str]]:
        """
        For the repositories excuding.
        """
        return pulumi.get(self, "repo_excluding")

    @repo_excluding.setter
    def repo_excluding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repo_excluding", value)

    @property
    @pulumi.getter(name="repoMatching")
    def repo_matching(self) -> Optional[pulumi.Input[str]]:
        """
        For the repositories matching.
        """
        return pulumi.get(self, "repo_matching")

    @repo_matching.setter
    def repo_matching(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repo_matching", value)

    @property
    @pulumi.getter(name="tagExcluding")
    def tag_excluding(self) -> Optional[pulumi.Input[str]]:
        """
        For the tag excuding.
        """
        return pulumi.get(self, "tag_excluding")

    @tag_excluding.setter
    def tag_excluding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_excluding", value)

    @property
    @pulumi.getter(name="tagMatching")
    def tag_matching(self) -> Optional[pulumi.Input[str]]:
        """
        For the tag matching.
        """
        return pulumi.get(self, "tag_matching")

    @tag_matching.setter
    def tag_matching(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_matching", value)


@pulumi.input_type
class _ImmutableTagRuleState:
    def __init__(__self__, *,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 repo_excluding: Optional[pulumi.Input[str]] = None,
                 repo_matching: Optional[pulumi.Input[str]] = None,
                 tag_excluding: Optional[pulumi.Input[str]] = None,
                 tag_matching: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ImmutableTagRule resources.
        :param pulumi.Input[bool] disabled: Specify if the rule is disable or not. Defaults to `false`
        :param pulumi.Input[str] repo_excluding: For the repositories excuding.
        :param pulumi.Input[str] repo_matching: For the repositories matching.
        :param pulumi.Input[str] tag_excluding: For the tag excuding.
        :param pulumi.Input[str] tag_matching: For the tag matching.
        """
        _ImmutableTagRuleState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            disabled=disabled,
            project_id=project_id,
            repo_excluding=repo_excluding,
            repo_matching=repo_matching,
            tag_excluding=tag_excluding,
            tag_matching=tag_matching,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             disabled: Optional[pulumi.Input[bool]] = None,
             project_id: Optional[pulumi.Input[str]] = None,
             repo_excluding: Optional[pulumi.Input[str]] = None,
             repo_matching: Optional[pulumi.Input[str]] = None,
             tag_excluding: Optional[pulumi.Input[str]] = None,
             tag_matching: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'projectId' in kwargs:
            project_id = kwargs['projectId']
        if 'repoExcluding' in kwargs:
            repo_excluding = kwargs['repoExcluding']
        if 'repoMatching' in kwargs:
            repo_matching = kwargs['repoMatching']
        if 'tagExcluding' in kwargs:
            tag_excluding = kwargs['tagExcluding']
        if 'tagMatching' in kwargs:
            tag_matching = kwargs['tagMatching']

        if disabled is not None:
            _setter("disabled", disabled)
        if project_id is not None:
            _setter("project_id", project_id)
        if repo_excluding is not None:
            _setter("repo_excluding", repo_excluding)
        if repo_matching is not None:
            _setter("repo_matching", repo_matching)
        if tag_excluding is not None:
            _setter("tag_excluding", tag_excluding)
        if tag_matching is not None:
            _setter("tag_matching", tag_matching)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify if the rule is disable or not. Defaults to `false`
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="repoExcluding")
    def repo_excluding(self) -> Optional[pulumi.Input[str]]:
        """
        For the repositories excuding.
        """
        return pulumi.get(self, "repo_excluding")

    @repo_excluding.setter
    def repo_excluding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repo_excluding", value)

    @property
    @pulumi.getter(name="repoMatching")
    def repo_matching(self) -> Optional[pulumi.Input[str]]:
        """
        For the repositories matching.
        """
        return pulumi.get(self, "repo_matching")

    @repo_matching.setter
    def repo_matching(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repo_matching", value)

    @property
    @pulumi.getter(name="tagExcluding")
    def tag_excluding(self) -> Optional[pulumi.Input[str]]:
        """
        For the tag excuding.
        """
        return pulumi.get(self, "tag_excluding")

    @tag_excluding.setter
    def tag_excluding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_excluding", value)

    @property
    @pulumi.getter(name="tagMatching")
    def tag_matching(self) -> Optional[pulumi.Input[str]]:
        """
        For the tag matching.
        """
        return pulumi.get(self, "tag_matching")

    @tag_matching.setter
    def tag_matching(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_matching", value)


class ImmutableTagRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 repo_excluding: Optional[pulumi.Input[str]] = None,
                 repo_matching: Optional[pulumi.Input[str]] = None,
                 tag_excluding: Optional[pulumi.Input[str]] = None,
                 tag_matching: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Example Usage

        ## Import

        Harbor immutable tag rule can be imported using the `project and immutabletagrule ids` eg, `<break><break>```sh<break> $ pulumi import harbor:index/immutableTagRule:ImmutableTagRule main /projects/4/immutabletagrules/25 <break>```<break><break>`

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] disabled: Specify if the rule is disable or not. Defaults to `false`
        :param pulumi.Input[str] repo_excluding: For the repositories excuding.
        :param pulumi.Input[str] repo_matching: For the repositories matching.
        :param pulumi.Input[str] tag_excluding: For the tag excuding.
        :param pulumi.Input[str] tag_matching: For the tag matching.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ImmutableTagRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ## Import

        Harbor immutable tag rule can be imported using the `project and immutabletagrule ids` eg, `<break><break>```sh<break> $ pulumi import harbor:index/immutableTagRule:ImmutableTagRule main /projects/4/immutabletagrules/25 <break>```<break><break>`

        :param str resource_name: The name of the resource.
        :param ImmutableTagRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ImmutableTagRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            ImmutableTagRuleArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 repo_excluding: Optional[pulumi.Input[str]] = None,
                 repo_matching: Optional[pulumi.Input[str]] = None,
                 tag_excluding: Optional[pulumi.Input[str]] = None,
                 tag_matching: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ImmutableTagRuleArgs.__new__(ImmutableTagRuleArgs)

            __props__.__dict__["disabled"] = disabled
            if project_id is None and not opts.urn:
                raise TypeError("Missing required property 'project_id'")
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["repo_excluding"] = repo_excluding
            __props__.__dict__["repo_matching"] = repo_matching
            __props__.__dict__["tag_excluding"] = tag_excluding
            __props__.__dict__["tag_matching"] = tag_matching
        super(ImmutableTagRule, __self__).__init__(
            'harbor:index/immutableTagRule:ImmutableTagRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            disabled: Optional[pulumi.Input[bool]] = None,
            project_id: Optional[pulumi.Input[str]] = None,
            repo_excluding: Optional[pulumi.Input[str]] = None,
            repo_matching: Optional[pulumi.Input[str]] = None,
            tag_excluding: Optional[pulumi.Input[str]] = None,
            tag_matching: Optional[pulumi.Input[str]] = None) -> 'ImmutableTagRule':
        """
        Get an existing ImmutableTagRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] disabled: Specify if the rule is disable or not. Defaults to `false`
        :param pulumi.Input[str] repo_excluding: For the repositories excuding.
        :param pulumi.Input[str] repo_matching: For the repositories matching.
        :param pulumi.Input[str] tag_excluding: For the tag excuding.
        :param pulumi.Input[str] tag_matching: For the tag matching.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ImmutableTagRuleState.__new__(_ImmutableTagRuleState)

        __props__.__dict__["disabled"] = disabled
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["repo_excluding"] = repo_excluding
        __props__.__dict__["repo_matching"] = repo_matching
        __props__.__dict__["tag_excluding"] = tag_excluding
        __props__.__dict__["tag_matching"] = tag_matching
        return ImmutableTagRule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def disabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Specify if the rule is disable or not. Defaults to `false`
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="repoExcluding")
    def repo_excluding(self) -> pulumi.Output[Optional[str]]:
        """
        For the repositories excuding.
        """
        return pulumi.get(self, "repo_excluding")

    @property
    @pulumi.getter(name="repoMatching")
    def repo_matching(self) -> pulumi.Output[Optional[str]]:
        """
        For the repositories matching.
        """
        return pulumi.get(self, "repo_matching")

    @property
    @pulumi.getter(name="tagExcluding")
    def tag_excluding(self) -> pulumi.Output[Optional[str]]:
        """
        For the tag excuding.
        """
        return pulumi.get(self, "tag_excluding")

    @property
    @pulumi.getter(name="tagMatching")
    def tag_matching(self) -> pulumi.Output[Optional[str]]:
        """
        For the tag matching.
        """
        return pulumi.get(self, "tag_matching")

