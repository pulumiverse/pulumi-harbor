# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ConfigEmailArgs', 'ConfigEmail']

@pulumi.input_type
class ConfigEmailArgs:
    def __init__(__self__, *,
                 email_from: pulumi.Input[str],
                 email_host: pulumi.Input[str],
                 email_insecure: Optional[pulumi.Input[bool]] = None,
                 email_password: Optional[pulumi.Input[str]] = None,
                 email_port: Optional[pulumi.Input[int]] = None,
                 email_ssl: Optional[pulumi.Input[bool]] = None,
                 email_username: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ConfigEmail resource.
        """
        ConfigEmailArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            email_from=email_from,
            email_host=email_host,
            email_insecure=email_insecure,
            email_password=email_password,
            email_port=email_port,
            email_ssl=email_ssl,
            email_username=email_username,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             email_from: pulumi.Input[str],
             email_host: pulumi.Input[str],
             email_insecure: Optional[pulumi.Input[bool]] = None,
             email_password: Optional[pulumi.Input[str]] = None,
             email_port: Optional[pulumi.Input[int]] = None,
             email_ssl: Optional[pulumi.Input[bool]] = None,
             email_username: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'emailFrom' in kwargs:
            email_from = kwargs['emailFrom']
        if 'emailHost' in kwargs:
            email_host = kwargs['emailHost']
        if 'emailInsecure' in kwargs:
            email_insecure = kwargs['emailInsecure']
        if 'emailPassword' in kwargs:
            email_password = kwargs['emailPassword']
        if 'emailPort' in kwargs:
            email_port = kwargs['emailPort']
        if 'emailSsl' in kwargs:
            email_ssl = kwargs['emailSsl']
        if 'emailUsername' in kwargs:
            email_username = kwargs['emailUsername']

        _setter("email_from", email_from)
        _setter("email_host", email_host)
        if email_insecure is not None:
            _setter("email_insecure", email_insecure)
        if email_password is not None:
            _setter("email_password", email_password)
        if email_port is not None:
            _setter("email_port", email_port)
        if email_ssl is not None:
            _setter("email_ssl", email_ssl)
        if email_username is not None:
            _setter("email_username", email_username)

    @property
    @pulumi.getter(name="emailFrom")
    def email_from(self) -> pulumi.Input[str]:
        return pulumi.get(self, "email_from")

    @email_from.setter
    def email_from(self, value: pulumi.Input[str]):
        pulumi.set(self, "email_from", value)

    @property
    @pulumi.getter(name="emailHost")
    def email_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "email_host")

    @email_host.setter
    def email_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "email_host", value)

    @property
    @pulumi.getter(name="emailInsecure")
    def email_insecure(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "email_insecure")

    @email_insecure.setter
    def email_insecure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "email_insecure", value)

    @property
    @pulumi.getter(name="emailPassword")
    def email_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email_password")

    @email_password.setter
    def email_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_password", value)

    @property
    @pulumi.getter(name="emailPort")
    def email_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "email_port")

    @email_port.setter
    def email_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "email_port", value)

    @property
    @pulumi.getter(name="emailSsl")
    def email_ssl(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "email_ssl")

    @email_ssl.setter
    def email_ssl(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "email_ssl", value)

    @property
    @pulumi.getter(name="emailUsername")
    def email_username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email_username")

    @email_username.setter
    def email_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_username", value)


@pulumi.input_type
class _ConfigEmailState:
    def __init__(__self__, *,
                 email_from: Optional[pulumi.Input[str]] = None,
                 email_host: Optional[pulumi.Input[str]] = None,
                 email_insecure: Optional[pulumi.Input[bool]] = None,
                 email_password: Optional[pulumi.Input[str]] = None,
                 email_port: Optional[pulumi.Input[int]] = None,
                 email_ssl: Optional[pulumi.Input[bool]] = None,
                 email_username: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ConfigEmail resources.
        """
        _ConfigEmailState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            email_from=email_from,
            email_host=email_host,
            email_insecure=email_insecure,
            email_password=email_password,
            email_port=email_port,
            email_ssl=email_ssl,
            email_username=email_username,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             email_from: Optional[pulumi.Input[str]] = None,
             email_host: Optional[pulumi.Input[str]] = None,
             email_insecure: Optional[pulumi.Input[bool]] = None,
             email_password: Optional[pulumi.Input[str]] = None,
             email_port: Optional[pulumi.Input[int]] = None,
             email_ssl: Optional[pulumi.Input[bool]] = None,
             email_username: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'emailFrom' in kwargs:
            email_from = kwargs['emailFrom']
        if 'emailHost' in kwargs:
            email_host = kwargs['emailHost']
        if 'emailInsecure' in kwargs:
            email_insecure = kwargs['emailInsecure']
        if 'emailPassword' in kwargs:
            email_password = kwargs['emailPassword']
        if 'emailPort' in kwargs:
            email_port = kwargs['emailPort']
        if 'emailSsl' in kwargs:
            email_ssl = kwargs['emailSsl']
        if 'emailUsername' in kwargs:
            email_username = kwargs['emailUsername']

        if email_from is not None:
            _setter("email_from", email_from)
        if email_host is not None:
            _setter("email_host", email_host)
        if email_insecure is not None:
            _setter("email_insecure", email_insecure)
        if email_password is not None:
            _setter("email_password", email_password)
        if email_port is not None:
            _setter("email_port", email_port)
        if email_ssl is not None:
            _setter("email_ssl", email_ssl)
        if email_username is not None:
            _setter("email_username", email_username)

    @property
    @pulumi.getter(name="emailFrom")
    def email_from(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email_from")

    @email_from.setter
    def email_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_from", value)

    @property
    @pulumi.getter(name="emailHost")
    def email_host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email_host")

    @email_host.setter
    def email_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_host", value)

    @property
    @pulumi.getter(name="emailInsecure")
    def email_insecure(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "email_insecure")

    @email_insecure.setter
    def email_insecure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "email_insecure", value)

    @property
    @pulumi.getter(name="emailPassword")
    def email_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email_password")

    @email_password.setter
    def email_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_password", value)

    @property
    @pulumi.getter(name="emailPort")
    def email_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "email_port")

    @email_port.setter
    def email_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "email_port", value)

    @property
    @pulumi.getter(name="emailSsl")
    def email_ssl(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "email_ssl")

    @email_ssl.setter
    def email_ssl(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "email_ssl", value)

    @property
    @pulumi.getter(name="emailUsername")
    def email_username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email_username")

    @email_username.setter
    def email_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_username", value)


class ConfigEmail(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 email_from: Optional[pulumi.Input[str]] = None,
                 email_host: Optional[pulumi.Input[str]] = None,
                 email_insecure: Optional[pulumi.Input[bool]] = None,
                 email_password: Optional[pulumi.Input[str]] = None,
                 email_port: Optional[pulumi.Input[int]] = None,
                 email_ssl: Optional[pulumi.Input[bool]] = None,
                 email_username: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Example Usage

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ConfigEmailArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        :param str resource_name: The name of the resource.
        :param ConfigEmailArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ConfigEmailArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            ConfigEmailArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 email_from: Optional[pulumi.Input[str]] = None,
                 email_host: Optional[pulumi.Input[str]] = None,
                 email_insecure: Optional[pulumi.Input[bool]] = None,
                 email_password: Optional[pulumi.Input[str]] = None,
                 email_port: Optional[pulumi.Input[int]] = None,
                 email_ssl: Optional[pulumi.Input[bool]] = None,
                 email_username: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ConfigEmailArgs.__new__(ConfigEmailArgs)

            if email_from is None and not opts.urn:
                raise TypeError("Missing required property 'email_from'")
            __props__.__dict__["email_from"] = email_from
            if email_host is None and not opts.urn:
                raise TypeError("Missing required property 'email_host'")
            __props__.__dict__["email_host"] = email_host
            __props__.__dict__["email_insecure"] = email_insecure
            __props__.__dict__["email_password"] = None if email_password is None else pulumi.Output.secret(email_password)
            __props__.__dict__["email_port"] = email_port
            __props__.__dict__["email_ssl"] = email_ssl
            __props__.__dict__["email_username"] = email_username
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["emailPassword"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(ConfigEmail, __self__).__init__(
            'harbor:index/configEmail:ConfigEmail',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            email_from: Optional[pulumi.Input[str]] = None,
            email_host: Optional[pulumi.Input[str]] = None,
            email_insecure: Optional[pulumi.Input[bool]] = None,
            email_password: Optional[pulumi.Input[str]] = None,
            email_port: Optional[pulumi.Input[int]] = None,
            email_ssl: Optional[pulumi.Input[bool]] = None,
            email_username: Optional[pulumi.Input[str]] = None) -> 'ConfigEmail':
        """
        Get an existing ConfigEmail resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ConfigEmailState.__new__(_ConfigEmailState)

        __props__.__dict__["email_from"] = email_from
        __props__.__dict__["email_host"] = email_host
        __props__.__dict__["email_insecure"] = email_insecure
        __props__.__dict__["email_password"] = email_password
        __props__.__dict__["email_port"] = email_port
        __props__.__dict__["email_ssl"] = email_ssl
        __props__.__dict__["email_username"] = email_username
        return ConfigEmail(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="emailFrom")
    def email_from(self) -> pulumi.Output[str]:
        return pulumi.get(self, "email_from")

    @property
    @pulumi.getter(name="emailHost")
    def email_host(self) -> pulumi.Output[str]:
        return pulumi.get(self, "email_host")

    @property
    @pulumi.getter(name="emailInsecure")
    def email_insecure(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "email_insecure")

    @property
    @pulumi.getter(name="emailPassword")
    def email_password(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "email_password")

    @property
    @pulumi.getter(name="emailPort")
    def email_port(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "email_port")

    @property
    @pulumi.getter(name="emailSsl")
    def email_ssl(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "email_ssl")

    @property
    @pulumi.getter(name="emailUsername")
    def email_username(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "email_username")

