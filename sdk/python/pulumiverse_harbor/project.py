# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ProjectArgs', 'Project']

@pulumi.input_type
class ProjectArgs:
    def __init__(__self__, *,
                 cve_allowlists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 deployment_security: Optional[pulumi.Input[str]] = None,
                 enable_content_trust: Optional[pulumi.Input[bool]] = None,
                 enable_content_trust_cosign: Optional[pulumi.Input[bool]] = None,
                 force_destroy: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 public: Optional[pulumi.Input[str]] = None,
                 registry_id: Optional[pulumi.Input[int]] = None,
                 storage_quota: Optional[pulumi.Input[int]] = None,
                 vulnerability_scanning: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a Project resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cve_allowlists: Project allowlist allows vulnerabilities in this list to be ignored in this project when pushing and pulling images. Should be in the format or `["CVE-123", "CVE-145"]` or `["CVE-123"]`
        :param pulumi.Input[str] deployment_security: Prevent deployment of images with vulnerability severity equal or higher than the specified value. Images must be scanned before this takes effect. Possible values: `critical`, `high`, `medium`, `low`, `none`. (Default: `""` - empty)
        :param pulumi.Input[bool] enable_content_trust: Enables Content Trust for project. When enabled it queries the embedded docker notary server. Can be set to `"true"` or `"false"` (Default: false)
        :param pulumi.Input[bool] enable_content_trust_cosign: Enables Content Trust Cosign for project. When enabled it queries Cosign. Can be set to `"true"` or `"false"` (Default: false)
        :param pulumi.Input[bool] force_destroy: A boolean that indicates all repositories should be deleted from the project so that the project can be destroyed without error. These repositories are *not* recoverable.
        :param pulumi.Input[str] name: The name of the project that will be created in harbor.
        :param pulumi.Input[str] public: The project will be public accessibility. Can be set to `"true"` or `"false"` (Default: false)
        :param pulumi.Input[int] registry_id: To enabled project as Proxy Cache
        :param pulumi.Input[int] storage_quota: The storage quota of the project in GB's
        :param pulumi.Input[bool] vulnerability_scanning: Images will be scanned for vulnerabilities when push to harbor. Can be set to `"true"` or `"false"` (Default: true)
        """
        ProjectArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cve_allowlists=cve_allowlists,
            deployment_security=deployment_security,
            enable_content_trust=enable_content_trust,
            enable_content_trust_cosign=enable_content_trust_cosign,
            force_destroy=force_destroy,
            name=name,
            public=public,
            registry_id=registry_id,
            storage_quota=storage_quota,
            vulnerability_scanning=vulnerability_scanning,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cve_allowlists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             deployment_security: Optional[pulumi.Input[str]] = None,
             enable_content_trust: Optional[pulumi.Input[bool]] = None,
             enable_content_trust_cosign: Optional[pulumi.Input[bool]] = None,
             force_destroy: Optional[pulumi.Input[bool]] = None,
             name: Optional[pulumi.Input[str]] = None,
             public: Optional[pulumi.Input[str]] = None,
             registry_id: Optional[pulumi.Input[int]] = None,
             storage_quota: Optional[pulumi.Input[int]] = None,
             vulnerability_scanning: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cveAllowlists' in kwargs:
            cve_allowlists = kwargs['cveAllowlists']
        if 'deploymentSecurity' in kwargs:
            deployment_security = kwargs['deploymentSecurity']
        if 'enableContentTrust' in kwargs:
            enable_content_trust = kwargs['enableContentTrust']
        if 'enableContentTrustCosign' in kwargs:
            enable_content_trust_cosign = kwargs['enableContentTrustCosign']
        if 'forceDestroy' in kwargs:
            force_destroy = kwargs['forceDestroy']
        if 'registryId' in kwargs:
            registry_id = kwargs['registryId']
        if 'storageQuota' in kwargs:
            storage_quota = kwargs['storageQuota']
        if 'vulnerabilityScanning' in kwargs:
            vulnerability_scanning = kwargs['vulnerabilityScanning']

        if cve_allowlists is not None:
            _setter("cve_allowlists", cve_allowlists)
        if deployment_security is not None:
            _setter("deployment_security", deployment_security)
        if enable_content_trust is not None:
            _setter("enable_content_trust", enable_content_trust)
        if enable_content_trust_cosign is not None:
            _setter("enable_content_trust_cosign", enable_content_trust_cosign)
        if force_destroy is not None:
            _setter("force_destroy", force_destroy)
        if name is not None:
            _setter("name", name)
        if public is not None:
            _setter("public", public)
        if registry_id is not None:
            _setter("registry_id", registry_id)
        if storage_quota is not None:
            _setter("storage_quota", storage_quota)
        if vulnerability_scanning is not None:
            _setter("vulnerability_scanning", vulnerability_scanning)

    @property
    @pulumi.getter(name="cveAllowlists")
    def cve_allowlists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Project allowlist allows vulnerabilities in this list to be ignored in this project when pushing and pulling images. Should be in the format or `["CVE-123", "CVE-145"]` or `["CVE-123"]`
        """
        return pulumi.get(self, "cve_allowlists")

    @cve_allowlists.setter
    def cve_allowlists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cve_allowlists", value)

    @property
    @pulumi.getter(name="deploymentSecurity")
    def deployment_security(self) -> Optional[pulumi.Input[str]]:
        """
        Prevent deployment of images with vulnerability severity equal or higher than the specified value. Images must be scanned before this takes effect. Possible values: `critical`, `high`, `medium`, `low`, `none`. (Default: `""` - empty)
        """
        return pulumi.get(self, "deployment_security")

    @deployment_security.setter
    def deployment_security(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deployment_security", value)

    @property
    @pulumi.getter(name="enableContentTrust")
    def enable_content_trust(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables Content Trust for project. When enabled it queries the embedded docker notary server. Can be set to `"true"` or `"false"` (Default: false)
        """
        return pulumi.get(self, "enable_content_trust")

    @enable_content_trust.setter
    def enable_content_trust(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_content_trust", value)

    @property
    @pulumi.getter(name="enableContentTrustCosign")
    def enable_content_trust_cosign(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables Content Trust Cosign for project. When enabled it queries Cosign. Can be set to `"true"` or `"false"` (Default: false)
        """
        return pulumi.get(self, "enable_content_trust_cosign")

    @enable_content_trust_cosign.setter
    def enable_content_trust_cosign(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_content_trust_cosign", value)

    @property
    @pulumi.getter(name="forceDestroy")
    def force_destroy(self) -> Optional[pulumi.Input[bool]]:
        """
        A boolean that indicates all repositories should be deleted from the project so that the project can be destroyed without error. These repositories are *not* recoverable.
        """
        return pulumi.get(self, "force_destroy")

    @force_destroy.setter
    def force_destroy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_destroy", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the project that will be created in harbor.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def public(self) -> Optional[pulumi.Input[str]]:
        """
        The project will be public accessibility. Can be set to `"true"` or `"false"` (Default: false)
        """
        return pulumi.get(self, "public")

    @public.setter
    def public(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public", value)

    @property
    @pulumi.getter(name="registryId")
    def registry_id(self) -> Optional[pulumi.Input[int]]:
        """
        To enabled project as Proxy Cache
        """
        return pulumi.get(self, "registry_id")

    @registry_id.setter
    def registry_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "registry_id", value)

    @property
    @pulumi.getter(name="storageQuota")
    def storage_quota(self) -> Optional[pulumi.Input[int]]:
        """
        The storage quota of the project in GB's
        """
        return pulumi.get(self, "storage_quota")

    @storage_quota.setter
    def storage_quota(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "storage_quota", value)

    @property
    @pulumi.getter(name="vulnerabilityScanning")
    def vulnerability_scanning(self) -> Optional[pulumi.Input[bool]]:
        """
        Images will be scanned for vulnerabilities when push to harbor. Can be set to `"true"` or `"false"` (Default: true)
        """
        return pulumi.get(self, "vulnerability_scanning")

    @vulnerability_scanning.setter
    def vulnerability_scanning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "vulnerability_scanning", value)


@pulumi.input_type
class _ProjectState:
    def __init__(__self__, *,
                 cve_allowlists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 deployment_security: Optional[pulumi.Input[str]] = None,
                 enable_content_trust: Optional[pulumi.Input[bool]] = None,
                 enable_content_trust_cosign: Optional[pulumi.Input[bool]] = None,
                 force_destroy: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 public: Optional[pulumi.Input[str]] = None,
                 registry_id: Optional[pulumi.Input[int]] = None,
                 storage_quota: Optional[pulumi.Input[int]] = None,
                 vulnerability_scanning: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering Project resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cve_allowlists: Project allowlist allows vulnerabilities in this list to be ignored in this project when pushing and pulling images. Should be in the format or `["CVE-123", "CVE-145"]` or `["CVE-123"]`
        :param pulumi.Input[str] deployment_security: Prevent deployment of images with vulnerability severity equal or higher than the specified value. Images must be scanned before this takes effect. Possible values: `critical`, `high`, `medium`, `low`, `none`. (Default: `""` - empty)
        :param pulumi.Input[bool] enable_content_trust: Enables Content Trust for project. When enabled it queries the embedded docker notary server. Can be set to `"true"` or `"false"` (Default: false)
        :param pulumi.Input[bool] enable_content_trust_cosign: Enables Content Trust Cosign for project. When enabled it queries Cosign. Can be set to `"true"` or `"false"` (Default: false)
        :param pulumi.Input[bool] force_destroy: A boolean that indicates all repositories should be deleted from the project so that the project can be destroyed without error. These repositories are *not* recoverable.
        :param pulumi.Input[str] name: The name of the project that will be created in harbor.
        :param pulumi.Input[int] project_id: The id of the project with harbor.
        :param pulumi.Input[str] public: The project will be public accessibility. Can be set to `"true"` or `"false"` (Default: false)
        :param pulumi.Input[int] registry_id: To enabled project as Proxy Cache
        :param pulumi.Input[int] storage_quota: The storage quota of the project in GB's
        :param pulumi.Input[bool] vulnerability_scanning: Images will be scanned for vulnerabilities when push to harbor. Can be set to `"true"` or `"false"` (Default: true)
        """
        _ProjectState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cve_allowlists=cve_allowlists,
            deployment_security=deployment_security,
            enable_content_trust=enable_content_trust,
            enable_content_trust_cosign=enable_content_trust_cosign,
            force_destroy=force_destroy,
            name=name,
            project_id=project_id,
            public=public,
            registry_id=registry_id,
            storage_quota=storage_quota,
            vulnerability_scanning=vulnerability_scanning,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cve_allowlists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             deployment_security: Optional[pulumi.Input[str]] = None,
             enable_content_trust: Optional[pulumi.Input[bool]] = None,
             enable_content_trust_cosign: Optional[pulumi.Input[bool]] = None,
             force_destroy: Optional[pulumi.Input[bool]] = None,
             name: Optional[pulumi.Input[str]] = None,
             project_id: Optional[pulumi.Input[int]] = None,
             public: Optional[pulumi.Input[str]] = None,
             registry_id: Optional[pulumi.Input[int]] = None,
             storage_quota: Optional[pulumi.Input[int]] = None,
             vulnerability_scanning: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cveAllowlists' in kwargs:
            cve_allowlists = kwargs['cveAllowlists']
        if 'deploymentSecurity' in kwargs:
            deployment_security = kwargs['deploymentSecurity']
        if 'enableContentTrust' in kwargs:
            enable_content_trust = kwargs['enableContentTrust']
        if 'enableContentTrustCosign' in kwargs:
            enable_content_trust_cosign = kwargs['enableContentTrustCosign']
        if 'forceDestroy' in kwargs:
            force_destroy = kwargs['forceDestroy']
        if 'projectId' in kwargs:
            project_id = kwargs['projectId']
        if 'registryId' in kwargs:
            registry_id = kwargs['registryId']
        if 'storageQuota' in kwargs:
            storage_quota = kwargs['storageQuota']
        if 'vulnerabilityScanning' in kwargs:
            vulnerability_scanning = kwargs['vulnerabilityScanning']

        if cve_allowlists is not None:
            _setter("cve_allowlists", cve_allowlists)
        if deployment_security is not None:
            _setter("deployment_security", deployment_security)
        if enable_content_trust is not None:
            _setter("enable_content_trust", enable_content_trust)
        if enable_content_trust_cosign is not None:
            _setter("enable_content_trust_cosign", enable_content_trust_cosign)
        if force_destroy is not None:
            _setter("force_destroy", force_destroy)
        if name is not None:
            _setter("name", name)
        if project_id is not None:
            _setter("project_id", project_id)
        if public is not None:
            _setter("public", public)
        if registry_id is not None:
            _setter("registry_id", registry_id)
        if storage_quota is not None:
            _setter("storage_quota", storage_quota)
        if vulnerability_scanning is not None:
            _setter("vulnerability_scanning", vulnerability_scanning)

    @property
    @pulumi.getter(name="cveAllowlists")
    def cve_allowlists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Project allowlist allows vulnerabilities in this list to be ignored in this project when pushing and pulling images. Should be in the format or `["CVE-123", "CVE-145"]` or `["CVE-123"]`
        """
        return pulumi.get(self, "cve_allowlists")

    @cve_allowlists.setter
    def cve_allowlists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cve_allowlists", value)

    @property
    @pulumi.getter(name="deploymentSecurity")
    def deployment_security(self) -> Optional[pulumi.Input[str]]:
        """
        Prevent deployment of images with vulnerability severity equal or higher than the specified value. Images must be scanned before this takes effect. Possible values: `critical`, `high`, `medium`, `low`, `none`. (Default: `""` - empty)
        """
        return pulumi.get(self, "deployment_security")

    @deployment_security.setter
    def deployment_security(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deployment_security", value)

    @property
    @pulumi.getter(name="enableContentTrust")
    def enable_content_trust(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables Content Trust for project. When enabled it queries the embedded docker notary server. Can be set to `"true"` or `"false"` (Default: false)
        """
        return pulumi.get(self, "enable_content_trust")

    @enable_content_trust.setter
    def enable_content_trust(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_content_trust", value)

    @property
    @pulumi.getter(name="enableContentTrustCosign")
    def enable_content_trust_cosign(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables Content Trust Cosign for project. When enabled it queries Cosign. Can be set to `"true"` or `"false"` (Default: false)
        """
        return pulumi.get(self, "enable_content_trust_cosign")

    @enable_content_trust_cosign.setter
    def enable_content_trust_cosign(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_content_trust_cosign", value)

    @property
    @pulumi.getter(name="forceDestroy")
    def force_destroy(self) -> Optional[pulumi.Input[bool]]:
        """
        A boolean that indicates all repositories should be deleted from the project so that the project can be destroyed without error. These repositories are *not* recoverable.
        """
        return pulumi.get(self, "force_destroy")

    @force_destroy.setter
    def force_destroy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_destroy", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the project that will be created in harbor.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[int]]:
        """
        The id of the project with harbor.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter
    def public(self) -> Optional[pulumi.Input[str]]:
        """
        The project will be public accessibility. Can be set to `"true"` or `"false"` (Default: false)
        """
        return pulumi.get(self, "public")

    @public.setter
    def public(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public", value)

    @property
    @pulumi.getter(name="registryId")
    def registry_id(self) -> Optional[pulumi.Input[int]]:
        """
        To enabled project as Proxy Cache
        """
        return pulumi.get(self, "registry_id")

    @registry_id.setter
    def registry_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "registry_id", value)

    @property
    @pulumi.getter(name="storageQuota")
    def storage_quota(self) -> Optional[pulumi.Input[int]]:
        """
        The storage quota of the project in GB's
        """
        return pulumi.get(self, "storage_quota")

    @storage_quota.setter
    def storage_quota(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "storage_quota", value)

    @property
    @pulumi.getter(name="vulnerabilityScanning")
    def vulnerability_scanning(self) -> Optional[pulumi.Input[bool]]:
        """
        Images will be scanned for vulnerabilities when push to harbor. Can be set to `"true"` or `"false"` (Default: true)
        """
        return pulumi.get(self, "vulnerability_scanning")

    @vulnerability_scanning.setter
    def vulnerability_scanning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "vulnerability_scanning", value)


class Project(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cve_allowlists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 deployment_security: Optional[pulumi.Input[str]] = None,
                 enable_content_trust: Optional[pulumi.Input[bool]] = None,
                 enable_content_trust_cosign: Optional[pulumi.Input[bool]] = None,
                 force_destroy: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 public: Optional[pulumi.Input[str]] = None,
                 registry_id: Optional[pulumi.Input[int]] = None,
                 storage_quota: Optional[pulumi.Input[int]] = None,
                 vulnerability_scanning: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        ## Example Usage

        ## Harbor project example as proxy cache

        ## Import

        Harbor project can be imported using the `project id` eg, `<break><break>```sh<break> $ pulumi import harbor:index/project:Project main /projects/1 <break>```<break><break>`

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cve_allowlists: Project allowlist allows vulnerabilities in this list to be ignored in this project when pushing and pulling images. Should be in the format or `["CVE-123", "CVE-145"]` or `["CVE-123"]`
        :param pulumi.Input[str] deployment_security: Prevent deployment of images with vulnerability severity equal or higher than the specified value. Images must be scanned before this takes effect. Possible values: `critical`, `high`, `medium`, `low`, `none`. (Default: `""` - empty)
        :param pulumi.Input[bool] enable_content_trust: Enables Content Trust for project. When enabled it queries the embedded docker notary server. Can be set to `"true"` or `"false"` (Default: false)
        :param pulumi.Input[bool] enable_content_trust_cosign: Enables Content Trust Cosign for project. When enabled it queries Cosign. Can be set to `"true"` or `"false"` (Default: false)
        :param pulumi.Input[bool] force_destroy: A boolean that indicates all repositories should be deleted from the project so that the project can be destroyed without error. These repositories are *not* recoverable.
        :param pulumi.Input[str] name: The name of the project that will be created in harbor.
        :param pulumi.Input[str] public: The project will be public accessibility. Can be set to `"true"` or `"false"` (Default: false)
        :param pulumi.Input[int] registry_id: To enabled project as Proxy Cache
        :param pulumi.Input[int] storage_quota: The storage quota of the project in GB's
        :param pulumi.Input[bool] vulnerability_scanning: Images will be scanned for vulnerabilities when push to harbor. Can be set to `"true"` or `"false"` (Default: true)
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ProjectArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ## Harbor project example as proxy cache

        ## Import

        Harbor project can be imported using the `project id` eg, `<break><break>```sh<break> $ pulumi import harbor:index/project:Project main /projects/1 <break>```<break><break>`

        :param str resource_name: The name of the resource.
        :param ProjectArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProjectArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            ProjectArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cve_allowlists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 deployment_security: Optional[pulumi.Input[str]] = None,
                 enable_content_trust: Optional[pulumi.Input[bool]] = None,
                 enable_content_trust_cosign: Optional[pulumi.Input[bool]] = None,
                 force_destroy: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 public: Optional[pulumi.Input[str]] = None,
                 registry_id: Optional[pulumi.Input[int]] = None,
                 storage_quota: Optional[pulumi.Input[int]] = None,
                 vulnerability_scanning: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProjectArgs.__new__(ProjectArgs)

            __props__.__dict__["cve_allowlists"] = cve_allowlists
            __props__.__dict__["deployment_security"] = deployment_security
            __props__.__dict__["enable_content_trust"] = enable_content_trust
            __props__.__dict__["enable_content_trust_cosign"] = enable_content_trust_cosign
            __props__.__dict__["force_destroy"] = force_destroy
            __props__.__dict__["name"] = name
            __props__.__dict__["public"] = public
            __props__.__dict__["registry_id"] = registry_id
            __props__.__dict__["storage_quota"] = storage_quota
            __props__.__dict__["vulnerability_scanning"] = vulnerability_scanning
            __props__.__dict__["project_id"] = None
        super(Project, __self__).__init__(
            'harbor:index/project:Project',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cve_allowlists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            deployment_security: Optional[pulumi.Input[str]] = None,
            enable_content_trust: Optional[pulumi.Input[bool]] = None,
            enable_content_trust_cosign: Optional[pulumi.Input[bool]] = None,
            force_destroy: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            project_id: Optional[pulumi.Input[int]] = None,
            public: Optional[pulumi.Input[str]] = None,
            registry_id: Optional[pulumi.Input[int]] = None,
            storage_quota: Optional[pulumi.Input[int]] = None,
            vulnerability_scanning: Optional[pulumi.Input[bool]] = None) -> 'Project':
        """
        Get an existing Project resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cve_allowlists: Project allowlist allows vulnerabilities in this list to be ignored in this project when pushing and pulling images. Should be in the format or `["CVE-123", "CVE-145"]` or `["CVE-123"]`
        :param pulumi.Input[str] deployment_security: Prevent deployment of images with vulnerability severity equal or higher than the specified value. Images must be scanned before this takes effect. Possible values: `critical`, `high`, `medium`, `low`, `none`. (Default: `""` - empty)
        :param pulumi.Input[bool] enable_content_trust: Enables Content Trust for project. When enabled it queries the embedded docker notary server. Can be set to `"true"` or `"false"` (Default: false)
        :param pulumi.Input[bool] enable_content_trust_cosign: Enables Content Trust Cosign for project. When enabled it queries Cosign. Can be set to `"true"` or `"false"` (Default: false)
        :param pulumi.Input[bool] force_destroy: A boolean that indicates all repositories should be deleted from the project so that the project can be destroyed without error. These repositories are *not* recoverable.
        :param pulumi.Input[str] name: The name of the project that will be created in harbor.
        :param pulumi.Input[int] project_id: The id of the project with harbor.
        :param pulumi.Input[str] public: The project will be public accessibility. Can be set to `"true"` or `"false"` (Default: false)
        :param pulumi.Input[int] registry_id: To enabled project as Proxy Cache
        :param pulumi.Input[int] storage_quota: The storage quota of the project in GB's
        :param pulumi.Input[bool] vulnerability_scanning: Images will be scanned for vulnerabilities when push to harbor. Can be set to `"true"` or `"false"` (Default: true)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ProjectState.__new__(_ProjectState)

        __props__.__dict__["cve_allowlists"] = cve_allowlists
        __props__.__dict__["deployment_security"] = deployment_security
        __props__.__dict__["enable_content_trust"] = enable_content_trust
        __props__.__dict__["enable_content_trust_cosign"] = enable_content_trust_cosign
        __props__.__dict__["force_destroy"] = force_destroy
        __props__.__dict__["name"] = name
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["public"] = public
        __props__.__dict__["registry_id"] = registry_id
        __props__.__dict__["storage_quota"] = storage_quota
        __props__.__dict__["vulnerability_scanning"] = vulnerability_scanning
        return Project(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="cveAllowlists")
    def cve_allowlists(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Project allowlist allows vulnerabilities in this list to be ignored in this project when pushing and pulling images. Should be in the format or `["CVE-123", "CVE-145"]` or `["CVE-123"]`
        """
        return pulumi.get(self, "cve_allowlists")

    @property
    @pulumi.getter(name="deploymentSecurity")
    def deployment_security(self) -> pulumi.Output[Optional[str]]:
        """
        Prevent deployment of images with vulnerability severity equal or higher than the specified value. Images must be scanned before this takes effect. Possible values: `critical`, `high`, `medium`, `low`, `none`. (Default: `""` - empty)
        """
        return pulumi.get(self, "deployment_security")

    @property
    @pulumi.getter(name="enableContentTrust")
    def enable_content_trust(self) -> pulumi.Output[Optional[bool]]:
        """
        Enables Content Trust for project. When enabled it queries the embedded docker notary server. Can be set to `"true"` or `"false"` (Default: false)
        """
        return pulumi.get(self, "enable_content_trust")

    @property
    @pulumi.getter(name="enableContentTrustCosign")
    def enable_content_trust_cosign(self) -> pulumi.Output[Optional[bool]]:
        """
        Enables Content Trust Cosign for project. When enabled it queries Cosign. Can be set to `"true"` or `"false"` (Default: false)
        """
        return pulumi.get(self, "enable_content_trust_cosign")

    @property
    @pulumi.getter(name="forceDestroy")
    def force_destroy(self) -> pulumi.Output[Optional[bool]]:
        """
        A boolean that indicates all repositories should be deleted from the project so that the project can be destroyed without error. These repositories are *not* recoverable.
        """
        return pulumi.get(self, "force_destroy")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the project that will be created in harbor.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[int]:
        """
        The id of the project with harbor.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def public(self) -> pulumi.Output[Optional[str]]:
        """
        The project will be public accessibility. Can be set to `"true"` or `"false"` (Default: false)
        """
        return pulumi.get(self, "public")

    @property
    @pulumi.getter(name="registryId")
    def registry_id(self) -> pulumi.Output[int]:
        """
        To enabled project as Proxy Cache
        """
        return pulumi.get(self, "registry_id")

    @property
    @pulumi.getter(name="storageQuota")
    def storage_quota(self) -> pulumi.Output[Optional[int]]:
        """
        The storage quota of the project in GB's
        """
        return pulumi.get(self, "storage_quota")

    @property
    @pulumi.getter(name="vulnerabilityScanning")
    def vulnerability_scanning(self) -> pulumi.Output[Optional[bool]]:
        """
        Images will be scanned for vulnerabilities when push to harbor. Can be set to `"true"` or `"false"` (Default: true)
        """
        return pulumi.get(self, "vulnerability_scanning")

