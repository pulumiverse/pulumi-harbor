# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetProjectsResult',
    'AwaitableGetProjectsResult',
    'get_projects',
    'get_projects_output',
]

@pulumi.output_type
class GetProjectsResult:
    """
    A collection of values returned by getProjects.
    """
    def __init__(__self__, id=None, name=None, projects=None, public=None, type=None, vulnerability_scanning=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if projects and not isinstance(projects, list):
            raise TypeError("Expected argument 'projects' to be a list")
        pulumi.set(__self__, "projects", projects)
        if public and not isinstance(public, bool):
            raise TypeError("Expected argument 'public' to be a bool")
        pulumi.set(__self__, "public", public)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if vulnerability_scanning and not isinstance(vulnerability_scanning, bool):
            raise TypeError("Expected argument 'vulnerability_scanning' to be a bool")
        pulumi.set(__self__, "vulnerability_scanning", vulnerability_scanning)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        The name of the project.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def projects(self) -> Sequence['outputs.GetProjectsProjectResult']:
        return pulumi.get(self, "projects")

    @property
    @pulumi.getter
    def public(self) -> Optional[builtins.bool]:
        """
        If the project has public accessibility.
        """
        return pulumi.get(self, "public")

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        """
        The type of the project : Project or ProxyCache.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vulnerabilityScanning")
    def vulnerability_scanning(self) -> Optional[builtins.bool]:
        """
        If the images will be scanned for vulnerabilities when push to harbor.
        """
        return pulumi.get(self, "vulnerability_scanning")


class AwaitableGetProjectsResult(GetProjectsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetProjectsResult(
            id=self.id,
            name=self.name,
            projects=self.projects,
            public=self.public,
            type=self.type,
            vulnerability_scanning=self.vulnerability_scanning)


def get_projects(name: Optional[builtins.str] = None,
                 public: Optional[builtins.bool] = None,
                 type: Optional[builtins.str] = None,
                 vulnerability_scanning: Optional[builtins.bool] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetProjectsResult:
    """
    ## Example Usage


    :param builtins.str name: The name of the project.
    :param builtins.bool public: If the project has public accessibility.
    :param builtins.str type: The type of the project : Project or ProxyCache.
    :param builtins.bool vulnerability_scanning: If the images will be scanned for vulnerabilities when push to harbor.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['public'] = public
    __args__['type'] = type
    __args__['vulnerabilityScanning'] = vulnerability_scanning
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('harbor:index/getProjects:getProjects', __args__, opts=opts, typ=GetProjectsResult).value

    return AwaitableGetProjectsResult(
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        projects=pulumi.get(__ret__, 'projects'),
        public=pulumi.get(__ret__, 'public'),
        type=pulumi.get(__ret__, 'type'),
        vulnerability_scanning=pulumi.get(__ret__, 'vulnerability_scanning'))
def get_projects_output(name: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                        public: Optional[pulumi.Input[Optional[builtins.bool]]] = None,
                        type: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                        vulnerability_scanning: Optional[pulumi.Input[Optional[builtins.bool]]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetProjectsResult]:
    """
    ## Example Usage


    :param builtins.str name: The name of the project.
    :param builtins.bool public: If the project has public accessibility.
    :param builtins.str type: The type of the project : Project or ProxyCache.
    :param builtins.bool vulnerability_scanning: If the images will be scanned for vulnerabilities when push to harbor.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['public'] = public
    __args__['type'] = type
    __args__['vulnerabilityScanning'] = vulnerability_scanning
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('harbor:index/getProjects:getProjects', __args__, opts=opts, typ=GetProjectsResult)
    return __ret__.apply(lambda __response__: GetProjectsResult(
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        projects=pulumi.get(__response__, 'projects'),
        public=pulumi.get(__response__, 'public'),
        type=pulumi.get(__response__, 'type'),
        vulnerability_scanning=pulumi.get(__response__, 'vulnerability_scanning')))
