# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ConfigAuthArgs', 'ConfigAuth']

@pulumi.input_type
class ConfigAuthArgs:
    def __init__(__self__, *,
                 auth_mode: pulumi.Input[str],
                 ldap_base_dn: Optional[pulumi.Input[str]] = None,
                 ldap_filter: Optional[pulumi.Input[str]] = None,
                 ldap_group_admin_dn: Optional[pulumi.Input[str]] = None,
                 ldap_group_base_dn: Optional[pulumi.Input[str]] = None,
                 ldap_group_filter: Optional[pulumi.Input[str]] = None,
                 ldap_group_gid: Optional[pulumi.Input[str]] = None,
                 ldap_group_membership: Optional[pulumi.Input[str]] = None,
                 ldap_group_scope: Optional[pulumi.Input[str]] = None,
                 ldap_group_uid: Optional[pulumi.Input[str]] = None,
                 ldap_scope: Optional[pulumi.Input[str]] = None,
                 ldap_search_dn: Optional[pulumi.Input[str]] = None,
                 ldap_search_password: Optional[pulumi.Input[str]] = None,
                 ldap_uid: Optional[pulumi.Input[str]] = None,
                 ldap_url: Optional[pulumi.Input[str]] = None,
                 ldap_verify_cert: Optional[pulumi.Input[bool]] = None,
                 oidc_admin_group: Optional[pulumi.Input[str]] = None,
                 oidc_auto_onboard: Optional[pulumi.Input[bool]] = None,
                 oidc_client_id: Optional[pulumi.Input[str]] = None,
                 oidc_client_secret: Optional[pulumi.Input[str]] = None,
                 oidc_endpoint: Optional[pulumi.Input[str]] = None,
                 oidc_group_filter: Optional[pulumi.Input[str]] = None,
                 oidc_groups_claim: Optional[pulumi.Input[str]] = None,
                 oidc_name: Optional[pulumi.Input[str]] = None,
                 oidc_scope: Optional[pulumi.Input[str]] = None,
                 oidc_user_claim: Optional[pulumi.Input[str]] = None,
                 oidc_verify_cert: Optional[pulumi.Input[bool]] = None,
                 primary_auth_mode: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a ConfigAuth resource.
        """
        ConfigAuthArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            auth_mode=auth_mode,
            ldap_base_dn=ldap_base_dn,
            ldap_filter=ldap_filter,
            ldap_group_admin_dn=ldap_group_admin_dn,
            ldap_group_base_dn=ldap_group_base_dn,
            ldap_group_filter=ldap_group_filter,
            ldap_group_gid=ldap_group_gid,
            ldap_group_membership=ldap_group_membership,
            ldap_group_scope=ldap_group_scope,
            ldap_group_uid=ldap_group_uid,
            ldap_scope=ldap_scope,
            ldap_search_dn=ldap_search_dn,
            ldap_search_password=ldap_search_password,
            ldap_uid=ldap_uid,
            ldap_url=ldap_url,
            ldap_verify_cert=ldap_verify_cert,
            oidc_admin_group=oidc_admin_group,
            oidc_auto_onboard=oidc_auto_onboard,
            oidc_client_id=oidc_client_id,
            oidc_client_secret=oidc_client_secret,
            oidc_endpoint=oidc_endpoint,
            oidc_group_filter=oidc_group_filter,
            oidc_groups_claim=oidc_groups_claim,
            oidc_name=oidc_name,
            oidc_scope=oidc_scope,
            oidc_user_claim=oidc_user_claim,
            oidc_verify_cert=oidc_verify_cert,
            primary_auth_mode=primary_auth_mode,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             auth_mode: pulumi.Input[str],
             ldap_base_dn: Optional[pulumi.Input[str]] = None,
             ldap_filter: Optional[pulumi.Input[str]] = None,
             ldap_group_admin_dn: Optional[pulumi.Input[str]] = None,
             ldap_group_base_dn: Optional[pulumi.Input[str]] = None,
             ldap_group_filter: Optional[pulumi.Input[str]] = None,
             ldap_group_gid: Optional[pulumi.Input[str]] = None,
             ldap_group_membership: Optional[pulumi.Input[str]] = None,
             ldap_group_scope: Optional[pulumi.Input[str]] = None,
             ldap_group_uid: Optional[pulumi.Input[str]] = None,
             ldap_scope: Optional[pulumi.Input[str]] = None,
             ldap_search_dn: Optional[pulumi.Input[str]] = None,
             ldap_search_password: Optional[pulumi.Input[str]] = None,
             ldap_uid: Optional[pulumi.Input[str]] = None,
             ldap_url: Optional[pulumi.Input[str]] = None,
             ldap_verify_cert: Optional[pulumi.Input[bool]] = None,
             oidc_admin_group: Optional[pulumi.Input[str]] = None,
             oidc_auto_onboard: Optional[pulumi.Input[bool]] = None,
             oidc_client_id: Optional[pulumi.Input[str]] = None,
             oidc_client_secret: Optional[pulumi.Input[str]] = None,
             oidc_endpoint: Optional[pulumi.Input[str]] = None,
             oidc_group_filter: Optional[pulumi.Input[str]] = None,
             oidc_groups_claim: Optional[pulumi.Input[str]] = None,
             oidc_name: Optional[pulumi.Input[str]] = None,
             oidc_scope: Optional[pulumi.Input[str]] = None,
             oidc_user_claim: Optional[pulumi.Input[str]] = None,
             oidc_verify_cert: Optional[pulumi.Input[bool]] = None,
             primary_auth_mode: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'authMode' in kwargs:
            auth_mode = kwargs['authMode']
        if 'ldapBaseDn' in kwargs:
            ldap_base_dn = kwargs['ldapBaseDn']
        if 'ldapFilter' in kwargs:
            ldap_filter = kwargs['ldapFilter']
        if 'ldapGroupAdminDn' in kwargs:
            ldap_group_admin_dn = kwargs['ldapGroupAdminDn']
        if 'ldapGroupBaseDn' in kwargs:
            ldap_group_base_dn = kwargs['ldapGroupBaseDn']
        if 'ldapGroupFilter' in kwargs:
            ldap_group_filter = kwargs['ldapGroupFilter']
        if 'ldapGroupGid' in kwargs:
            ldap_group_gid = kwargs['ldapGroupGid']
        if 'ldapGroupMembership' in kwargs:
            ldap_group_membership = kwargs['ldapGroupMembership']
        if 'ldapGroupScope' in kwargs:
            ldap_group_scope = kwargs['ldapGroupScope']
        if 'ldapGroupUid' in kwargs:
            ldap_group_uid = kwargs['ldapGroupUid']
        if 'ldapScope' in kwargs:
            ldap_scope = kwargs['ldapScope']
        if 'ldapSearchDn' in kwargs:
            ldap_search_dn = kwargs['ldapSearchDn']
        if 'ldapSearchPassword' in kwargs:
            ldap_search_password = kwargs['ldapSearchPassword']
        if 'ldapUid' in kwargs:
            ldap_uid = kwargs['ldapUid']
        if 'ldapUrl' in kwargs:
            ldap_url = kwargs['ldapUrl']
        if 'ldapVerifyCert' in kwargs:
            ldap_verify_cert = kwargs['ldapVerifyCert']
        if 'oidcAdminGroup' in kwargs:
            oidc_admin_group = kwargs['oidcAdminGroup']
        if 'oidcAutoOnboard' in kwargs:
            oidc_auto_onboard = kwargs['oidcAutoOnboard']
        if 'oidcClientId' in kwargs:
            oidc_client_id = kwargs['oidcClientId']
        if 'oidcClientSecret' in kwargs:
            oidc_client_secret = kwargs['oidcClientSecret']
        if 'oidcEndpoint' in kwargs:
            oidc_endpoint = kwargs['oidcEndpoint']
        if 'oidcGroupFilter' in kwargs:
            oidc_group_filter = kwargs['oidcGroupFilter']
        if 'oidcGroupsClaim' in kwargs:
            oidc_groups_claim = kwargs['oidcGroupsClaim']
        if 'oidcName' in kwargs:
            oidc_name = kwargs['oidcName']
        if 'oidcScope' in kwargs:
            oidc_scope = kwargs['oidcScope']
        if 'oidcUserClaim' in kwargs:
            oidc_user_claim = kwargs['oidcUserClaim']
        if 'oidcVerifyCert' in kwargs:
            oidc_verify_cert = kwargs['oidcVerifyCert']
        if 'primaryAuthMode' in kwargs:
            primary_auth_mode = kwargs['primaryAuthMode']

        _setter("auth_mode", auth_mode)
        if ldap_base_dn is not None:
            _setter("ldap_base_dn", ldap_base_dn)
        if ldap_filter is not None:
            _setter("ldap_filter", ldap_filter)
        if ldap_group_admin_dn is not None:
            _setter("ldap_group_admin_dn", ldap_group_admin_dn)
        if ldap_group_base_dn is not None:
            _setter("ldap_group_base_dn", ldap_group_base_dn)
        if ldap_group_filter is not None:
            _setter("ldap_group_filter", ldap_group_filter)
        if ldap_group_gid is not None:
            _setter("ldap_group_gid", ldap_group_gid)
        if ldap_group_membership is not None:
            _setter("ldap_group_membership", ldap_group_membership)
        if ldap_group_scope is not None:
            _setter("ldap_group_scope", ldap_group_scope)
        if ldap_group_uid is not None:
            _setter("ldap_group_uid", ldap_group_uid)
        if ldap_scope is not None:
            _setter("ldap_scope", ldap_scope)
        if ldap_search_dn is not None:
            _setter("ldap_search_dn", ldap_search_dn)
        if ldap_search_password is not None:
            _setter("ldap_search_password", ldap_search_password)
        if ldap_uid is not None:
            _setter("ldap_uid", ldap_uid)
        if ldap_url is not None:
            _setter("ldap_url", ldap_url)
        if ldap_verify_cert is not None:
            _setter("ldap_verify_cert", ldap_verify_cert)
        if oidc_admin_group is not None:
            _setter("oidc_admin_group", oidc_admin_group)
        if oidc_auto_onboard is not None:
            _setter("oidc_auto_onboard", oidc_auto_onboard)
        if oidc_client_id is not None:
            _setter("oidc_client_id", oidc_client_id)
        if oidc_client_secret is not None:
            _setter("oidc_client_secret", oidc_client_secret)
        if oidc_endpoint is not None:
            _setter("oidc_endpoint", oidc_endpoint)
        if oidc_group_filter is not None:
            _setter("oidc_group_filter", oidc_group_filter)
        if oidc_groups_claim is not None:
            _setter("oidc_groups_claim", oidc_groups_claim)
        if oidc_name is not None:
            _setter("oidc_name", oidc_name)
        if oidc_scope is not None:
            _setter("oidc_scope", oidc_scope)
        if oidc_user_claim is not None:
            _setter("oidc_user_claim", oidc_user_claim)
        if oidc_verify_cert is not None:
            _setter("oidc_verify_cert", oidc_verify_cert)
        if primary_auth_mode is not None:
            _setter("primary_auth_mode", primary_auth_mode)

    @property
    @pulumi.getter(name="authMode")
    def auth_mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_mode")

    @auth_mode.setter
    def auth_mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_mode", value)

    @property
    @pulumi.getter(name="ldapBaseDn")
    def ldap_base_dn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ldap_base_dn")

    @ldap_base_dn.setter
    def ldap_base_dn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_base_dn", value)

    @property
    @pulumi.getter(name="ldapFilter")
    def ldap_filter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ldap_filter")

    @ldap_filter.setter
    def ldap_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_filter", value)

    @property
    @pulumi.getter(name="ldapGroupAdminDn")
    def ldap_group_admin_dn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ldap_group_admin_dn")

    @ldap_group_admin_dn.setter
    def ldap_group_admin_dn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_group_admin_dn", value)

    @property
    @pulumi.getter(name="ldapGroupBaseDn")
    def ldap_group_base_dn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ldap_group_base_dn")

    @ldap_group_base_dn.setter
    def ldap_group_base_dn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_group_base_dn", value)

    @property
    @pulumi.getter(name="ldapGroupFilter")
    def ldap_group_filter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ldap_group_filter")

    @ldap_group_filter.setter
    def ldap_group_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_group_filter", value)

    @property
    @pulumi.getter(name="ldapGroupGid")
    def ldap_group_gid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ldap_group_gid")

    @ldap_group_gid.setter
    def ldap_group_gid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_group_gid", value)

    @property
    @pulumi.getter(name="ldapGroupMembership")
    def ldap_group_membership(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ldap_group_membership")

    @ldap_group_membership.setter
    def ldap_group_membership(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_group_membership", value)

    @property
    @pulumi.getter(name="ldapGroupScope")
    def ldap_group_scope(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ldap_group_scope")

    @ldap_group_scope.setter
    def ldap_group_scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_group_scope", value)

    @property
    @pulumi.getter(name="ldapGroupUid")
    def ldap_group_uid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ldap_group_uid")

    @ldap_group_uid.setter
    def ldap_group_uid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_group_uid", value)

    @property
    @pulumi.getter(name="ldapScope")
    def ldap_scope(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ldap_scope")

    @ldap_scope.setter
    def ldap_scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_scope", value)

    @property
    @pulumi.getter(name="ldapSearchDn")
    def ldap_search_dn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ldap_search_dn")

    @ldap_search_dn.setter
    def ldap_search_dn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_search_dn", value)

    @property
    @pulumi.getter(name="ldapSearchPassword")
    def ldap_search_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ldap_search_password")

    @ldap_search_password.setter
    def ldap_search_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_search_password", value)

    @property
    @pulumi.getter(name="ldapUid")
    def ldap_uid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ldap_uid")

    @ldap_uid.setter
    def ldap_uid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_uid", value)

    @property
    @pulumi.getter(name="ldapUrl")
    def ldap_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ldap_url")

    @ldap_url.setter
    def ldap_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_url", value)

    @property
    @pulumi.getter(name="ldapVerifyCert")
    def ldap_verify_cert(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ldap_verify_cert")

    @ldap_verify_cert.setter
    def ldap_verify_cert(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ldap_verify_cert", value)

    @property
    @pulumi.getter(name="oidcAdminGroup")
    def oidc_admin_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "oidc_admin_group")

    @oidc_admin_group.setter
    def oidc_admin_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oidc_admin_group", value)

    @property
    @pulumi.getter(name="oidcAutoOnboard")
    def oidc_auto_onboard(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "oidc_auto_onboard")

    @oidc_auto_onboard.setter
    def oidc_auto_onboard(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "oidc_auto_onboard", value)

    @property
    @pulumi.getter(name="oidcClientId")
    def oidc_client_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "oidc_client_id")

    @oidc_client_id.setter
    def oidc_client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oidc_client_id", value)

    @property
    @pulumi.getter(name="oidcClientSecret")
    def oidc_client_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "oidc_client_secret")

    @oidc_client_secret.setter
    def oidc_client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oidc_client_secret", value)

    @property
    @pulumi.getter(name="oidcEndpoint")
    def oidc_endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "oidc_endpoint")

    @oidc_endpoint.setter
    def oidc_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oidc_endpoint", value)

    @property
    @pulumi.getter(name="oidcGroupFilter")
    def oidc_group_filter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "oidc_group_filter")

    @oidc_group_filter.setter
    def oidc_group_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oidc_group_filter", value)

    @property
    @pulumi.getter(name="oidcGroupsClaim")
    def oidc_groups_claim(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "oidc_groups_claim")

    @oidc_groups_claim.setter
    def oidc_groups_claim(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oidc_groups_claim", value)

    @property
    @pulumi.getter(name="oidcName")
    def oidc_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "oidc_name")

    @oidc_name.setter
    def oidc_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oidc_name", value)

    @property
    @pulumi.getter(name="oidcScope")
    def oidc_scope(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "oidc_scope")

    @oidc_scope.setter
    def oidc_scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oidc_scope", value)

    @property
    @pulumi.getter(name="oidcUserClaim")
    def oidc_user_claim(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "oidc_user_claim")

    @oidc_user_claim.setter
    def oidc_user_claim(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oidc_user_claim", value)

    @property
    @pulumi.getter(name="oidcVerifyCert")
    def oidc_verify_cert(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "oidc_verify_cert")

    @oidc_verify_cert.setter
    def oidc_verify_cert(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "oidc_verify_cert", value)

    @property
    @pulumi.getter(name="primaryAuthMode")
    def primary_auth_mode(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "primary_auth_mode")

    @primary_auth_mode.setter
    def primary_auth_mode(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "primary_auth_mode", value)


@pulumi.input_type
class _ConfigAuthState:
    def __init__(__self__, *,
                 auth_mode: Optional[pulumi.Input[str]] = None,
                 ldap_base_dn: Optional[pulumi.Input[str]] = None,
                 ldap_filter: Optional[pulumi.Input[str]] = None,
                 ldap_group_admin_dn: Optional[pulumi.Input[str]] = None,
                 ldap_group_base_dn: Optional[pulumi.Input[str]] = None,
                 ldap_group_filter: Optional[pulumi.Input[str]] = None,
                 ldap_group_gid: Optional[pulumi.Input[str]] = None,
                 ldap_group_membership: Optional[pulumi.Input[str]] = None,
                 ldap_group_scope: Optional[pulumi.Input[str]] = None,
                 ldap_group_uid: Optional[pulumi.Input[str]] = None,
                 ldap_scope: Optional[pulumi.Input[str]] = None,
                 ldap_search_dn: Optional[pulumi.Input[str]] = None,
                 ldap_search_password: Optional[pulumi.Input[str]] = None,
                 ldap_uid: Optional[pulumi.Input[str]] = None,
                 ldap_url: Optional[pulumi.Input[str]] = None,
                 ldap_verify_cert: Optional[pulumi.Input[bool]] = None,
                 oidc_admin_group: Optional[pulumi.Input[str]] = None,
                 oidc_auto_onboard: Optional[pulumi.Input[bool]] = None,
                 oidc_client_id: Optional[pulumi.Input[str]] = None,
                 oidc_client_secret: Optional[pulumi.Input[str]] = None,
                 oidc_endpoint: Optional[pulumi.Input[str]] = None,
                 oidc_group_filter: Optional[pulumi.Input[str]] = None,
                 oidc_groups_claim: Optional[pulumi.Input[str]] = None,
                 oidc_name: Optional[pulumi.Input[str]] = None,
                 oidc_scope: Optional[pulumi.Input[str]] = None,
                 oidc_user_claim: Optional[pulumi.Input[str]] = None,
                 oidc_verify_cert: Optional[pulumi.Input[bool]] = None,
                 primary_auth_mode: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering ConfigAuth resources.
        """
        _ConfigAuthState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            auth_mode=auth_mode,
            ldap_base_dn=ldap_base_dn,
            ldap_filter=ldap_filter,
            ldap_group_admin_dn=ldap_group_admin_dn,
            ldap_group_base_dn=ldap_group_base_dn,
            ldap_group_filter=ldap_group_filter,
            ldap_group_gid=ldap_group_gid,
            ldap_group_membership=ldap_group_membership,
            ldap_group_scope=ldap_group_scope,
            ldap_group_uid=ldap_group_uid,
            ldap_scope=ldap_scope,
            ldap_search_dn=ldap_search_dn,
            ldap_search_password=ldap_search_password,
            ldap_uid=ldap_uid,
            ldap_url=ldap_url,
            ldap_verify_cert=ldap_verify_cert,
            oidc_admin_group=oidc_admin_group,
            oidc_auto_onboard=oidc_auto_onboard,
            oidc_client_id=oidc_client_id,
            oidc_client_secret=oidc_client_secret,
            oidc_endpoint=oidc_endpoint,
            oidc_group_filter=oidc_group_filter,
            oidc_groups_claim=oidc_groups_claim,
            oidc_name=oidc_name,
            oidc_scope=oidc_scope,
            oidc_user_claim=oidc_user_claim,
            oidc_verify_cert=oidc_verify_cert,
            primary_auth_mode=primary_auth_mode,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             auth_mode: Optional[pulumi.Input[str]] = None,
             ldap_base_dn: Optional[pulumi.Input[str]] = None,
             ldap_filter: Optional[pulumi.Input[str]] = None,
             ldap_group_admin_dn: Optional[pulumi.Input[str]] = None,
             ldap_group_base_dn: Optional[pulumi.Input[str]] = None,
             ldap_group_filter: Optional[pulumi.Input[str]] = None,
             ldap_group_gid: Optional[pulumi.Input[str]] = None,
             ldap_group_membership: Optional[pulumi.Input[str]] = None,
             ldap_group_scope: Optional[pulumi.Input[str]] = None,
             ldap_group_uid: Optional[pulumi.Input[str]] = None,
             ldap_scope: Optional[pulumi.Input[str]] = None,
             ldap_search_dn: Optional[pulumi.Input[str]] = None,
             ldap_search_password: Optional[pulumi.Input[str]] = None,
             ldap_uid: Optional[pulumi.Input[str]] = None,
             ldap_url: Optional[pulumi.Input[str]] = None,
             ldap_verify_cert: Optional[pulumi.Input[bool]] = None,
             oidc_admin_group: Optional[pulumi.Input[str]] = None,
             oidc_auto_onboard: Optional[pulumi.Input[bool]] = None,
             oidc_client_id: Optional[pulumi.Input[str]] = None,
             oidc_client_secret: Optional[pulumi.Input[str]] = None,
             oidc_endpoint: Optional[pulumi.Input[str]] = None,
             oidc_group_filter: Optional[pulumi.Input[str]] = None,
             oidc_groups_claim: Optional[pulumi.Input[str]] = None,
             oidc_name: Optional[pulumi.Input[str]] = None,
             oidc_scope: Optional[pulumi.Input[str]] = None,
             oidc_user_claim: Optional[pulumi.Input[str]] = None,
             oidc_verify_cert: Optional[pulumi.Input[bool]] = None,
             primary_auth_mode: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'authMode' in kwargs:
            auth_mode = kwargs['authMode']
        if 'ldapBaseDn' in kwargs:
            ldap_base_dn = kwargs['ldapBaseDn']
        if 'ldapFilter' in kwargs:
            ldap_filter = kwargs['ldapFilter']
        if 'ldapGroupAdminDn' in kwargs:
            ldap_group_admin_dn = kwargs['ldapGroupAdminDn']
        if 'ldapGroupBaseDn' in kwargs:
            ldap_group_base_dn = kwargs['ldapGroupBaseDn']
        if 'ldapGroupFilter' in kwargs:
            ldap_group_filter = kwargs['ldapGroupFilter']
        if 'ldapGroupGid' in kwargs:
            ldap_group_gid = kwargs['ldapGroupGid']
        if 'ldapGroupMembership' in kwargs:
            ldap_group_membership = kwargs['ldapGroupMembership']
        if 'ldapGroupScope' in kwargs:
            ldap_group_scope = kwargs['ldapGroupScope']
        if 'ldapGroupUid' in kwargs:
            ldap_group_uid = kwargs['ldapGroupUid']
        if 'ldapScope' in kwargs:
            ldap_scope = kwargs['ldapScope']
        if 'ldapSearchDn' in kwargs:
            ldap_search_dn = kwargs['ldapSearchDn']
        if 'ldapSearchPassword' in kwargs:
            ldap_search_password = kwargs['ldapSearchPassword']
        if 'ldapUid' in kwargs:
            ldap_uid = kwargs['ldapUid']
        if 'ldapUrl' in kwargs:
            ldap_url = kwargs['ldapUrl']
        if 'ldapVerifyCert' in kwargs:
            ldap_verify_cert = kwargs['ldapVerifyCert']
        if 'oidcAdminGroup' in kwargs:
            oidc_admin_group = kwargs['oidcAdminGroup']
        if 'oidcAutoOnboard' in kwargs:
            oidc_auto_onboard = kwargs['oidcAutoOnboard']
        if 'oidcClientId' in kwargs:
            oidc_client_id = kwargs['oidcClientId']
        if 'oidcClientSecret' in kwargs:
            oidc_client_secret = kwargs['oidcClientSecret']
        if 'oidcEndpoint' in kwargs:
            oidc_endpoint = kwargs['oidcEndpoint']
        if 'oidcGroupFilter' in kwargs:
            oidc_group_filter = kwargs['oidcGroupFilter']
        if 'oidcGroupsClaim' in kwargs:
            oidc_groups_claim = kwargs['oidcGroupsClaim']
        if 'oidcName' in kwargs:
            oidc_name = kwargs['oidcName']
        if 'oidcScope' in kwargs:
            oidc_scope = kwargs['oidcScope']
        if 'oidcUserClaim' in kwargs:
            oidc_user_claim = kwargs['oidcUserClaim']
        if 'oidcVerifyCert' in kwargs:
            oidc_verify_cert = kwargs['oidcVerifyCert']
        if 'primaryAuthMode' in kwargs:
            primary_auth_mode = kwargs['primaryAuthMode']

        if auth_mode is not None:
            _setter("auth_mode", auth_mode)
        if ldap_base_dn is not None:
            _setter("ldap_base_dn", ldap_base_dn)
        if ldap_filter is not None:
            _setter("ldap_filter", ldap_filter)
        if ldap_group_admin_dn is not None:
            _setter("ldap_group_admin_dn", ldap_group_admin_dn)
        if ldap_group_base_dn is not None:
            _setter("ldap_group_base_dn", ldap_group_base_dn)
        if ldap_group_filter is not None:
            _setter("ldap_group_filter", ldap_group_filter)
        if ldap_group_gid is not None:
            _setter("ldap_group_gid", ldap_group_gid)
        if ldap_group_membership is not None:
            _setter("ldap_group_membership", ldap_group_membership)
        if ldap_group_scope is not None:
            _setter("ldap_group_scope", ldap_group_scope)
        if ldap_group_uid is not None:
            _setter("ldap_group_uid", ldap_group_uid)
        if ldap_scope is not None:
            _setter("ldap_scope", ldap_scope)
        if ldap_search_dn is not None:
            _setter("ldap_search_dn", ldap_search_dn)
        if ldap_search_password is not None:
            _setter("ldap_search_password", ldap_search_password)
        if ldap_uid is not None:
            _setter("ldap_uid", ldap_uid)
        if ldap_url is not None:
            _setter("ldap_url", ldap_url)
        if ldap_verify_cert is not None:
            _setter("ldap_verify_cert", ldap_verify_cert)
        if oidc_admin_group is not None:
            _setter("oidc_admin_group", oidc_admin_group)
        if oidc_auto_onboard is not None:
            _setter("oidc_auto_onboard", oidc_auto_onboard)
        if oidc_client_id is not None:
            _setter("oidc_client_id", oidc_client_id)
        if oidc_client_secret is not None:
            _setter("oidc_client_secret", oidc_client_secret)
        if oidc_endpoint is not None:
            _setter("oidc_endpoint", oidc_endpoint)
        if oidc_group_filter is not None:
            _setter("oidc_group_filter", oidc_group_filter)
        if oidc_groups_claim is not None:
            _setter("oidc_groups_claim", oidc_groups_claim)
        if oidc_name is not None:
            _setter("oidc_name", oidc_name)
        if oidc_scope is not None:
            _setter("oidc_scope", oidc_scope)
        if oidc_user_claim is not None:
            _setter("oidc_user_claim", oidc_user_claim)
        if oidc_verify_cert is not None:
            _setter("oidc_verify_cert", oidc_verify_cert)
        if primary_auth_mode is not None:
            _setter("primary_auth_mode", primary_auth_mode)

    @property
    @pulumi.getter(name="authMode")
    def auth_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_mode")

    @auth_mode.setter
    def auth_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_mode", value)

    @property
    @pulumi.getter(name="ldapBaseDn")
    def ldap_base_dn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ldap_base_dn")

    @ldap_base_dn.setter
    def ldap_base_dn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_base_dn", value)

    @property
    @pulumi.getter(name="ldapFilter")
    def ldap_filter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ldap_filter")

    @ldap_filter.setter
    def ldap_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_filter", value)

    @property
    @pulumi.getter(name="ldapGroupAdminDn")
    def ldap_group_admin_dn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ldap_group_admin_dn")

    @ldap_group_admin_dn.setter
    def ldap_group_admin_dn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_group_admin_dn", value)

    @property
    @pulumi.getter(name="ldapGroupBaseDn")
    def ldap_group_base_dn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ldap_group_base_dn")

    @ldap_group_base_dn.setter
    def ldap_group_base_dn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_group_base_dn", value)

    @property
    @pulumi.getter(name="ldapGroupFilter")
    def ldap_group_filter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ldap_group_filter")

    @ldap_group_filter.setter
    def ldap_group_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_group_filter", value)

    @property
    @pulumi.getter(name="ldapGroupGid")
    def ldap_group_gid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ldap_group_gid")

    @ldap_group_gid.setter
    def ldap_group_gid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_group_gid", value)

    @property
    @pulumi.getter(name="ldapGroupMembership")
    def ldap_group_membership(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ldap_group_membership")

    @ldap_group_membership.setter
    def ldap_group_membership(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_group_membership", value)

    @property
    @pulumi.getter(name="ldapGroupScope")
    def ldap_group_scope(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ldap_group_scope")

    @ldap_group_scope.setter
    def ldap_group_scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_group_scope", value)

    @property
    @pulumi.getter(name="ldapGroupUid")
    def ldap_group_uid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ldap_group_uid")

    @ldap_group_uid.setter
    def ldap_group_uid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_group_uid", value)

    @property
    @pulumi.getter(name="ldapScope")
    def ldap_scope(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ldap_scope")

    @ldap_scope.setter
    def ldap_scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_scope", value)

    @property
    @pulumi.getter(name="ldapSearchDn")
    def ldap_search_dn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ldap_search_dn")

    @ldap_search_dn.setter
    def ldap_search_dn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_search_dn", value)

    @property
    @pulumi.getter(name="ldapSearchPassword")
    def ldap_search_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ldap_search_password")

    @ldap_search_password.setter
    def ldap_search_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_search_password", value)

    @property
    @pulumi.getter(name="ldapUid")
    def ldap_uid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ldap_uid")

    @ldap_uid.setter
    def ldap_uid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_uid", value)

    @property
    @pulumi.getter(name="ldapUrl")
    def ldap_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ldap_url")

    @ldap_url.setter
    def ldap_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_url", value)

    @property
    @pulumi.getter(name="ldapVerifyCert")
    def ldap_verify_cert(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ldap_verify_cert")

    @ldap_verify_cert.setter
    def ldap_verify_cert(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ldap_verify_cert", value)

    @property
    @pulumi.getter(name="oidcAdminGroup")
    def oidc_admin_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "oidc_admin_group")

    @oidc_admin_group.setter
    def oidc_admin_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oidc_admin_group", value)

    @property
    @pulumi.getter(name="oidcAutoOnboard")
    def oidc_auto_onboard(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "oidc_auto_onboard")

    @oidc_auto_onboard.setter
    def oidc_auto_onboard(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "oidc_auto_onboard", value)

    @property
    @pulumi.getter(name="oidcClientId")
    def oidc_client_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "oidc_client_id")

    @oidc_client_id.setter
    def oidc_client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oidc_client_id", value)

    @property
    @pulumi.getter(name="oidcClientSecret")
    def oidc_client_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "oidc_client_secret")

    @oidc_client_secret.setter
    def oidc_client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oidc_client_secret", value)

    @property
    @pulumi.getter(name="oidcEndpoint")
    def oidc_endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "oidc_endpoint")

    @oidc_endpoint.setter
    def oidc_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oidc_endpoint", value)

    @property
    @pulumi.getter(name="oidcGroupFilter")
    def oidc_group_filter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "oidc_group_filter")

    @oidc_group_filter.setter
    def oidc_group_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oidc_group_filter", value)

    @property
    @pulumi.getter(name="oidcGroupsClaim")
    def oidc_groups_claim(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "oidc_groups_claim")

    @oidc_groups_claim.setter
    def oidc_groups_claim(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oidc_groups_claim", value)

    @property
    @pulumi.getter(name="oidcName")
    def oidc_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "oidc_name")

    @oidc_name.setter
    def oidc_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oidc_name", value)

    @property
    @pulumi.getter(name="oidcScope")
    def oidc_scope(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "oidc_scope")

    @oidc_scope.setter
    def oidc_scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oidc_scope", value)

    @property
    @pulumi.getter(name="oidcUserClaim")
    def oidc_user_claim(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "oidc_user_claim")

    @oidc_user_claim.setter
    def oidc_user_claim(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oidc_user_claim", value)

    @property
    @pulumi.getter(name="oidcVerifyCert")
    def oidc_verify_cert(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "oidc_verify_cert")

    @oidc_verify_cert.setter
    def oidc_verify_cert(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "oidc_verify_cert", value)

    @property
    @pulumi.getter(name="primaryAuthMode")
    def primary_auth_mode(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "primary_auth_mode")

    @primary_auth_mode.setter
    def primary_auth_mode(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "primary_auth_mode", value)


class ConfigAuth(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_mode: Optional[pulumi.Input[str]] = None,
                 ldap_base_dn: Optional[pulumi.Input[str]] = None,
                 ldap_filter: Optional[pulumi.Input[str]] = None,
                 ldap_group_admin_dn: Optional[pulumi.Input[str]] = None,
                 ldap_group_base_dn: Optional[pulumi.Input[str]] = None,
                 ldap_group_filter: Optional[pulumi.Input[str]] = None,
                 ldap_group_gid: Optional[pulumi.Input[str]] = None,
                 ldap_group_membership: Optional[pulumi.Input[str]] = None,
                 ldap_group_scope: Optional[pulumi.Input[str]] = None,
                 ldap_group_uid: Optional[pulumi.Input[str]] = None,
                 ldap_scope: Optional[pulumi.Input[str]] = None,
                 ldap_search_dn: Optional[pulumi.Input[str]] = None,
                 ldap_search_password: Optional[pulumi.Input[str]] = None,
                 ldap_uid: Optional[pulumi.Input[str]] = None,
                 ldap_url: Optional[pulumi.Input[str]] = None,
                 ldap_verify_cert: Optional[pulumi.Input[bool]] = None,
                 oidc_admin_group: Optional[pulumi.Input[str]] = None,
                 oidc_auto_onboard: Optional[pulumi.Input[bool]] = None,
                 oidc_client_id: Optional[pulumi.Input[str]] = None,
                 oidc_client_secret: Optional[pulumi.Input[str]] = None,
                 oidc_endpoint: Optional[pulumi.Input[str]] = None,
                 oidc_group_filter: Optional[pulumi.Input[str]] = None,
                 oidc_groups_claim: Optional[pulumi.Input[str]] = None,
                 oidc_name: Optional[pulumi.Input[str]] = None,
                 oidc_scope: Optional[pulumi.Input[str]] = None,
                 oidc_user_claim: Optional[pulumi.Input[str]] = None,
                 oidc_verify_cert: Optional[pulumi.Input[bool]] = None,
                 primary_auth_mode: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Create a ConfigAuth resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ConfigAuthArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ConfigAuth resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ConfigAuthArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ConfigAuthArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            ConfigAuthArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_mode: Optional[pulumi.Input[str]] = None,
                 ldap_base_dn: Optional[pulumi.Input[str]] = None,
                 ldap_filter: Optional[pulumi.Input[str]] = None,
                 ldap_group_admin_dn: Optional[pulumi.Input[str]] = None,
                 ldap_group_base_dn: Optional[pulumi.Input[str]] = None,
                 ldap_group_filter: Optional[pulumi.Input[str]] = None,
                 ldap_group_gid: Optional[pulumi.Input[str]] = None,
                 ldap_group_membership: Optional[pulumi.Input[str]] = None,
                 ldap_group_scope: Optional[pulumi.Input[str]] = None,
                 ldap_group_uid: Optional[pulumi.Input[str]] = None,
                 ldap_scope: Optional[pulumi.Input[str]] = None,
                 ldap_search_dn: Optional[pulumi.Input[str]] = None,
                 ldap_search_password: Optional[pulumi.Input[str]] = None,
                 ldap_uid: Optional[pulumi.Input[str]] = None,
                 ldap_url: Optional[pulumi.Input[str]] = None,
                 ldap_verify_cert: Optional[pulumi.Input[bool]] = None,
                 oidc_admin_group: Optional[pulumi.Input[str]] = None,
                 oidc_auto_onboard: Optional[pulumi.Input[bool]] = None,
                 oidc_client_id: Optional[pulumi.Input[str]] = None,
                 oidc_client_secret: Optional[pulumi.Input[str]] = None,
                 oidc_endpoint: Optional[pulumi.Input[str]] = None,
                 oidc_group_filter: Optional[pulumi.Input[str]] = None,
                 oidc_groups_claim: Optional[pulumi.Input[str]] = None,
                 oidc_name: Optional[pulumi.Input[str]] = None,
                 oidc_scope: Optional[pulumi.Input[str]] = None,
                 oidc_user_claim: Optional[pulumi.Input[str]] = None,
                 oidc_verify_cert: Optional[pulumi.Input[bool]] = None,
                 primary_auth_mode: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ConfigAuthArgs.__new__(ConfigAuthArgs)

            if auth_mode is None and not opts.urn:
                raise TypeError("Missing required property 'auth_mode'")
            __props__.__dict__["auth_mode"] = auth_mode
            __props__.__dict__["ldap_base_dn"] = ldap_base_dn
            __props__.__dict__["ldap_filter"] = ldap_filter
            __props__.__dict__["ldap_group_admin_dn"] = ldap_group_admin_dn
            __props__.__dict__["ldap_group_base_dn"] = ldap_group_base_dn
            __props__.__dict__["ldap_group_filter"] = ldap_group_filter
            __props__.__dict__["ldap_group_gid"] = ldap_group_gid
            __props__.__dict__["ldap_group_membership"] = ldap_group_membership
            __props__.__dict__["ldap_group_scope"] = ldap_group_scope
            __props__.__dict__["ldap_group_uid"] = ldap_group_uid
            __props__.__dict__["ldap_scope"] = ldap_scope
            __props__.__dict__["ldap_search_dn"] = ldap_search_dn
            __props__.__dict__["ldap_search_password"] = None if ldap_search_password is None else pulumi.Output.secret(ldap_search_password)
            __props__.__dict__["ldap_uid"] = ldap_uid
            __props__.__dict__["ldap_url"] = ldap_url
            __props__.__dict__["ldap_verify_cert"] = ldap_verify_cert
            __props__.__dict__["oidc_admin_group"] = oidc_admin_group
            __props__.__dict__["oidc_auto_onboard"] = oidc_auto_onboard
            __props__.__dict__["oidc_client_id"] = oidc_client_id
            __props__.__dict__["oidc_client_secret"] = None if oidc_client_secret is None else pulumi.Output.secret(oidc_client_secret)
            __props__.__dict__["oidc_endpoint"] = oidc_endpoint
            __props__.__dict__["oidc_group_filter"] = oidc_group_filter
            __props__.__dict__["oidc_groups_claim"] = oidc_groups_claim
            __props__.__dict__["oidc_name"] = oidc_name
            __props__.__dict__["oidc_scope"] = oidc_scope
            __props__.__dict__["oidc_user_claim"] = oidc_user_claim
            __props__.__dict__["oidc_verify_cert"] = oidc_verify_cert
            __props__.__dict__["primary_auth_mode"] = primary_auth_mode
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["ldapSearchPassword", "oidcClientSecret"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(ConfigAuth, __self__).__init__(
            'harbor:index/configAuth:ConfigAuth',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auth_mode: Optional[pulumi.Input[str]] = None,
            ldap_base_dn: Optional[pulumi.Input[str]] = None,
            ldap_filter: Optional[pulumi.Input[str]] = None,
            ldap_group_admin_dn: Optional[pulumi.Input[str]] = None,
            ldap_group_base_dn: Optional[pulumi.Input[str]] = None,
            ldap_group_filter: Optional[pulumi.Input[str]] = None,
            ldap_group_gid: Optional[pulumi.Input[str]] = None,
            ldap_group_membership: Optional[pulumi.Input[str]] = None,
            ldap_group_scope: Optional[pulumi.Input[str]] = None,
            ldap_group_uid: Optional[pulumi.Input[str]] = None,
            ldap_scope: Optional[pulumi.Input[str]] = None,
            ldap_search_dn: Optional[pulumi.Input[str]] = None,
            ldap_search_password: Optional[pulumi.Input[str]] = None,
            ldap_uid: Optional[pulumi.Input[str]] = None,
            ldap_url: Optional[pulumi.Input[str]] = None,
            ldap_verify_cert: Optional[pulumi.Input[bool]] = None,
            oidc_admin_group: Optional[pulumi.Input[str]] = None,
            oidc_auto_onboard: Optional[pulumi.Input[bool]] = None,
            oidc_client_id: Optional[pulumi.Input[str]] = None,
            oidc_client_secret: Optional[pulumi.Input[str]] = None,
            oidc_endpoint: Optional[pulumi.Input[str]] = None,
            oidc_group_filter: Optional[pulumi.Input[str]] = None,
            oidc_groups_claim: Optional[pulumi.Input[str]] = None,
            oidc_name: Optional[pulumi.Input[str]] = None,
            oidc_scope: Optional[pulumi.Input[str]] = None,
            oidc_user_claim: Optional[pulumi.Input[str]] = None,
            oidc_verify_cert: Optional[pulumi.Input[bool]] = None,
            primary_auth_mode: Optional[pulumi.Input[bool]] = None) -> 'ConfigAuth':
        """
        Get an existing ConfigAuth resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ConfigAuthState.__new__(_ConfigAuthState)

        __props__.__dict__["auth_mode"] = auth_mode
        __props__.__dict__["ldap_base_dn"] = ldap_base_dn
        __props__.__dict__["ldap_filter"] = ldap_filter
        __props__.__dict__["ldap_group_admin_dn"] = ldap_group_admin_dn
        __props__.__dict__["ldap_group_base_dn"] = ldap_group_base_dn
        __props__.__dict__["ldap_group_filter"] = ldap_group_filter
        __props__.__dict__["ldap_group_gid"] = ldap_group_gid
        __props__.__dict__["ldap_group_membership"] = ldap_group_membership
        __props__.__dict__["ldap_group_scope"] = ldap_group_scope
        __props__.__dict__["ldap_group_uid"] = ldap_group_uid
        __props__.__dict__["ldap_scope"] = ldap_scope
        __props__.__dict__["ldap_search_dn"] = ldap_search_dn
        __props__.__dict__["ldap_search_password"] = ldap_search_password
        __props__.__dict__["ldap_uid"] = ldap_uid
        __props__.__dict__["ldap_url"] = ldap_url
        __props__.__dict__["ldap_verify_cert"] = ldap_verify_cert
        __props__.__dict__["oidc_admin_group"] = oidc_admin_group
        __props__.__dict__["oidc_auto_onboard"] = oidc_auto_onboard
        __props__.__dict__["oidc_client_id"] = oidc_client_id
        __props__.__dict__["oidc_client_secret"] = oidc_client_secret
        __props__.__dict__["oidc_endpoint"] = oidc_endpoint
        __props__.__dict__["oidc_group_filter"] = oidc_group_filter
        __props__.__dict__["oidc_groups_claim"] = oidc_groups_claim
        __props__.__dict__["oidc_name"] = oidc_name
        __props__.__dict__["oidc_scope"] = oidc_scope
        __props__.__dict__["oidc_user_claim"] = oidc_user_claim
        __props__.__dict__["oidc_verify_cert"] = oidc_verify_cert
        __props__.__dict__["primary_auth_mode"] = primary_auth_mode
        return ConfigAuth(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="authMode")
    def auth_mode(self) -> pulumi.Output[str]:
        return pulumi.get(self, "auth_mode")

    @property
    @pulumi.getter(name="ldapBaseDn")
    def ldap_base_dn(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "ldap_base_dn")

    @property
    @pulumi.getter(name="ldapFilter")
    def ldap_filter(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "ldap_filter")

    @property
    @pulumi.getter(name="ldapGroupAdminDn")
    def ldap_group_admin_dn(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "ldap_group_admin_dn")

    @property
    @pulumi.getter(name="ldapGroupBaseDn")
    def ldap_group_base_dn(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "ldap_group_base_dn")

    @property
    @pulumi.getter(name="ldapGroupFilter")
    def ldap_group_filter(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "ldap_group_filter")

    @property
    @pulumi.getter(name="ldapGroupGid")
    def ldap_group_gid(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "ldap_group_gid")

    @property
    @pulumi.getter(name="ldapGroupMembership")
    def ldap_group_membership(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "ldap_group_membership")

    @property
    @pulumi.getter(name="ldapGroupScope")
    def ldap_group_scope(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "ldap_group_scope")

    @property
    @pulumi.getter(name="ldapGroupUid")
    def ldap_group_uid(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "ldap_group_uid")

    @property
    @pulumi.getter(name="ldapScope")
    def ldap_scope(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "ldap_scope")

    @property
    @pulumi.getter(name="ldapSearchDn")
    def ldap_search_dn(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "ldap_search_dn")

    @property
    @pulumi.getter(name="ldapSearchPassword")
    def ldap_search_password(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "ldap_search_password")

    @property
    @pulumi.getter(name="ldapUid")
    def ldap_uid(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "ldap_uid")

    @property
    @pulumi.getter(name="ldapUrl")
    def ldap_url(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "ldap_url")

    @property
    @pulumi.getter(name="ldapVerifyCert")
    def ldap_verify_cert(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "ldap_verify_cert")

    @property
    @pulumi.getter(name="oidcAdminGroup")
    def oidc_admin_group(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "oidc_admin_group")

    @property
    @pulumi.getter(name="oidcAutoOnboard")
    def oidc_auto_onboard(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "oidc_auto_onboard")

    @property
    @pulumi.getter(name="oidcClientId")
    def oidc_client_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "oidc_client_id")

    @property
    @pulumi.getter(name="oidcClientSecret")
    def oidc_client_secret(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "oidc_client_secret")

    @property
    @pulumi.getter(name="oidcEndpoint")
    def oidc_endpoint(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "oidc_endpoint")

    @property
    @pulumi.getter(name="oidcGroupFilter")
    def oidc_group_filter(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "oidc_group_filter")

    @property
    @pulumi.getter(name="oidcGroupsClaim")
    def oidc_groups_claim(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "oidc_groups_claim")

    @property
    @pulumi.getter(name="oidcName")
    def oidc_name(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "oidc_name")

    @property
    @pulumi.getter(name="oidcScope")
    def oidc_scope(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "oidc_scope")

    @property
    @pulumi.getter(name="oidcUserClaim")
    def oidc_user_claim(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "oidc_user_claim")

    @property
    @pulumi.getter(name="oidcVerifyCert")
    def oidc_verify_cert(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "oidc_verify_cert")

    @property
    @pulumi.getter(name="primaryAuthMode")
    def primary_auth_mode(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "primary_auth_mode")

