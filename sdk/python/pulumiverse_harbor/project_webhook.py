# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ProjectWebhookArgs', 'ProjectWebhook']

@pulumi.input_type
class ProjectWebhookArgs:
    def __init__(__self__, *,
                 address: pulumi.Input[str],
                 events_types: pulumi.Input[Sequence[pulumi.Input[str]]],
                 notify_type: pulumi.Input[str],
                 project_id: pulumi.Input[str],
                 auth_header: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 skip_cert_verify: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a ProjectWebhook resource.
        :param pulumi.Input[str] address: The address of the webhook
        :param pulumi.Input[Sequence[pulumi.Input[str]]] events_types: ) The type events you want to subscript to can be `DELETE_ARTIFACT`, `PULL_ARTIFACT`, `PUSH_ARTIFACT`, `DELETE_CHART`, `DOWNLOAD_CHART`, `UPLOAD_CHART`, `QUOTA_EXCEED`, `QUOTA_WARNING`, `REPLICATION`, `SCANNING_FAILED`, `SCANNING_COMPLETED`, `TAG_RETENTION`
        :param pulumi.Input[str] notify_type: The notification type either `http` or `slack`
        :param pulumi.Input[str] project_id: The project id of the harbor that webhook related to.
        :param pulumi.Input[str] auth_header: authentication header for you the webhook
        :param pulumi.Input[str] description: _ (Optional, string) A description of the webhook
        :param pulumi.Input[bool] enabled: , To enable / disable the webhook. Default `true`
        :param pulumi.Input[str] name: The name of the webhook that will be created in harbor.
        :param pulumi.Input[bool] skip_cert_verify: checks the for validate SSL certificate.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "events_types", events_types)
        pulumi.set(__self__, "notify_type", notify_type)
        pulumi.set(__self__, "project_id", project_id)
        if auth_header is not None:
            pulumi.set(__self__, "auth_header", auth_header)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if skip_cert_verify is not None:
            pulumi.set(__self__, "skip_cert_verify", skip_cert_verify)

    @property
    @pulumi.getter
    def address(self) -> pulumi.Input[str]:
        """
        The address of the webhook
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: pulumi.Input[str]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter(name="eventsTypes")
    def events_types(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        ) The type events you want to subscript to can be `DELETE_ARTIFACT`, `PULL_ARTIFACT`, `PUSH_ARTIFACT`, `DELETE_CHART`, `DOWNLOAD_CHART`, `UPLOAD_CHART`, `QUOTA_EXCEED`, `QUOTA_WARNING`, `REPLICATION`, `SCANNING_FAILED`, `SCANNING_COMPLETED`, `TAG_RETENTION`
        """
        return pulumi.get(self, "events_types")

    @events_types.setter
    def events_types(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "events_types", value)

    @property
    @pulumi.getter(name="notifyType")
    def notify_type(self) -> pulumi.Input[str]:
        """
        The notification type either `http` or `slack`
        """
        return pulumi.get(self, "notify_type")

    @notify_type.setter
    def notify_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "notify_type", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[str]:
        """
        The project id of the harbor that webhook related to.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="authHeader")
    def auth_header(self) -> Optional[pulumi.Input[str]]:
        """
        authentication header for you the webhook
        """
        return pulumi.get(self, "auth_header")

    @auth_header.setter
    def auth_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_header", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        _ (Optional, string) A description of the webhook
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        , To enable / disable the webhook. Default `true`
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the webhook that will be created in harbor.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="skipCertVerify")
    def skip_cert_verify(self) -> Optional[pulumi.Input[bool]]:
        """
        checks the for validate SSL certificate.
        """
        return pulumi.get(self, "skip_cert_verify")

    @skip_cert_verify.setter
    def skip_cert_verify(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_cert_verify", value)


@pulumi.input_type
class _ProjectWebhookState:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[str]] = None,
                 auth_header: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 events_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notify_type: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 skip_cert_verify: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering ProjectWebhook resources.
        :param pulumi.Input[str] address: The address of the webhook
        :param pulumi.Input[str] auth_header: authentication header for you the webhook
        :param pulumi.Input[str] description: _ (Optional, string) A description of the webhook
        :param pulumi.Input[bool] enabled: , To enable / disable the webhook. Default `true`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] events_types: ) The type events you want to subscript to can be `DELETE_ARTIFACT`, `PULL_ARTIFACT`, `PUSH_ARTIFACT`, `DELETE_CHART`, `DOWNLOAD_CHART`, `UPLOAD_CHART`, `QUOTA_EXCEED`, `QUOTA_WARNING`, `REPLICATION`, `SCANNING_FAILED`, `SCANNING_COMPLETED`, `TAG_RETENTION`
        :param pulumi.Input[str] name: The name of the webhook that will be created in harbor.
        :param pulumi.Input[str] notify_type: The notification type either `http` or `slack`
        :param pulumi.Input[str] project_id: The project id of the harbor that webhook related to.
        :param pulumi.Input[bool] skip_cert_verify: checks the for validate SSL certificate.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if auth_header is not None:
            pulumi.set(__self__, "auth_header", auth_header)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if events_types is not None:
            pulumi.set(__self__, "events_types", events_types)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notify_type is not None:
            pulumi.set(__self__, "notify_type", notify_type)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if skip_cert_verify is not None:
            pulumi.set(__self__, "skip_cert_verify", skip_cert_verify)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        """
        The address of the webhook
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter(name="authHeader")
    def auth_header(self) -> Optional[pulumi.Input[str]]:
        """
        authentication header for you the webhook
        """
        return pulumi.get(self, "auth_header")

    @auth_header.setter
    def auth_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_header", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        _ (Optional, string) A description of the webhook
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        , To enable / disable the webhook. Default `true`
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="eventsTypes")
    def events_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        ) The type events you want to subscript to can be `DELETE_ARTIFACT`, `PULL_ARTIFACT`, `PUSH_ARTIFACT`, `DELETE_CHART`, `DOWNLOAD_CHART`, `UPLOAD_CHART`, `QUOTA_EXCEED`, `QUOTA_WARNING`, `REPLICATION`, `SCANNING_FAILED`, `SCANNING_COMPLETED`, `TAG_RETENTION`
        """
        return pulumi.get(self, "events_types")

    @events_types.setter
    def events_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "events_types", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the webhook that will be created in harbor.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="notifyType")
    def notify_type(self) -> Optional[pulumi.Input[str]]:
        """
        The notification type either `http` or `slack`
        """
        return pulumi.get(self, "notify_type")

    @notify_type.setter
    def notify_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notify_type", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        """
        The project id of the harbor that webhook related to.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="skipCertVerify")
    def skip_cert_verify(self) -> Optional[pulumi.Input[bool]]:
        """
        checks the for validate SSL certificate.
        """
        return pulumi.get(self, "skip_cert_verify")

    @skip_cert_verify.setter
    def skip_cert_verify(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_cert_verify", value)


class ProjectWebhook(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 address: Optional[pulumi.Input[str]] = None,
                 auth_header: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 events_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notify_type: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 skip_cert_verify: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_harbor as harbor

        main_project = harbor.Project("mainProject")
        main_project_webhook = harbor.ProjectWebhook("mainProjectWebhook",
            address="https://webhook.domain.com",
            project_id=main_project.id,
            notify_type="http",
            events_types=[
                "DELETE_ARTIFACT",
                "PULL_ARTIFACT",
                "PUSH_ARTIFACT",
                "DELETE_CHART",
                "DOWNLOAD_CHART",
                "UPLOAD_CHART",
                "QUOTA_EXCEED",
                "QUOTA_WARNING",
                "REPLICATION",
                "SCANNING_FAILED",
                "SCANNING_COMPLETED",
                "TAG_RETENTION",
            ])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] address: The address of the webhook
        :param pulumi.Input[str] auth_header: authentication header for you the webhook
        :param pulumi.Input[str] description: _ (Optional, string) A description of the webhook
        :param pulumi.Input[bool] enabled: , To enable / disable the webhook. Default `true`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] events_types: ) The type events you want to subscript to can be `DELETE_ARTIFACT`, `PULL_ARTIFACT`, `PUSH_ARTIFACT`, `DELETE_CHART`, `DOWNLOAD_CHART`, `UPLOAD_CHART`, `QUOTA_EXCEED`, `QUOTA_WARNING`, `REPLICATION`, `SCANNING_FAILED`, `SCANNING_COMPLETED`, `TAG_RETENTION`
        :param pulumi.Input[str] name: The name of the webhook that will be created in harbor.
        :param pulumi.Input[str] notify_type: The notification type either `http` or `slack`
        :param pulumi.Input[str] project_id: The project id of the harbor that webhook related to.
        :param pulumi.Input[bool] skip_cert_verify: checks the for validate SSL certificate.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ProjectWebhookArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_harbor as harbor

        main_project = harbor.Project("mainProject")
        main_project_webhook = harbor.ProjectWebhook("mainProjectWebhook",
            address="https://webhook.domain.com",
            project_id=main_project.id,
            notify_type="http",
            events_types=[
                "DELETE_ARTIFACT",
                "PULL_ARTIFACT",
                "PUSH_ARTIFACT",
                "DELETE_CHART",
                "DOWNLOAD_CHART",
                "UPLOAD_CHART",
                "QUOTA_EXCEED",
                "QUOTA_WARNING",
                "REPLICATION",
                "SCANNING_FAILED",
                "SCANNING_COMPLETED",
                "TAG_RETENTION",
            ])
        ```

        :param str resource_name: The name of the resource.
        :param ProjectWebhookArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProjectWebhookArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 address: Optional[pulumi.Input[str]] = None,
                 auth_header: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 events_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notify_type: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 skip_cert_verify: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProjectWebhookArgs.__new__(ProjectWebhookArgs)

            if address is None and not opts.urn:
                raise TypeError("Missing required property 'address'")
            __props__.__dict__["address"] = address
            __props__.__dict__["auth_header"] = auth_header
            __props__.__dict__["description"] = description
            __props__.__dict__["enabled"] = enabled
            if events_types is None and not opts.urn:
                raise TypeError("Missing required property 'events_types'")
            __props__.__dict__["events_types"] = events_types
            __props__.__dict__["name"] = name
            if notify_type is None and not opts.urn:
                raise TypeError("Missing required property 'notify_type'")
            __props__.__dict__["notify_type"] = notify_type
            if project_id is None and not opts.urn:
                raise TypeError("Missing required property 'project_id'")
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["skip_cert_verify"] = skip_cert_verify
        super(ProjectWebhook, __self__).__init__(
            'harbor:index/projectWebhook:ProjectWebhook',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            address: Optional[pulumi.Input[str]] = None,
            auth_header: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            events_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            notify_type: Optional[pulumi.Input[str]] = None,
            project_id: Optional[pulumi.Input[str]] = None,
            skip_cert_verify: Optional[pulumi.Input[bool]] = None) -> 'ProjectWebhook':
        """
        Get an existing ProjectWebhook resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] address: The address of the webhook
        :param pulumi.Input[str] auth_header: authentication header for you the webhook
        :param pulumi.Input[str] description: _ (Optional, string) A description of the webhook
        :param pulumi.Input[bool] enabled: , To enable / disable the webhook. Default `true`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] events_types: ) The type events you want to subscript to can be `DELETE_ARTIFACT`, `PULL_ARTIFACT`, `PUSH_ARTIFACT`, `DELETE_CHART`, `DOWNLOAD_CHART`, `UPLOAD_CHART`, `QUOTA_EXCEED`, `QUOTA_WARNING`, `REPLICATION`, `SCANNING_FAILED`, `SCANNING_COMPLETED`, `TAG_RETENTION`
        :param pulumi.Input[str] name: The name of the webhook that will be created in harbor.
        :param pulumi.Input[str] notify_type: The notification type either `http` or `slack`
        :param pulumi.Input[str] project_id: The project id of the harbor that webhook related to.
        :param pulumi.Input[bool] skip_cert_verify: checks the for validate SSL certificate.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ProjectWebhookState.__new__(_ProjectWebhookState)

        __props__.__dict__["address"] = address
        __props__.__dict__["auth_header"] = auth_header
        __props__.__dict__["description"] = description
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["events_types"] = events_types
        __props__.__dict__["name"] = name
        __props__.__dict__["notify_type"] = notify_type
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["skip_cert_verify"] = skip_cert_verify
        return ProjectWebhook(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def address(self) -> pulumi.Output[str]:
        """
        The address of the webhook
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="authHeader")
    def auth_header(self) -> pulumi.Output[Optional[str]]:
        """
        authentication header for you the webhook
        """
        return pulumi.get(self, "auth_header")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        _ (Optional, string) A description of the webhook
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        , To enable / disable the webhook. Default `true`
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="eventsTypes")
    def events_types(self) -> pulumi.Output[Sequence[str]]:
        """
        ) The type events you want to subscript to can be `DELETE_ARTIFACT`, `PULL_ARTIFACT`, `PUSH_ARTIFACT`, `DELETE_CHART`, `DOWNLOAD_CHART`, `UPLOAD_CHART`, `QUOTA_EXCEED`, `QUOTA_WARNING`, `REPLICATION`, `SCANNING_FAILED`, `SCANNING_COMPLETED`, `TAG_RETENTION`
        """
        return pulumi.get(self, "events_types")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the webhook that will be created in harbor.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="notifyType")
    def notify_type(self) -> pulumi.Output[str]:
        """
        The notification type either `http` or `slack`
        """
        return pulumi.get(self, "notify_type")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[str]:
        """
        The project id of the harbor that webhook related to.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="skipCertVerify")
    def skip_cert_verify(self) -> pulumi.Output[Optional[bool]]:
        """
        checks the for validate SSL certificate.
        """
        return pulumi.get(self, "skip_cert_verify")

