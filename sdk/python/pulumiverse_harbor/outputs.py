# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'ConfigSystemBannerMessage',
    'ReplicationFilter',
    'RetentionPolicyRule',
    'RobotAccountPermission',
    'RobotAccountPermissionAccess',
    'GetGroupsGroupResult',
    'GetProjectMemberGroupsProjectMemberGroupResult',
    'GetProjectMemberUsersProjectMemberUserResult',
    'GetProjectsProjectResult',
    'GetRobotAccountsRobotAccountResult',
    'GetUsersUserResult',
]

@pulumi.output_type
class ConfigSystemBannerMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fromDate":
            suggest = "from_date"
        elif key == "toDate":
            suggest = "to_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigSystemBannerMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigSystemBannerMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigSystemBannerMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 message: str,
                 closable: Optional[bool] = None,
                 from_date: Optional[str] = None,
                 to_date: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str message: The message to display in the banner.
        :param bool closable: Whether or not the banner message is closable.
        :param str from_date: The date the banner message will start displaying. (Format: `MM/DD/YYYY`)
        :param str to_date: The date the banner message will stop displaying. (Format: `MM/DD/YYYY`)
        :param str type: The type of banner message. Can be `"info"`, `"warning"`, `"success"` or `"danger"`.
        """
        pulumi.set(__self__, "message", message)
        if closable is not None:
            pulumi.set(__self__, "closable", closable)
        if from_date is not None:
            pulumi.set(__self__, "from_date", from_date)
        if to_date is not None:
            pulumi.set(__self__, "to_date", to_date)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        The message to display in the banner.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def closable(self) -> Optional[bool]:
        """
        Whether or not the banner message is closable.
        """
        return pulumi.get(self, "closable")

    @property
    @pulumi.getter(name="fromDate")
    def from_date(self) -> Optional[str]:
        """
        The date the banner message will start displaying. (Format: `MM/DD/YYYY`)
        """
        return pulumi.get(self, "from_date")

    @property
    @pulumi.getter(name="toDate")
    def to_date(self) -> Optional[str]:
        """
        The date the banner message will stop displaying. (Format: `MM/DD/YYYY`)
        """
        return pulumi.get(self, "to_date")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of banner message. Can be `"info"`, `"warning"`, `"success"` or `"danger"`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ReplicationFilter(dict):
    def __init__(__self__, *,
                 decoration: Optional[str] = None,
                 labels: Optional[Sequence[str]] = None,
                 name: Optional[str] = None,
                 resource: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        :param str decoration: Matches or excludes the result. Can be one of the following. `matches`, `excludes`
        :param Sequence[str] labels: Filter on the resource according to labels.
        :param str name: Filter on the name of the resource.
        :param str resource: Filter on the resource type. Can be one of the following types. `chart`, `artifact`
        :param str tag: Filter on the tag/version of the resource.
        """
        if decoration is not None:
            pulumi.set(__self__, "decoration", decoration)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource is not None:
            pulumi.set(__self__, "resource", resource)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter
    def decoration(self) -> Optional[str]:
        """
        Matches or excludes the result. Can be one of the following. `matches`, `excludes`
        """
        return pulumi.get(self, "decoration")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        """
        Filter on the resource according to labels.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Filter on the name of the resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def resource(self) -> Optional[str]:
        """
        Filter on the resource type. Can be one of the following types. `chart`, `artifact`
        """
        return pulumi.get(self, "resource")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        Filter on the tag/version of the resource.
        """
        return pulumi.get(self, "tag")


@pulumi.output_type
class RetentionPolicyRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "alwaysRetain":
            suggest = "always_retain"
        elif key == "mostRecentlyPulled":
            suggest = "most_recently_pulled"
        elif key == "mostRecentlyPushed":
            suggest = "most_recently_pushed"
        elif key == "nDaysSinceLastPull":
            suggest = "n_days_since_last_pull"
        elif key == "nDaysSinceLastPush":
            suggest = "n_days_since_last_push"
        elif key == "repoExcluding":
            suggest = "repo_excluding"
        elif key == "repoMatching":
            suggest = "repo_matching"
        elif key == "tagExcluding":
            suggest = "tag_excluding"
        elif key == "tagMatching":
            suggest = "tag_matching"
        elif key == "untaggedArtifacts":
            suggest = "untagged_artifacts"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RetentionPolicyRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RetentionPolicyRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RetentionPolicyRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 always_retain: Optional[bool] = None,
                 disabled: Optional[bool] = None,
                 most_recently_pulled: Optional[int] = None,
                 most_recently_pushed: Optional[int] = None,
                 n_days_since_last_pull: Optional[int] = None,
                 n_days_since_last_push: Optional[int] = None,
                 repo_excluding: Optional[str] = None,
                 repo_matching: Optional[str] = None,
                 tag_excluding: Optional[str] = None,
                 tag_matching: Optional[str] = None,
                 untagged_artifacts: Optional[bool] = None):
        if always_retain is not None:
            pulumi.set(__self__, "always_retain", always_retain)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if most_recently_pulled is not None:
            pulumi.set(__self__, "most_recently_pulled", most_recently_pulled)
        if most_recently_pushed is not None:
            pulumi.set(__self__, "most_recently_pushed", most_recently_pushed)
        if n_days_since_last_pull is not None:
            pulumi.set(__self__, "n_days_since_last_pull", n_days_since_last_pull)
        if n_days_since_last_push is not None:
            pulumi.set(__self__, "n_days_since_last_push", n_days_since_last_push)
        if repo_excluding is not None:
            pulumi.set(__self__, "repo_excluding", repo_excluding)
        if repo_matching is not None:
            pulumi.set(__self__, "repo_matching", repo_matching)
        if tag_excluding is not None:
            pulumi.set(__self__, "tag_excluding", tag_excluding)
        if tag_matching is not None:
            pulumi.set(__self__, "tag_matching", tag_matching)
        if untagged_artifacts is not None:
            pulumi.set(__self__, "untagged_artifacts", untagged_artifacts)

    @property
    @pulumi.getter(name="alwaysRetain")
    def always_retain(self) -> Optional[bool]:
        return pulumi.get(self, "always_retain")

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter(name="mostRecentlyPulled")
    def most_recently_pulled(self) -> Optional[int]:
        return pulumi.get(self, "most_recently_pulled")

    @property
    @pulumi.getter(name="mostRecentlyPushed")
    def most_recently_pushed(self) -> Optional[int]:
        return pulumi.get(self, "most_recently_pushed")

    @property
    @pulumi.getter(name="nDaysSinceLastPull")
    def n_days_since_last_pull(self) -> Optional[int]:
        return pulumi.get(self, "n_days_since_last_pull")

    @property
    @pulumi.getter(name="nDaysSinceLastPush")
    def n_days_since_last_push(self) -> Optional[int]:
        return pulumi.get(self, "n_days_since_last_push")

    @property
    @pulumi.getter(name="repoExcluding")
    def repo_excluding(self) -> Optional[str]:
        return pulumi.get(self, "repo_excluding")

    @property
    @pulumi.getter(name="repoMatching")
    def repo_matching(self) -> Optional[str]:
        return pulumi.get(self, "repo_matching")

    @property
    @pulumi.getter(name="tagExcluding")
    def tag_excluding(self) -> Optional[str]:
        return pulumi.get(self, "tag_excluding")

    @property
    @pulumi.getter(name="tagMatching")
    def tag_matching(self) -> Optional[str]:
        return pulumi.get(self, "tag_matching")

    @property
    @pulumi.getter(name="untaggedArtifacts")
    def untagged_artifacts(self) -> Optional[bool]:
        return pulumi.get(self, "untagged_artifacts")


@pulumi.output_type
class RobotAccountPermission(dict):
    def __init__(__self__, *,
                 accesses: Sequence['outputs.RobotAccountPermissionAccess'],
                 kind: str,
                 namespace: str):
        """
        :param str kind: Either `system` or `project`.
        :param str namespace: namespace is the name of your project. For kind `system` permissions, always use `/` as namespace. Use `*` to match all projects.
        """
        pulumi.set(__self__, "accesses", accesses)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def accesses(self) -> Sequence['outputs.RobotAccountPermissionAccess']:
        return pulumi.get(self, "accesses")

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        Either `system` or `project`.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        namespace is the name of your project. For kind `system` permissions, always use `/` as namespace. Use `*` to match all projects.
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class RobotAccountPermissionAccess(dict):
    def __init__(__self__, *,
                 action: str,
                 resource: str,
                 effect: Optional[str] = None):
        """
        :param str action: Eg. `push`, `pull`, `read`, etc. Check [available actions](https://github.com/goharbor/harbor/blob/-/src/common/rbac/const.go).
        :param str resource: Eg. `repository`, `labels`, etc. Check [available resources](https://github.com/goharbor/harbor/blob/-/src/common/rbac/const.go).
        :param str effect: Either `allow` or `deny`. Defaults to `allow`.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "resource", resource)
        if effect is not None:
            pulumi.set(__self__, "effect", effect)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Eg. `push`, `pull`, `read`, etc. Check [available actions](https://github.com/goharbor/harbor/blob/-/src/common/rbac/const.go).
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def resource(self) -> str:
        """
        Eg. `repository`, `labels`, etc. Check [available resources](https://github.com/goharbor/harbor/blob/-/src/common/rbac/const.go).
        """
        return pulumi.get(self, "resource")

    @property
    @pulumi.getter
    def effect(self) -> Optional[str]:
        """
        Either `allow` or `deny`. Defaults to `allow`.
        """
        return pulumi.get(self, "effect")


@pulumi.output_type
class GetGroupsGroupResult(dict):
    def __init__(__self__, *,
                 group_name: str,
                 group_type: int,
                 id: int,
                 ldap_group_dn: str):
        """
        :param str group_name: The name of the group to filter by.
        :param int id: The ID of this resource.
        :param str ldap_group_dn: The LDAP group DN to filter by.
        """
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "group_type", group_type)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ldap_group_dn", ldap_group_dn)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> str:
        """
        The name of the group to filter by.
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter(name="groupType")
    def group_type(self) -> int:
        return pulumi.get(self, "group_type")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ldapGroupDn")
    def ldap_group_dn(self) -> str:
        """
        The LDAP group DN to filter by.
        """
        return pulumi.get(self, "ldap_group_dn")


@pulumi.output_type
class GetProjectMemberGroupsProjectMemberGroupResult(dict):
    def __init__(__self__, *,
                 group_name: str,
                 id: str,
                 project_id: str,
                 role: str):
        """
        :param str id: The ID of this resource.
        :param str project_id: The id of the project within harbor.
        """
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> str:
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        The id of the project within harbor.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def role(self) -> str:
        return pulumi.get(self, "role")


@pulumi.output_type
class GetProjectMemberUsersProjectMemberUserResult(dict):
    def __init__(__self__, *,
                 id: str,
                 project_id: str,
                 role: str,
                 user_name: str):
        """
        :param str id: The ID of this resource.
        :param str project_id: The id of the project within harbor.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        The id of the project within harbor.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def role(self) -> str:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> str:
        return pulumi.get(self, "user_name")


@pulumi.output_type
class GetProjectsProjectResult(dict):
    def __init__(__self__, *,
                 name: str,
                 project_id: int,
                 public: bool,
                 type: str,
                 vulnerability_scanning: bool):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "public", public)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vulnerability_scanning", vulnerability_scanning)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def public(self) -> bool:
        return pulumi.get(self, "public")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vulnerabilityScanning")
    def vulnerability_scanning(self) -> bool:
        return pulumi.get(self, "vulnerability_scanning")


@pulumi.output_type
class GetRobotAccountsRobotAccountResult(dict):
    def __init__(__self__, *,
                 description: str,
                 disable: bool,
                 duration: int,
                 id: str,
                 level: str,
                 name: str):
        """
        :param str id: The ID of this resource.
        :param str level: Level of the robot account, currently either `system` or `project`. Default is `system`.
        :param str name: The name of the robot account to filter by.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "disable", disable)
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def disable(self) -> bool:
        return pulumi.get(self, "disable")

    @property
    @pulumi.getter
    def duration(self) -> int:
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def level(self) -> str:
        """
        Level of the robot account, currently either `system` or `project`. Default is `system`.
        """
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the robot account to filter by.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetUsersUserResult(dict):
    def __init__(__self__, *,
                 admin: bool,
                 comment: str,
                 email: str,
                 full_name: str,
                 id: str,
                 username: str):
        """
        :param str email: The email of the user to filter by.
        :param str id: The ID of this resource.
        :param str username: The name of the user to filter by.
        """
        pulumi.set(__self__, "admin", admin)
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "full_name", full_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def admin(self) -> bool:
        return pulumi.get(self, "admin")

    @property
    @pulumi.getter
    def comment(self) -> str:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def email(self) -> str:
        """
        The email of the user to filter by.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> str:
        return pulumi.get(self, "full_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        The name of the user to filter by.
        """
        return pulumi.get(self, "username")


