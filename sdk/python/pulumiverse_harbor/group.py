# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['GroupArgs', 'Group']

@pulumi.input_type
class GroupArgs:
    def __init__(__self__, *,
                 group_name: pulumi.Input[str],
                 group_type: pulumi.Input[int],
                 ldap_group_dn: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Group resource.
        """
        GroupArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            group_name=group_name,
            group_type=group_type,
            ldap_group_dn=ldap_group_dn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             group_name: pulumi.Input[str],
             group_type: pulumi.Input[int],
             ldap_group_dn: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'groupName' in kwargs:
            group_name = kwargs['groupName']
        if 'groupType' in kwargs:
            group_type = kwargs['groupType']
        if 'ldapGroupDn' in kwargs:
            ldap_group_dn = kwargs['ldapGroupDn']

        _setter("group_name", group_name)
        _setter("group_type", group_type)
        if ldap_group_dn is not None:
            _setter("ldap_group_dn", ldap_group_dn)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "group_name", value)

    @property
    @pulumi.getter(name="groupType")
    def group_type(self) -> pulumi.Input[int]:
        return pulumi.get(self, "group_type")

    @group_type.setter
    def group_type(self, value: pulumi.Input[int]):
        pulumi.set(self, "group_type", value)

    @property
    @pulumi.getter(name="ldapGroupDn")
    def ldap_group_dn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ldap_group_dn")

    @ldap_group_dn.setter
    def ldap_group_dn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_group_dn", value)


@pulumi.input_type
class _GroupState:
    def __init__(__self__, *,
                 group_name: Optional[pulumi.Input[str]] = None,
                 group_type: Optional[pulumi.Input[int]] = None,
                 ldap_group_dn: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Group resources.
        """
        _GroupState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            group_name=group_name,
            group_type=group_type,
            ldap_group_dn=ldap_group_dn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             group_name: Optional[pulumi.Input[str]] = None,
             group_type: Optional[pulumi.Input[int]] = None,
             ldap_group_dn: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'groupName' in kwargs:
            group_name = kwargs['groupName']
        if 'groupType' in kwargs:
            group_type = kwargs['groupType']
        if 'ldapGroupDn' in kwargs:
            ldap_group_dn = kwargs['ldapGroupDn']

        if group_name is not None:
            _setter("group_name", group_name)
        if group_type is not None:
            _setter("group_type", group_type)
        if ldap_group_dn is not None:
            _setter("ldap_group_dn", ldap_group_dn)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_name", value)

    @property
    @pulumi.getter(name="groupType")
    def group_type(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "group_type")

    @group_type.setter
    def group_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "group_type", value)

    @property
    @pulumi.getter(name="ldapGroupDn")
    def ldap_group_dn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ldap_group_dn")

    @ldap_group_dn.setter
    def ldap_group_dn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_group_dn", value)


class Group(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 group_name: Optional[pulumi.Input[str]] = None,
                 group_type: Optional[pulumi.Input[int]] = None,
                 ldap_group_dn: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Example Usage

        ## Import

        An OIDC group can be imported using the `group id` eg, `<break><break>```sh<break> $ pulumi import harbor:index/group:Group storage-group /usergroups/19 <break>```<break><break>`

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: GroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ## Import

        An OIDC group can be imported using the `group id` eg, `<break><break>```sh<break> $ pulumi import harbor:index/group:Group storage-group /usergroups/19 <break>```<break><break>`

        :param str resource_name: The name of the resource.
        :param GroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(GroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            GroupArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 group_name: Optional[pulumi.Input[str]] = None,
                 group_type: Optional[pulumi.Input[int]] = None,
                 ldap_group_dn: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = GroupArgs.__new__(GroupArgs)

            if group_name is None and not opts.urn:
                raise TypeError("Missing required property 'group_name'")
            __props__.__dict__["group_name"] = group_name
            if group_type is None and not opts.urn:
                raise TypeError("Missing required property 'group_type'")
            __props__.__dict__["group_type"] = group_type
            __props__.__dict__["ldap_group_dn"] = ldap_group_dn
        super(Group, __self__).__init__(
            'harbor:index/group:Group',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            group_name: Optional[pulumi.Input[str]] = None,
            group_type: Optional[pulumi.Input[int]] = None,
            ldap_group_dn: Optional[pulumi.Input[str]] = None) -> 'Group':
        """
        Get an existing Group resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _GroupState.__new__(_GroupState)

        __props__.__dict__["group_name"] = group_name
        __props__.__dict__["group_type"] = group_type
        __props__.__dict__["ldap_group_dn"] = ldap_group_dn
        return Group(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter(name="groupType")
    def group_type(self) -> pulumi.Output[int]:
        return pulumi.get(self, "group_type")

    @property
    @pulumi.getter(name="ldapGroupDn")
    def ldap_group_dn(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "ldap_group_dn")

