# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'ReplicationFilterArgs',
    'RetentionPolicyRuleArgs',
    'RobotAccountPermissionArgs',
    'RobotAccountPermissionAccessArgs',
]

@pulumi.input_type
class ReplicationFilterArgs:
    def __init__(__self__, *,
                 decoration: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 resource: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        ReplicationFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            decoration=decoration,
            labels=labels,
            name=name,
            resource=resource,
            tag=tag,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             decoration: Optional[pulumi.Input[str]] = None,
             labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             name: Optional[pulumi.Input[str]] = None,
             resource: Optional[pulumi.Input[str]] = None,
             tag: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if decoration is not None:
            _setter("decoration", decoration)
        if labels is not None:
            _setter("labels", labels)
        if name is not None:
            _setter("name", name)
        if resource is not None:
            _setter("resource", resource)
        if tag is not None:
            _setter("tag", tag)

    @property
    @pulumi.getter
    def decoration(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "decoration")

    @decoration.setter
    def decoration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "decoration", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def resource(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class RetentionPolicyRuleArgs:
    def __init__(__self__, *,
                 always_retain: Optional[pulumi.Input[bool]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 most_recently_pulled: Optional[pulumi.Input[int]] = None,
                 most_recently_pushed: Optional[pulumi.Input[int]] = None,
                 n_days_since_last_pull: Optional[pulumi.Input[int]] = None,
                 n_days_since_last_push: Optional[pulumi.Input[int]] = None,
                 repo_excluding: Optional[pulumi.Input[str]] = None,
                 repo_matching: Optional[pulumi.Input[str]] = None,
                 tag_excluding: Optional[pulumi.Input[str]] = None,
                 tag_matching: Optional[pulumi.Input[str]] = None,
                 untagged_artifacts: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] always_retain: retain always.
        :param pulumi.Input[bool] disabled: Specify if the rule is disable or not. Defaults to `false`
        :param pulumi.Input[int] most_recently_pulled: retain the most recently pulled n artifacts.
        :param pulumi.Input[int] most_recently_pushed: retain the most recently pushed n artifacts.
        :param pulumi.Input[int] n_days_since_last_pull: retains the artifacts pulled within the lasts n days.
        :param pulumi.Input[int] n_days_since_last_push: retains the artifacts pushed within the lasts n days.
        :param pulumi.Input[str] repo_excluding: For the repositories excuding.
        :param pulumi.Input[str] repo_matching: For the repositories matching.
        :param pulumi.Input[str] tag_excluding: For the tag excuding.
        :param pulumi.Input[str] tag_matching: For the tag matching.
        :param pulumi.Input[bool] untagged_artifacts: with untagged artifacts. Defaults to `true`
               
               > Multiple tags or repositories must be provided as a comma-separated list wrapped into curly brackets `{ }`. Otherwise, the value is interpreted as a single value.
        """
        RetentionPolicyRuleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            always_retain=always_retain,
            disabled=disabled,
            most_recently_pulled=most_recently_pulled,
            most_recently_pushed=most_recently_pushed,
            n_days_since_last_pull=n_days_since_last_pull,
            n_days_since_last_push=n_days_since_last_push,
            repo_excluding=repo_excluding,
            repo_matching=repo_matching,
            tag_excluding=tag_excluding,
            tag_matching=tag_matching,
            untagged_artifacts=untagged_artifacts,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             always_retain: Optional[pulumi.Input[bool]] = None,
             disabled: Optional[pulumi.Input[bool]] = None,
             most_recently_pulled: Optional[pulumi.Input[int]] = None,
             most_recently_pushed: Optional[pulumi.Input[int]] = None,
             n_days_since_last_pull: Optional[pulumi.Input[int]] = None,
             n_days_since_last_push: Optional[pulumi.Input[int]] = None,
             repo_excluding: Optional[pulumi.Input[str]] = None,
             repo_matching: Optional[pulumi.Input[str]] = None,
             tag_excluding: Optional[pulumi.Input[str]] = None,
             tag_matching: Optional[pulumi.Input[str]] = None,
             untagged_artifacts: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'alwaysRetain' in kwargs:
            always_retain = kwargs['alwaysRetain']
        if 'mostRecentlyPulled' in kwargs:
            most_recently_pulled = kwargs['mostRecentlyPulled']
        if 'mostRecentlyPushed' in kwargs:
            most_recently_pushed = kwargs['mostRecentlyPushed']
        if 'nDaysSinceLastPull' in kwargs:
            n_days_since_last_pull = kwargs['nDaysSinceLastPull']
        if 'nDaysSinceLastPush' in kwargs:
            n_days_since_last_push = kwargs['nDaysSinceLastPush']
        if 'repoExcluding' in kwargs:
            repo_excluding = kwargs['repoExcluding']
        if 'repoMatching' in kwargs:
            repo_matching = kwargs['repoMatching']
        if 'tagExcluding' in kwargs:
            tag_excluding = kwargs['tagExcluding']
        if 'tagMatching' in kwargs:
            tag_matching = kwargs['tagMatching']
        if 'untaggedArtifacts' in kwargs:
            untagged_artifacts = kwargs['untaggedArtifacts']

        if always_retain is not None:
            _setter("always_retain", always_retain)
        if disabled is not None:
            _setter("disabled", disabled)
        if most_recently_pulled is not None:
            _setter("most_recently_pulled", most_recently_pulled)
        if most_recently_pushed is not None:
            _setter("most_recently_pushed", most_recently_pushed)
        if n_days_since_last_pull is not None:
            _setter("n_days_since_last_pull", n_days_since_last_pull)
        if n_days_since_last_push is not None:
            _setter("n_days_since_last_push", n_days_since_last_push)
        if repo_excluding is not None:
            _setter("repo_excluding", repo_excluding)
        if repo_matching is not None:
            _setter("repo_matching", repo_matching)
        if tag_excluding is not None:
            _setter("tag_excluding", tag_excluding)
        if tag_matching is not None:
            _setter("tag_matching", tag_matching)
        if untagged_artifacts is not None:
            _setter("untagged_artifacts", untagged_artifacts)

    @property
    @pulumi.getter(name="alwaysRetain")
    def always_retain(self) -> Optional[pulumi.Input[bool]]:
        """
        retain always.
        """
        return pulumi.get(self, "always_retain")

    @always_retain.setter
    def always_retain(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "always_retain", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify if the rule is disable or not. Defaults to `false`
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter(name="mostRecentlyPulled")
    def most_recently_pulled(self) -> Optional[pulumi.Input[int]]:
        """
        retain the most recently pulled n artifacts.
        """
        return pulumi.get(self, "most_recently_pulled")

    @most_recently_pulled.setter
    def most_recently_pulled(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "most_recently_pulled", value)

    @property
    @pulumi.getter(name="mostRecentlyPushed")
    def most_recently_pushed(self) -> Optional[pulumi.Input[int]]:
        """
        retain the most recently pushed n artifacts.
        """
        return pulumi.get(self, "most_recently_pushed")

    @most_recently_pushed.setter
    def most_recently_pushed(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "most_recently_pushed", value)

    @property
    @pulumi.getter(name="nDaysSinceLastPull")
    def n_days_since_last_pull(self) -> Optional[pulumi.Input[int]]:
        """
        retains the artifacts pulled within the lasts n days.
        """
        return pulumi.get(self, "n_days_since_last_pull")

    @n_days_since_last_pull.setter
    def n_days_since_last_pull(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "n_days_since_last_pull", value)

    @property
    @pulumi.getter(name="nDaysSinceLastPush")
    def n_days_since_last_push(self) -> Optional[pulumi.Input[int]]:
        """
        retains the artifacts pushed within the lasts n days.
        """
        return pulumi.get(self, "n_days_since_last_push")

    @n_days_since_last_push.setter
    def n_days_since_last_push(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "n_days_since_last_push", value)

    @property
    @pulumi.getter(name="repoExcluding")
    def repo_excluding(self) -> Optional[pulumi.Input[str]]:
        """
        For the repositories excuding.
        """
        return pulumi.get(self, "repo_excluding")

    @repo_excluding.setter
    def repo_excluding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repo_excluding", value)

    @property
    @pulumi.getter(name="repoMatching")
    def repo_matching(self) -> Optional[pulumi.Input[str]]:
        """
        For the repositories matching.
        """
        return pulumi.get(self, "repo_matching")

    @repo_matching.setter
    def repo_matching(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repo_matching", value)

    @property
    @pulumi.getter(name="tagExcluding")
    def tag_excluding(self) -> Optional[pulumi.Input[str]]:
        """
        For the tag excuding.
        """
        return pulumi.get(self, "tag_excluding")

    @tag_excluding.setter
    def tag_excluding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_excluding", value)

    @property
    @pulumi.getter(name="tagMatching")
    def tag_matching(self) -> Optional[pulumi.Input[str]]:
        """
        For the tag matching.
        """
        return pulumi.get(self, "tag_matching")

    @tag_matching.setter
    def tag_matching(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_matching", value)

    @property
    @pulumi.getter(name="untaggedArtifacts")
    def untagged_artifacts(self) -> Optional[pulumi.Input[bool]]:
        """
        with untagged artifacts. Defaults to `true`

        > Multiple tags or repositories must be provided as a comma-separated list wrapped into curly brackets `{ }`. Otherwise, the value is interpreted as a single value.
        """
        return pulumi.get(self, "untagged_artifacts")

    @untagged_artifacts.setter
    def untagged_artifacts(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "untagged_artifacts", value)


@pulumi.input_type
class RobotAccountPermissionArgs:
    def __init__(__self__, *,
                 accesses: pulumi.Input[Sequence[pulumi.Input['RobotAccountPermissionAccessArgs']]],
                 kind: pulumi.Input[str],
                 namespace: pulumi.Input[str]):
        RobotAccountPermissionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            accesses=accesses,
            kind=kind,
            namespace=namespace,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             accesses: pulumi.Input[Sequence[pulumi.Input['RobotAccountPermissionAccessArgs']]],
             kind: pulumi.Input[str],
             namespace: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("accesses", accesses)
        _setter("kind", kind)
        _setter("namespace", namespace)

    @property
    @pulumi.getter
    def accesses(self) -> pulumi.Input[Sequence[pulumi.Input['RobotAccountPermissionAccessArgs']]]:
        return pulumi.get(self, "accesses")

    @accesses.setter
    def accesses(self, value: pulumi.Input[Sequence[pulumi.Input['RobotAccountPermissionAccessArgs']]]):
        pulumi.set(self, "accesses", value)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class RobotAccountPermissionAccessArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[str],
                 resource: pulumi.Input[str],
                 effect: Optional[pulumi.Input[str]] = None):
        RobotAccountPermissionAccessArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action=action,
            resource=resource,
            effect=effect,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action: pulumi.Input[str],
             resource: pulumi.Input[str],
             effect: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("action", action)
        _setter("resource", resource)
        if effect is not None:
            _setter("effect", effect)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input[str]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)


