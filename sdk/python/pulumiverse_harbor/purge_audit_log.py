# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['PurgeAuditLogArgs', 'PurgeAuditLog']

@pulumi.input_type
class PurgeAuditLogArgs:
    def __init__(__self__, *,
                 audit_retention_hour: pulumi.Input[int],
                 include_operations: pulumi.Input[str],
                 schedule: pulumi.Input[str]):
        """
        The set of arguments for constructing a PurgeAuditLog resource.
        """
        PurgeAuditLogArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            audit_retention_hour=audit_retention_hour,
            include_operations=include_operations,
            schedule=schedule,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             audit_retention_hour: pulumi.Input[int],
             include_operations: pulumi.Input[str],
             schedule: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'auditRetentionHour' in kwargs:
            audit_retention_hour = kwargs['auditRetentionHour']
        if 'includeOperations' in kwargs:
            include_operations = kwargs['includeOperations']

        _setter("audit_retention_hour", audit_retention_hour)
        _setter("include_operations", include_operations)
        _setter("schedule", schedule)

    @property
    @pulumi.getter(name="auditRetentionHour")
    def audit_retention_hour(self) -> pulumi.Input[int]:
        return pulumi.get(self, "audit_retention_hour")

    @audit_retention_hour.setter
    def audit_retention_hour(self, value: pulumi.Input[int]):
        pulumi.set(self, "audit_retention_hour", value)

    @property
    @pulumi.getter(name="includeOperations")
    def include_operations(self) -> pulumi.Input[str]:
        return pulumi.get(self, "include_operations")

    @include_operations.setter
    def include_operations(self, value: pulumi.Input[str]):
        pulumi.set(self, "include_operations", value)

    @property
    @pulumi.getter
    def schedule(self) -> pulumi.Input[str]:
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: pulumi.Input[str]):
        pulumi.set(self, "schedule", value)


@pulumi.input_type
class _PurgeAuditLogState:
    def __init__(__self__, *,
                 audit_retention_hour: Optional[pulumi.Input[int]] = None,
                 include_operations: Optional[pulumi.Input[str]] = None,
                 schedule: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering PurgeAuditLog resources.
        """
        _PurgeAuditLogState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            audit_retention_hour=audit_retention_hour,
            include_operations=include_operations,
            schedule=schedule,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             audit_retention_hour: Optional[pulumi.Input[int]] = None,
             include_operations: Optional[pulumi.Input[str]] = None,
             schedule: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'auditRetentionHour' in kwargs:
            audit_retention_hour = kwargs['auditRetentionHour']
        if 'includeOperations' in kwargs:
            include_operations = kwargs['includeOperations']

        if audit_retention_hour is not None:
            _setter("audit_retention_hour", audit_retention_hour)
        if include_operations is not None:
            _setter("include_operations", include_operations)
        if schedule is not None:
            _setter("schedule", schedule)

    @property
    @pulumi.getter(name="auditRetentionHour")
    def audit_retention_hour(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "audit_retention_hour")

    @audit_retention_hour.setter
    def audit_retention_hour(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "audit_retention_hour", value)

    @property
    @pulumi.getter(name="includeOperations")
    def include_operations(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "include_operations")

    @include_operations.setter
    def include_operations(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "include_operations", value)

    @property
    @pulumi.getter
    def schedule(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule", value)


class PurgeAuditLog(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 audit_retention_hour: Optional[pulumi.Input[int]] = None,
                 include_operations: Optional[pulumi.Input[str]] = None,
                 schedule: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a PurgeAuditLog resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PurgeAuditLogArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a PurgeAuditLog resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param PurgeAuditLogArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PurgeAuditLogArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            PurgeAuditLogArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 audit_retention_hour: Optional[pulumi.Input[int]] = None,
                 include_operations: Optional[pulumi.Input[str]] = None,
                 schedule: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PurgeAuditLogArgs.__new__(PurgeAuditLogArgs)

            if audit_retention_hour is None and not opts.urn:
                raise TypeError("Missing required property 'audit_retention_hour'")
            __props__.__dict__["audit_retention_hour"] = audit_retention_hour
            if include_operations is None and not opts.urn:
                raise TypeError("Missing required property 'include_operations'")
            __props__.__dict__["include_operations"] = include_operations
            if schedule is None and not opts.urn:
                raise TypeError("Missing required property 'schedule'")
            __props__.__dict__["schedule"] = schedule
        super(PurgeAuditLog, __self__).__init__(
            'harbor:index/purgeAuditLog:PurgeAuditLog',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            audit_retention_hour: Optional[pulumi.Input[int]] = None,
            include_operations: Optional[pulumi.Input[str]] = None,
            schedule: Optional[pulumi.Input[str]] = None) -> 'PurgeAuditLog':
        """
        Get an existing PurgeAuditLog resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PurgeAuditLogState.__new__(_PurgeAuditLogState)

        __props__.__dict__["audit_retention_hour"] = audit_retention_hour
        __props__.__dict__["include_operations"] = include_operations
        __props__.__dict__["schedule"] = schedule
        return PurgeAuditLog(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="auditRetentionHour")
    def audit_retention_hour(self) -> pulumi.Output[int]:
        return pulumi.get(self, "audit_retention_hour")

    @property
    @pulumi.getter(name="includeOperations")
    def include_operations(self) -> pulumi.Output[str]:
        return pulumi.get(self, "include_operations")

    @property
    @pulumi.getter
    def schedule(self) -> pulumi.Output[str]:
        return pulumi.get(self, "schedule")

