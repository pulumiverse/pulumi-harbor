# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ProjectMemberGroupArgs', 'ProjectMemberGroup']

@pulumi.input_type
class ProjectMemberGroupArgs:
    def __init__(__self__, *,
                 project_id: pulumi.Input[str],
                 role: pulumi.Input[str],
                 type: pulumi.Input[str],
                 group_id: Optional[pulumi.Input[int]] = None,
                 group_name: Optional[pulumi.Input[str]] = None,
                 ldap_group_dn: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ProjectMemberGroup resource.
        """
        ProjectMemberGroupArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            project_id=project_id,
            role=role,
            type=type,
            group_id=group_id,
            group_name=group_name,
            ldap_group_dn=ldap_group_dn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             project_id: pulumi.Input[str],
             role: pulumi.Input[str],
             type: pulumi.Input[str],
             group_id: Optional[pulumi.Input[int]] = None,
             group_name: Optional[pulumi.Input[str]] = None,
             ldap_group_dn: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'projectId' in kwargs:
            project_id = kwargs['projectId']
        if 'groupId' in kwargs:
            group_id = kwargs['groupId']
        if 'groupName' in kwargs:
            group_name = kwargs['groupName']
        if 'ldapGroupDn' in kwargs:
            ldap_group_dn = kwargs['ldapGroupDn']

        _setter("project_id", project_id)
        _setter("role", role)
        _setter("type", type)
        if group_id is not None:
            _setter("group_id", group_id)
        if group_name is not None:
            _setter("group_name", group_name)
        if ldap_group_dn is not None:
            _setter("ldap_group_dn", ldap_group_dn)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter
    def role(self) -> pulumi.Input[str]:
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: pulumi.Input[str]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_name", value)

    @property
    @pulumi.getter(name="ldapGroupDn")
    def ldap_group_dn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ldap_group_dn")

    @ldap_group_dn.setter
    def ldap_group_dn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_group_dn", value)


@pulumi.input_type
class _ProjectMemberGroupState:
    def __init__(__self__, *,
                 group_id: Optional[pulumi.Input[int]] = None,
                 group_name: Optional[pulumi.Input[str]] = None,
                 ldap_group_dn: Optional[pulumi.Input[str]] = None,
                 member_id: Optional[pulumi.Input[int]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ProjectMemberGroup resources.
        """
        _ProjectMemberGroupState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            group_id=group_id,
            group_name=group_name,
            ldap_group_dn=ldap_group_dn,
            member_id=member_id,
            project_id=project_id,
            role=role,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             group_id: Optional[pulumi.Input[int]] = None,
             group_name: Optional[pulumi.Input[str]] = None,
             ldap_group_dn: Optional[pulumi.Input[str]] = None,
             member_id: Optional[pulumi.Input[int]] = None,
             project_id: Optional[pulumi.Input[str]] = None,
             role: Optional[pulumi.Input[str]] = None,
             type: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'groupId' in kwargs:
            group_id = kwargs['groupId']
        if 'groupName' in kwargs:
            group_name = kwargs['groupName']
        if 'ldapGroupDn' in kwargs:
            ldap_group_dn = kwargs['ldapGroupDn']
        if 'memberId' in kwargs:
            member_id = kwargs['memberId']
        if 'projectId' in kwargs:
            project_id = kwargs['projectId']

        if group_id is not None:
            _setter("group_id", group_id)
        if group_name is not None:
            _setter("group_name", group_name)
        if ldap_group_dn is not None:
            _setter("ldap_group_dn", ldap_group_dn)
        if member_id is not None:
            _setter("member_id", member_id)
        if project_id is not None:
            _setter("project_id", project_id)
        if role is not None:
            _setter("role", role)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_name", value)

    @property
    @pulumi.getter(name="ldapGroupDn")
    def ldap_group_dn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ldap_group_dn")

    @ldap_group_dn.setter
    def ldap_group_dn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_group_dn", value)

    @property
    @pulumi.getter(name="memberId")
    def member_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "member_id")

    @member_id.setter
    def member_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "member_id", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


class ProjectMemberGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 group_id: Optional[pulumi.Input[int]] = None,
                 group_name: Optional[pulumi.Input[str]] = None,
                 ldap_group_dn: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Example Usage

        ## Import

        Harbor project member group can be imported using the `project id` and `member id` eg, `<break><break>```sh<break> $ pulumi import harbor:index/projectMemberGroup:ProjectMemberGroup main /projects/10/members/200 <break>```<break><break>`

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ProjectMemberGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ## Import

        Harbor project member group can be imported using the `project id` and `member id` eg, `<break><break>```sh<break> $ pulumi import harbor:index/projectMemberGroup:ProjectMemberGroup main /projects/10/members/200 <break>```<break><break>`

        :param str resource_name: The name of the resource.
        :param ProjectMemberGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProjectMemberGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            ProjectMemberGroupArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 group_id: Optional[pulumi.Input[int]] = None,
                 group_name: Optional[pulumi.Input[str]] = None,
                 ldap_group_dn: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProjectMemberGroupArgs.__new__(ProjectMemberGroupArgs)

            __props__.__dict__["group_id"] = group_id
            __props__.__dict__["group_name"] = group_name
            __props__.__dict__["ldap_group_dn"] = ldap_group_dn
            if project_id is None and not opts.urn:
                raise TypeError("Missing required property 'project_id'")
            __props__.__dict__["project_id"] = project_id
            if role is None and not opts.urn:
                raise TypeError("Missing required property 'role'")
            __props__.__dict__["role"] = role
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["member_id"] = None
        super(ProjectMemberGroup, __self__).__init__(
            'harbor:index/projectMemberGroup:ProjectMemberGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            group_id: Optional[pulumi.Input[int]] = None,
            group_name: Optional[pulumi.Input[str]] = None,
            ldap_group_dn: Optional[pulumi.Input[str]] = None,
            member_id: Optional[pulumi.Input[int]] = None,
            project_id: Optional[pulumi.Input[str]] = None,
            role: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None) -> 'ProjectMemberGroup':
        """
        Get an existing ProjectMemberGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ProjectMemberGroupState.__new__(_ProjectMemberGroupState)

        __props__.__dict__["group_id"] = group_id
        __props__.__dict__["group_name"] = group_name
        __props__.__dict__["ldap_group_dn"] = ldap_group_dn
        __props__.__dict__["member_id"] = member_id
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["role"] = role
        __props__.__dict__["type"] = type
        return ProjectMemberGroup(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter(name="ldapGroupDn")
    def ldap_group_dn(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "ldap_group_dn")

    @property
    @pulumi.getter(name="memberId")
    def member_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "member_id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def role(self) -> pulumi.Output[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "type")

