{
    "name": "harbor",
    "displayName": "Harbor",
    "description": "A Pulumi package for creating and managing Harbor resources.",
    "keywords": [
        "pulumi",
        "harbor",
        "category/utility"
    ],
    "homepage": "https://www.pulumi.com",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`harbor` Terraform Provider](https://github.com/goharbor/terraform-provider-harbor).",
    "repository": "https://github.com/pulumiverse/pulumi-harbor",
    "pluginDownloadURL": "github://api.github.com/pulumiverse/pulumi-harbor",
    "publisher": "Pulumiverse",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "compatibility": "tfbridge20",
            "rootNamespace": "Pulumiverse"
        },
        "go": {
            "importBasePath": "github.com/pulumiverse/pulumi-harbor/sdk/v3/go/harbor",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "java": {
            "basePackage": "com.pulumiverse",
            "buildFiles": "",
            "gradleNexusPublishPluginVersion": "",
            "gradleTest": ""
        },
        "nodejs": {
            "packageName": "@pulumiverse/harbor",
            "packageDescription": "A Pulumi package for creating and managing Harbor resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/goharbor/terraform-provider-harbor)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-harbor` repo](https://github.com/pulumiverse/pulumi-harbor/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-harbor` repo](https://github.com/goharbor/terraform-provider-harbor/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "packageName": "pulumiverse_harbor",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/goharbor/terraform-provider-harbor)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-harbor` repo](https://github.com/pulumiverse/pulumi-harbor/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-harbor` repo](https://github.com/goharbor/terraform-provider-harbor/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {}
        }
    },
    "config": {
        "variables": {
            "apiVersion": {
                "type": "integer"
            },
            "insecure": {
                "type": "boolean"
            },
            "password": {
                "type": "string"
            },
            "url": {
                "type": "string"
            },
            "username": {
                "type": "string"
            }
        },
        "defaults": [
            "url"
        ]
    },
    "types": {
        "harbor:index/ReplicationFilter:ReplicationFilter": {
            "properties": {
                "decoration": {
                    "type": "string"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "resource": {
                    "type": "string"
                },
                "tag": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "harbor:index/RetentionPolicyRule:RetentionPolicyRule": {
            "properties": {
                "alwaysRetain": {
                    "type": "boolean",
                    "description": "retain always.\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "Specify if the rule is disable or not. Defaults to `false`\n"
                },
                "mostRecentlyPulled": {
                    "type": "integer",
                    "description": "retain the most recently pulled n artifacts.\n"
                },
                "mostRecentlyPushed": {
                    "type": "integer",
                    "description": "retain the most recently pushed n artifacts.\n"
                },
                "nDaysSinceLastPull": {
                    "type": "integer",
                    "description": "retains the artifacts pulled within the lasts n days.\n"
                },
                "nDaysSinceLastPush": {
                    "type": "integer",
                    "description": "retains the artifacts pushed within the lasts n days.\n"
                },
                "repoExcluding": {
                    "type": "string",
                    "description": "For the repositories excuding.\n"
                },
                "repoMatching": {
                    "type": "string",
                    "description": "For the repositories matching.\n"
                },
                "tagExcluding": {
                    "type": "string",
                    "description": "For the tag excuding.\n"
                },
                "tagMatching": {
                    "type": "string",
                    "description": "For the tag matching.\n"
                },
                "untaggedArtifacts": {
                    "type": "boolean",
                    "description": "with untagged artifacts. Defaults to `true`\n\n\u003e Multiple tags or repositories must be provided as a comma-separated list wrapped into curly brackets `{ }`. Otherwise, the value is interpreted as a single value.\n"
                }
            },
            "type": "object"
        },
        "harbor:index/RobotAccountPermission:RobotAccountPermission": {
            "properties": {
                "accesses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harbor:index/RobotAccountPermissionAccess:RobotAccountPermissionAccess"
                    }
                },
                "kind": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accesses",
                "kind",
                "namespace"
            ]
        },
        "harbor:index/RobotAccountPermissionAccess:RobotAccountPermissionAccess": {
            "properties": {
                "action": {
                    "type": "string"
                },
                "effect": {
                    "type": "string"
                },
                "resource": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "action",
                "resource"
            ]
        },
        "harbor:index/getProjectsProject:getProjectsProject": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "projectId": {
                    "type": "integer"
                },
                "public": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                },
                "vulnerabilityScanning": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "name",
                "projectId",
                "public",
                "type",
                "vulnerabilityScanning"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the harbor package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "apiVersion": {
                "type": "integer"
            },
            "insecure": {
                "type": "boolean"
            },
            "password": {
                "type": "string"
            },
            "url": {
                "type": "string"
            },
            "username": {
                "type": "string"
            }
        },
        "required": [
            "url"
        ],
        "inputProperties": {
            "apiVersion": {
                "type": "integer"
            },
            "insecure": {
                "type": "boolean"
            },
            "password": {
                "type": "string"
            },
            "url": {
                "type": "string"
            },
            "username": {
                "type": "string"
            }
        },
        "requiredInputs": [
            "url"
        ]
    },
    "resources": {
        "harbor:index/configAuth:ConfigAuth": {
            "properties": {
                "authMode": {
                    "type": "string"
                },
                "ldapBaseDn": {
                    "type": "string"
                },
                "ldapFilter": {
                    "type": "string"
                },
                "ldapGroupAdminDn": {
                    "type": "string"
                },
                "ldapGroupBaseDn": {
                    "type": "string"
                },
                "ldapGroupFilter": {
                    "type": "string"
                },
                "ldapGroupGid": {
                    "type": "string"
                },
                "ldapGroupMembership": {
                    "type": "string"
                },
                "ldapGroupScope": {
                    "type": "string"
                },
                "ldapGroupUid": {
                    "type": "string"
                },
                "ldapScope": {
                    "type": "string"
                },
                "ldapSearchDn": {
                    "type": "string"
                },
                "ldapSearchPassword": {
                    "type": "string",
                    "secret": true
                },
                "ldapUid": {
                    "type": "string"
                },
                "ldapUrl": {
                    "type": "string"
                },
                "ldapVerifyCert": {
                    "type": "boolean"
                },
                "oidcAdminGroup": {
                    "type": "string"
                },
                "oidcAutoOnboard": {
                    "type": "boolean"
                },
                "oidcClientId": {
                    "type": "string"
                },
                "oidcClientSecret": {
                    "type": "string",
                    "secret": true
                },
                "oidcEndpoint": {
                    "type": "string"
                },
                "oidcGroupFilter": {
                    "type": "string"
                },
                "oidcGroupsClaim": {
                    "type": "string"
                },
                "oidcName": {
                    "type": "string"
                },
                "oidcScope": {
                    "type": "string"
                },
                "oidcUserClaim": {
                    "type": "string"
                },
                "oidcVerifyCert": {
                    "type": "boolean"
                },
                "primaryAuthMode": {
                    "type": "boolean"
                }
            },
            "required": [
                "authMode"
            ],
            "inputProperties": {
                "authMode": {
                    "type": "string"
                },
                "ldapBaseDn": {
                    "type": "string"
                },
                "ldapFilter": {
                    "type": "string"
                },
                "ldapGroupAdminDn": {
                    "type": "string"
                },
                "ldapGroupBaseDn": {
                    "type": "string"
                },
                "ldapGroupFilter": {
                    "type": "string"
                },
                "ldapGroupGid": {
                    "type": "string"
                },
                "ldapGroupMembership": {
                    "type": "string"
                },
                "ldapGroupScope": {
                    "type": "string"
                },
                "ldapGroupUid": {
                    "type": "string"
                },
                "ldapScope": {
                    "type": "string"
                },
                "ldapSearchDn": {
                    "type": "string"
                },
                "ldapSearchPassword": {
                    "type": "string",
                    "secret": true
                },
                "ldapUid": {
                    "type": "string"
                },
                "ldapUrl": {
                    "type": "string"
                },
                "ldapVerifyCert": {
                    "type": "boolean"
                },
                "oidcAdminGroup": {
                    "type": "string"
                },
                "oidcAutoOnboard": {
                    "type": "boolean"
                },
                "oidcClientId": {
                    "type": "string"
                },
                "oidcClientSecret": {
                    "type": "string",
                    "secret": true
                },
                "oidcEndpoint": {
                    "type": "string"
                },
                "oidcGroupFilter": {
                    "type": "string"
                },
                "oidcGroupsClaim": {
                    "type": "string"
                },
                "oidcName": {
                    "type": "string"
                },
                "oidcScope": {
                    "type": "string"
                },
                "oidcUserClaim": {
                    "type": "string"
                },
                "oidcVerifyCert": {
                    "type": "boolean"
                },
                "primaryAuthMode": {
                    "type": "boolean"
                }
            },
            "requiredInputs": [
                "authMode"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ConfigAuth resources.\n",
                "properties": {
                    "authMode": {
                        "type": "string"
                    },
                    "ldapBaseDn": {
                        "type": "string"
                    },
                    "ldapFilter": {
                        "type": "string"
                    },
                    "ldapGroupAdminDn": {
                        "type": "string"
                    },
                    "ldapGroupBaseDn": {
                        "type": "string"
                    },
                    "ldapGroupFilter": {
                        "type": "string"
                    },
                    "ldapGroupGid": {
                        "type": "string"
                    },
                    "ldapGroupMembership": {
                        "type": "string"
                    },
                    "ldapGroupScope": {
                        "type": "string"
                    },
                    "ldapGroupUid": {
                        "type": "string"
                    },
                    "ldapScope": {
                        "type": "string"
                    },
                    "ldapSearchDn": {
                        "type": "string"
                    },
                    "ldapSearchPassword": {
                        "type": "string",
                        "secret": true
                    },
                    "ldapUid": {
                        "type": "string"
                    },
                    "ldapUrl": {
                        "type": "string"
                    },
                    "ldapVerifyCert": {
                        "type": "boolean"
                    },
                    "oidcAdminGroup": {
                        "type": "string"
                    },
                    "oidcAutoOnboard": {
                        "type": "boolean"
                    },
                    "oidcClientId": {
                        "type": "string"
                    },
                    "oidcClientSecret": {
                        "type": "string",
                        "secret": true
                    },
                    "oidcEndpoint": {
                        "type": "string"
                    },
                    "oidcGroupFilter": {
                        "type": "string"
                    },
                    "oidcGroupsClaim": {
                        "type": "string"
                    },
                    "oidcName": {
                        "type": "string"
                    },
                    "oidcScope": {
                        "type": "string"
                    },
                    "oidcUserClaim": {
                        "type": "string"
                    },
                    "oidcVerifyCert": {
                        "type": "boolean"
                    },
                    "primaryAuthMode": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            }
        },
        "harbor:index/configEmail:ConfigEmail": {
            "description": "## Example Usage\n\n```hcl\nresource \"harbor_config_email\" \"main\" {\n\temail_host = \"server.acme.com\"\n\temail_from = \"dont_reply@acme.com\"\n}\n```\n",
            "properties": {
                "emailFrom": {
                    "type": "string"
                },
                "emailHost": {
                    "type": "string"
                },
                "emailInsecure": {
                    "type": "boolean"
                },
                "emailPassword": {
                    "type": "string",
                    "secret": true
                },
                "emailPort": {
                    "type": "integer"
                },
                "emailSsl": {
                    "type": "boolean"
                },
                "emailUsername": {
                    "type": "string"
                }
            },
            "required": [
                "emailFrom",
                "emailHost"
            ],
            "inputProperties": {
                "emailFrom": {
                    "type": "string"
                },
                "emailHost": {
                    "type": "string"
                },
                "emailInsecure": {
                    "type": "boolean"
                },
                "emailPassword": {
                    "type": "string",
                    "secret": true
                },
                "emailPort": {
                    "type": "integer"
                },
                "emailSsl": {
                    "type": "boolean"
                },
                "emailUsername": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "emailFrom",
                "emailHost"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ConfigEmail resources.\n",
                "properties": {
                    "emailFrom": {
                        "type": "string"
                    },
                    "emailHost": {
                        "type": "string"
                    },
                    "emailInsecure": {
                        "type": "boolean"
                    },
                    "emailPassword": {
                        "type": "string",
                        "secret": true
                    },
                    "emailPort": {
                        "type": "integer"
                    },
                    "emailSsl": {
                        "type": "boolean"
                    },
                    "emailUsername": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "harbor:index/configSecurity:ConfigSecurity": {
            "description": "## Example Usage\n\n```hcl\nresource \"harbor_config_security\" \"main\" {\n  cve_allowlist = [\"CVE-456\", \"CVE-123\"]\n  expires_at = \"1701167767\"\n}\n```\n\n## Import\n\nThe list can be imported using the `id` eg, ` \u003cbreak\u003e\u003cbreak\u003e```sh\u003cbreak\u003e $ pulumi import harbor:index/configSecurity:ConfigSecurity main \"7\" \u003cbreak\u003e```\u003cbreak\u003e\u003cbreak\u003e ` \u003e Note that at this point of time Harbor doesn't has any api endpoint for deleting this list. Only updating the records.\n",
            "properties": {
                "creationTime": {
                    "type": "string",
                    "description": "Time of creation of the list.\n"
                },
                "cveAllowlists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "System allowlist. Vulnerabilities in this list will be ignored when pushing and pulling images. Should be in the format or `[\"CVE-123\", \"CVE-145\"]` or `[\"CVE-123\"]`\n"
                },
                "expiresAt": {
                    "type": "integer",
                    "description": "The time for expiration of the allowlist, in the form of seconds since epoch. This is an optional attribute, if it's not set the CVE allowlist does not expire.\n"
                },
                "updateTime": {
                    "type": "string",
                    "description": "Time of update of the list.\n"
                }
            },
            "required": [
                "creationTime",
                "cveAllowlists",
                "updateTime"
            ],
            "inputProperties": {
                "cveAllowlists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "System allowlist. Vulnerabilities in this list will be ignored when pushing and pulling images. Should be in the format or `[\"CVE-123\", \"CVE-145\"]` or `[\"CVE-123\"]`\n"
                },
                "expiresAt": {
                    "type": "integer",
                    "description": "The time for expiration of the allowlist, in the form of seconds since epoch. This is an optional attribute, if it's not set the CVE allowlist does not expire.\n"
                }
            },
            "requiredInputs": [
                "cveAllowlists"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ConfigSecurity resources.\n",
                "properties": {
                    "creationTime": {
                        "type": "string",
                        "description": "Time of creation of the list.\n"
                    },
                    "cveAllowlists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "System allowlist. Vulnerabilities in this list will be ignored when pushing and pulling images. Should be in the format or `[\"CVE-123\", \"CVE-145\"]` or `[\"CVE-123\"]`\n"
                    },
                    "expiresAt": {
                        "type": "integer",
                        "description": "The time for expiration of the allowlist, in the form of seconds since epoch. This is an optional attribute, if it's not set the CVE allowlist does not expire.\n"
                    },
                    "updateTime": {
                        "type": "string",
                        "description": "Time of update of the list.\n"
                    }
                },
                "type": "object"
            }
        },
        "harbor:index/configSystem:ConfigSystem": {
            "description": "## Example Usage\n\n```hcl\nresource \"harbor_config_system\" \"main\" {\n  project_creation_restriction = \"adminonly\"\n  robot_token_expiration       = 30\n  robot_name_prefix            = \"harbor@\"\n}\n```\n",
            "properties": {
                "projectCreationRestriction": {
                    "type": "string"
                },
                "readOnly": {
                    "type": "boolean"
                },
                "robotNamePrefix": {
                    "type": "string"
                },
                "robotTokenExpiration": {
                    "type": "integer"
                },
                "scannerSkipUpdatePulltime": {
                    "type": "boolean"
                }
            },
            "inputProperties": {
                "projectCreationRestriction": {
                    "type": "string"
                },
                "readOnly": {
                    "type": "boolean"
                },
                "robotNamePrefix": {
                    "type": "string"
                },
                "robotTokenExpiration": {
                    "type": "integer"
                },
                "scannerSkipUpdatePulltime": {
                    "type": "boolean"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ConfigSystem resources.\n",
                "properties": {
                    "projectCreationRestriction": {
                        "type": "string"
                    },
                    "readOnly": {
                        "type": "boolean"
                    },
                    "robotNamePrefix": {
                        "type": "string"
                    },
                    "robotTokenExpiration": {
                        "type": "integer"
                    },
                    "scannerSkipUpdatePulltime": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            }
        },
        "harbor:index/garbageCollection:GarbageCollection": {
            "description": "## Example Usage\n\n```hcl\nresource \"harbor_garbage_collection\" \"main\" {\n  schedule         = \"Daily\"\n  delete_untagged  = true\n\n}\n```\n",
            "properties": {
                "deleteUntagged": {
                    "type": "boolean"
                },
                "schedule": {
                    "type": "string"
                }
            },
            "required": [
                "schedule"
            ],
            "inputProperties": {
                "deleteUntagged": {
                    "type": "boolean"
                },
                "schedule": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "schedule"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GarbageCollection resources.\n",
                "properties": {
                    "deleteUntagged": {
                        "type": "boolean"
                    },
                    "schedule": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "harbor:index/group:Group": {
            "description": "## Example Usage\n\n```hcl\n\nresource \"harbor_group\" \"storage-group\" {\n  group_name = \"storage-group\"\n  group_type = 3\n}\n```\n\n## Import\n\nAn OIDC group can be imported using the `group id` eg, ` \u003cbreak\u003e\u003cbreak\u003e```sh\u003cbreak\u003e $ pulumi import harbor:index/group:Group storage-group /usergroups/19 \u003cbreak\u003e```\u003cbreak\u003e\u003cbreak\u003e `\n",
            "properties": {
                "groupName": {
                    "type": "string"
                },
                "groupType": {
                    "type": "integer"
                },
                "ldapGroupDn": {
                    "type": "string"
                }
            },
            "required": [
                "groupName",
                "groupType"
            ],
            "inputProperties": {
                "groupName": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "groupType": {
                    "type": "integer"
                },
                "ldapGroupDn": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "groupName",
                "groupType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Group resources.\n",
                "properties": {
                    "groupName": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "groupType": {
                        "type": "integer"
                    },
                    "ldapGroupDn": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "harbor:index/immutableTagRule:ImmutableTagRule": {
            "description": "## Example Usage\n\n```hcl\nresource \"harbor_project\" \"main\" {\n\tname = \"acctest\"\n}\n\nresource \"harbor_immutable_tag_rule\" \"main\" {\n\tproject_id = harbor_project.main.id\n\trepo_matching = \"**\"\n\ttag_excluding = \"latest\"\n}\n```\n\n## Import\n\nHarbor immutable tag rule can be imported using the `project and immutabletagrule ids` eg, ` \u003cbreak\u003e\u003cbreak\u003e```sh\u003cbreak\u003e $ pulumi import harbor:index/immutableTagRule:ImmutableTagRule main /projects/4/immutabletagrules/25 \u003cbreak\u003e```\u003cbreak\u003e\u003cbreak\u003e `\n",
            "properties": {
                "disabled": {
                    "type": "boolean",
                    "description": "Specify if the rule is disable or not. Defaults to `false`\n"
                },
                "projectId": {
                    "type": "string"
                },
                "repoExcluding": {
                    "type": "string",
                    "description": "For the repositories excuding.\n"
                },
                "repoMatching": {
                    "type": "string",
                    "description": "For the repositories matching.\n"
                },
                "tagExcluding": {
                    "type": "string",
                    "description": "For the tag excuding.\n"
                },
                "tagMatching": {
                    "type": "string",
                    "description": "For the tag matching.\n"
                }
            },
            "required": [
                "projectId"
            ],
            "inputProperties": {
                "disabled": {
                    "type": "boolean",
                    "description": "Specify if the rule is disable or not. Defaults to `false`\n"
                },
                "projectId": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "repoExcluding": {
                    "type": "string",
                    "description": "For the repositories excuding.\n"
                },
                "repoMatching": {
                    "type": "string",
                    "description": "For the repositories matching.\n"
                },
                "tagExcluding": {
                    "type": "string",
                    "description": "For the tag excuding.\n"
                },
                "tagMatching": {
                    "type": "string",
                    "description": "For the tag matching.\n"
                }
            },
            "requiredInputs": [
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ImmutableTagRule resources.\n",
                "properties": {
                    "disabled": {
                        "type": "boolean",
                        "description": "Specify if the rule is disable or not. Defaults to `false`\n"
                    },
                    "projectId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "repoExcluding": {
                        "type": "string",
                        "description": "For the repositories excuding.\n"
                    },
                    "repoMatching": {
                        "type": "string",
                        "description": "For the repositories matching.\n"
                    },
                    "tagExcluding": {
                        "type": "string",
                        "description": "For the tag excuding.\n"
                    },
                    "tagMatching": {
                        "type": "string",
                        "description": "For the tag matching.\n"
                    }
                },
                "type": "object"
            }
        },
        "harbor:index/interrogationServices:InterrogationServices": {
            "description": "## Example Usage\n\n```hcl\nresource \"harbor_interrogation_services\" \"main\" {\n  vulnerability_scan_policy = \"Daily\"\n\n}\n```\n",
            "properties": {
                "defaultScanner": {
                    "type": "string",
                    "description": "Sets the default interrogation service **Clair**\n"
                },
                "vulnerabilityScanPolicy": {
                    "type": "string",
                    "description": "The frequency of the vulnerability scanning is done. This can be `Daily`, `Weekly`, `Monthly` or can be a custom cron string.\n"
                }
            },
            "required": [
                "vulnerabilityScanPolicy"
            ],
            "inputProperties": {
                "defaultScanner": {
                    "type": "string",
                    "description": "Sets the default interrogation service **Clair**\n"
                },
                "vulnerabilityScanPolicy": {
                    "type": "string",
                    "description": "The frequency of the vulnerability scanning is done. This can be `Daily`, `Weekly`, `Monthly` or can be a custom cron string.\n"
                }
            },
            "requiredInputs": [
                "vulnerabilityScanPolicy"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InterrogationServices resources.\n",
                "properties": {
                    "defaultScanner": {
                        "type": "string",
                        "description": "Sets the default interrogation service **Clair**\n"
                    },
                    "vulnerabilityScanPolicy": {
                        "type": "string",
                        "description": "The frequency of the vulnerability scanning is done. This can be `Daily`, `Weekly`, `Monthly` or can be a custom cron string.\n"
                    }
                },
                "type": "object"
            }
        },
        "harbor:index/label:Label": {
            "description": "## Example Usage\n\n* Create a global label within harbor\n```hcl\n\tresource \"harbor_label\" \"main\" {\n\t\tname  \t\t= \"accTest\"\n\t\tcolor \t\t= \"#FF0000\"\n\t\tdescription \t= \"Description to for acceptance test\"\n\t}\n```\n\n* Creates a label for project \n```hcl\n\tresource \"harbor_project\" \"main\" {\n\t\tname = \"acctest\"\n\t}\n\n\tresource \"harbor_label\" \"main\" {\n\t\tname  \t\t= \"accTest\"\n\t\tcolor \t\t= \"#FFFFFF\"\n\t\tdescription = \"Description for acceptance test\"\n\t\tproject_id\t= harbor_project.main.id\n\t}\n```\n\n## Import\n\nHarbor label can be imported using the `label id` eg, ` \u003cbreak\u003e\u003cbreak\u003e```sh\u003cbreak\u003e $ pulumi import harbor:index/label:Label main /labels/1 \u003cbreak\u003e```\u003cbreak\u003e\u003cbreak\u003e `\n",
            "properties": {
                "color": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "projectId": {
                    "type": "string"
                },
                "scope": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "scope"
            ],
            "inputProperties": {
                "color": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Label resources.\n",
                "properties": {
                    "color": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "scope": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "harbor:index/project:Project": {
            "description": "## Example Usage\n\n```hcl\nresource \"harbor_project\" \"main\" {\n    name                    = \"main\"\n    public                  = false               # (Optional) Default value is false\n    vulnerability_scanning  = true                # (Optional) Default vale is true. Automatically scan images on push\n    enable_content_trust    = true                # (Optional) Default vale is false. Deny unsigned images from being pulled\n}\n```\n\n## Harbor project example as proxy cache\n\n```hcl\nresource \"harbor_project\" \"main\" {\n  name        = \"acctest\"\n  registry_id = harbor_registry.docker.registry_id\n}\n\nresource \"harbor_registry\" \"docker\" {\n  provider_name = \"docker-hub\"\n  name          = \"test\"\n  endpoint_url  = \"https://hub.docker.com\"\n}\n```\n\n## Import\n\nHarbor project can be imported using the `project id` eg, ` \u003cbreak\u003e\u003cbreak\u003e```sh\u003cbreak\u003e $ pulumi import harbor:index/project:Project main /projects/1 \u003cbreak\u003e```\u003cbreak\u003e\u003cbreak\u003e `\n",
            "properties": {
                "cveAllowlists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project allowlist allows vulnerabilities in this list to be ignored in this project when pushing and pulling images. Should be in the format or `[\"CVE-123\", \"CVE-145\"]` or `[\"CVE-123\"]`\n"
                },
                "deploymentSecurity": {
                    "type": "string",
                    "description": "Prevent deployment of images with vulnerability severity equal or higher than the specified value. Images must be scanned before this takes effect. Possible values: `critical`, `high`, `medium`, `low`, `none`. (Default: `\"\"` - empty)\n"
                },
                "enableContentTrust": {
                    "type": "boolean",
                    "description": "Enables Content Trust for project. When enabled it queries the embedded docker notary server. Can be set to `\"true\"` or `\"false\"` (Default: false)\n"
                },
                "forceDestroy": {
                    "type": "boolean",
                    "description": "A boolean that indicates all repositories should be deleted from the project so that the project can be destroyed without error. These repositories are *not* recoverable.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the project that will be created in harbor.\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "The id of the project with harbor.\n"
                },
                "public": {
                    "type": "string",
                    "description": "The project will be public accessibility. Can be set to `\"true\"` or `\"false\"` (Default: false)\n"
                },
                "registryId": {
                    "type": "integer",
                    "description": "To enabled project as Proxy Cache\n"
                },
                "storageQuota": {
                    "type": "integer",
                    "description": "The storage quota of the project in GB's\n"
                },
                "vulnerabilityScanning": {
                    "type": "boolean",
                    "description": "Images will be scanned for vulnerabilities when push to harbor. Can be set to `\"true\"` or `\"false\"` (Default: true)\n"
                }
            },
            "required": [
                "name",
                "projectId",
                "registryId"
            ],
            "inputProperties": {
                "cveAllowlists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project allowlist allows vulnerabilities in this list to be ignored in this project when pushing and pulling images. Should be in the format or `[\"CVE-123\", \"CVE-145\"]` or `[\"CVE-123\"]`\n"
                },
                "deploymentSecurity": {
                    "type": "string",
                    "description": "Prevent deployment of images with vulnerability severity equal or higher than the specified value. Images must be scanned before this takes effect. Possible values: `critical`, `high`, `medium`, `low`, `none`. (Default: `\"\"` - empty)\n"
                },
                "enableContentTrust": {
                    "type": "boolean",
                    "description": "Enables Content Trust for project. When enabled it queries the embedded docker notary server. Can be set to `\"true\"` or `\"false\"` (Default: false)\n"
                },
                "forceDestroy": {
                    "type": "boolean",
                    "description": "A boolean that indicates all repositories should be deleted from the project so that the project can be destroyed without error. These repositories are *not* recoverable.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the project that will be created in harbor.\n",
                    "willReplaceOnChanges": true
                },
                "public": {
                    "type": "string",
                    "description": "The project will be public accessibility. Can be set to `\"true\"` or `\"false\"` (Default: false)\n"
                },
                "registryId": {
                    "type": "integer",
                    "description": "To enabled project as Proxy Cache\n",
                    "willReplaceOnChanges": true
                },
                "storageQuota": {
                    "type": "integer",
                    "description": "The storage quota of the project in GB's\n"
                },
                "vulnerabilityScanning": {
                    "type": "boolean",
                    "description": "Images will be scanned for vulnerabilities when push to harbor. Can be set to `\"true\"` or `\"false\"` (Default: true)\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Project resources.\n",
                "properties": {
                    "cveAllowlists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Project allowlist allows vulnerabilities in this list to be ignored in this project when pushing and pulling images. Should be in the format or `[\"CVE-123\", \"CVE-145\"]` or `[\"CVE-123\"]`\n"
                    },
                    "deploymentSecurity": {
                        "type": "string",
                        "description": "Prevent deployment of images with vulnerability severity equal or higher than the specified value. Images must be scanned before this takes effect. Possible values: `critical`, `high`, `medium`, `low`, `none`. (Default: `\"\"` - empty)\n"
                    },
                    "enableContentTrust": {
                        "type": "boolean",
                        "description": "Enables Content Trust for project. When enabled it queries the embedded docker notary server. Can be set to `\"true\"` or `\"false\"` (Default: false)\n"
                    },
                    "forceDestroy": {
                        "type": "boolean",
                        "description": "A boolean that indicates all repositories should be deleted from the project so that the project can be destroyed without error. These repositories are *not* recoverable.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the project that will be created in harbor.\n",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "The id of the project with harbor.\n"
                    },
                    "public": {
                        "type": "string",
                        "description": "The project will be public accessibility. Can be set to `\"true\"` or `\"false\"` (Default: false)\n"
                    },
                    "registryId": {
                        "type": "integer",
                        "description": "To enabled project as Proxy Cache\n",
                        "willReplaceOnChanges": true
                    },
                    "storageQuota": {
                        "type": "integer",
                        "description": "The storage quota of the project in GB's\n"
                    },
                    "vulnerabilityScanning": {
                        "type": "boolean",
                        "description": "Images will be scanned for vulnerabilities when push to harbor. Can be set to `\"true\"` or `\"false\"` (Default: true)\n"
                    }
                },
                "type": "object"
            }
        },
        "harbor:index/projectMemberGroup:ProjectMemberGroup": {
            "description": "## Example Usage\n\n```hcl\nresource \"harbor_project\" \"main\" {\n    name = \"main\"\n}\n\nresource \"harbor_project_member_group\" \"main\" {\n  project_id    = harbor_project.main.id\n  group_name    = \"testing1\"\n  role          = \"projectadmin\"\n  type          = \"oidc\"\n}\n\n```\n\n## Import\n\nHarbor project member group can be imported using the `project id` and `member id` eg, ` \u003cbreak\u003e\u003cbreak\u003e```sh\u003cbreak\u003e $ pulumi import harbor:index/projectMemberGroup:ProjectMemberGroup main /projects/10/members/200 \u003cbreak\u003e```\u003cbreak\u003e\u003cbreak\u003e `\n",
            "properties": {
                "groupId": {
                    "type": "integer"
                },
                "groupName": {
                    "type": "string"
                },
                "ldapGroupDn": {
                    "type": "string"
                },
                "memberId": {
                    "type": "integer"
                },
                "projectId": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "required": [
                "memberId",
                "projectId",
                "role",
                "type"
            ],
            "inputProperties": {
                "groupId": {
                    "type": "integer",
                    "willReplaceOnChanges": true
                },
                "groupName": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "ldapGroupDn": {
                    "type": "string"
                },
                "projectId": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "role": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "projectId",
                "role",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectMemberGroup resources.\n",
                "properties": {
                    "groupId": {
                        "type": "integer",
                        "willReplaceOnChanges": true
                    },
                    "groupName": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "ldapGroupDn": {
                        "type": "string"
                    },
                    "memberId": {
                        "type": "integer"
                    },
                    "projectId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "role": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "harbor:index/projectMemberUser:ProjectMemberUser": {
            "description": "## Example Usage\n\n```hcl\nresource \"harbor_project\" \"main\" {\n    name = \"main\"\n}\n\nresource \"harbor_project_member_user\" \"main\" {\n  project_id    = harbor_project.main.id\n  user_name     = \"testing1\"\n  role          = \"projectadmin\"\n}\n\n```\n\n## Import\n\nHarbor project member user can be imported using the `project id` and `member id` eg, ` \u003cbreak\u003e\u003cbreak\u003e```sh\u003cbreak\u003e $ pulumi import harbor:index/projectMemberUser:ProjectMemberUser main /projects/10/members/200 \u003cbreak\u003e```\u003cbreak\u003e\u003cbreak\u003e `\n",
            "properties": {
                "memberId": {
                    "type": "integer"
                },
                "projectId": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "userName": {
                    "type": "string"
                }
            },
            "required": [
                "memberId",
                "projectId",
                "role",
                "userName"
            ],
            "inputProperties": {
                "projectId": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "role": {
                    "type": "string"
                },
                "userName": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "projectId",
                "role",
                "userName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectMemberUser resources.\n",
                "properties": {
                    "memberId": {
                        "type": "integer"
                    },
                    "projectId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "role": {
                        "type": "string"
                    },
                    "userName": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "harbor:index/projectWebhook:ProjectWebhook": {
            "description": "## Example Usage\n\n```hcl\nresource \"harbor_project_webhook\" \"main\" {\n  name        = \"test_webhook\"\n  address     = \"https://webhook.domain.com\"\n  project_id  = harbor_project.main.id\n  notify_type = \"http\"\n\n  events_types = [\n    \"DELETE_ARTIFACT\",\n    \"PULL_ARTIFACT\",\n    \"PUSH_ARTIFACT\",\n    \"QUOTA_EXCEED\",\n    \"QUOTA_WARNING\",\n    \"REPLICATION\",\n    \"SCANNING_FAILED\",\n    \"SCANNING_COMPLETED\",\n    \"TAG_RETENTION\"\n  ]\n\n}\n\nresource \"harbor_project\" \"main\" {\n  name = \"test-project\"\n}\n```\n",
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The address of the webhook\n"
                },
                "authHeader": {
                    "type": "string",
                    "description": "authentication header for you the webhook\n"
                },
                "description": {
                    "type": "string",
                    "description": "_ (Optional, string) A description of the webhook\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": ", To enable / disable the webhook. Default `true`\n"
                },
                "eventsTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": ") The type events you want to subscript to can be `DELETE_ARTIFACT`, `PULL_ARTIFACT`, `PUSH_ARTIFACT`, `QUOTA_EXCEED`, `QUOTA_WARNING`, `REPLICATION`, `SCANNING_FAILED`, `SCANNING_COMPLETED`, `TAG_RETENTION`\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the webhook that will be created in harbor.\n"
                },
                "notifyType": {
                    "type": "string",
                    "description": "The notification type either `http` or `slack`\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project id (**/projects/ID**) of the harbor that webhook related to.\n"
                },
                "skipCertVerify": {
                    "type": "boolean",
                    "description": "checks the for validate SSL certificate.\n"
                }
            },
            "required": [
                "address",
                "eventsTypes",
                "name",
                "notifyType",
                "projectId"
            ],
            "inputProperties": {
                "address": {
                    "type": "string",
                    "description": "The address of the webhook\n"
                },
                "authHeader": {
                    "type": "string",
                    "description": "authentication header for you the webhook\n"
                },
                "description": {
                    "type": "string",
                    "description": "_ (Optional, string) A description of the webhook\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": ", To enable / disable the webhook. Default `true`\n"
                },
                "eventsTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": ") The type events you want to subscript to can be `DELETE_ARTIFACT`, `PULL_ARTIFACT`, `PUSH_ARTIFACT`, `QUOTA_EXCEED`, `QUOTA_WARNING`, `REPLICATION`, `SCANNING_FAILED`, `SCANNING_COMPLETED`, `TAG_RETENTION`\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the webhook that will be created in harbor.\n",
                    "willReplaceOnChanges": true
                },
                "notifyType": {
                    "type": "string",
                    "description": "The notification type either `http` or `slack`\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project id (**/projects/ID**) of the harbor that webhook related to.\n"
                },
                "skipCertVerify": {
                    "type": "boolean",
                    "description": "checks the for validate SSL certificate.\n"
                }
            },
            "requiredInputs": [
                "address",
                "eventsTypes",
                "notifyType",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectWebhook resources.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The address of the webhook\n"
                    },
                    "authHeader": {
                        "type": "string",
                        "description": "authentication header for you the webhook\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "_ (Optional, string) A description of the webhook\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": ", To enable / disable the webhook. Default `true`\n"
                    },
                    "eventsTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": ") The type events you want to subscript to can be `DELETE_ARTIFACT`, `PULL_ARTIFACT`, `PUSH_ARTIFACT`, `QUOTA_EXCEED`, `QUOTA_WARNING`, `REPLICATION`, `SCANNING_FAILED`, `SCANNING_COMPLETED`, `TAG_RETENTION`\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the webhook that will be created in harbor.\n",
                        "willReplaceOnChanges": true
                    },
                    "notifyType": {
                        "type": "string",
                        "description": "The notification type either `http` or `slack`\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project id (**/projects/ID**) of the harbor that webhook related to.\n"
                    },
                    "skipCertVerify": {
                        "type": "boolean",
                        "description": "checks the for validate SSL certificate.\n"
                    }
                },
                "type": "object"
            }
        },
        "harbor:index/purgeAuditLog:PurgeAuditLog": {
            "properties": {
                "auditRetentionHour": {
                    "type": "integer"
                },
                "includeOperations": {
                    "type": "string"
                },
                "schedule": {
                    "type": "string"
                }
            },
            "required": [
                "auditRetentionHour",
                "includeOperations",
                "schedule"
            ],
            "inputProperties": {
                "auditRetentionHour": {
                    "type": "integer"
                },
                "includeOperations": {
                    "type": "string"
                },
                "schedule": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "auditRetentionHour",
                "includeOperations",
                "schedule"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PurgeAuditLog resources.\n",
                "properties": {
                    "auditRetentionHour": {
                        "type": "integer"
                    },
                    "includeOperations": {
                        "type": "string"
                    },
                    "schedule": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "harbor:index/registry:Registry": {
            "description": "## Example Usage\n\n```hcl\nresource \"harbor_registry\" \"main\" {\n  provider_name = \"docker-hub\"\n  name          = \"test_docker_harbor\"\n  endpoint_url  = \"https://hub.docker.com\"\n}\n```\n\n## Import\n\nHarbor project can be imported using the `registry id` eg, ` \u003cbreak\u003e\u003cbreak\u003e```sh\u003cbreak\u003e $ pulumi import harbor:index/registry:Registry main /registries/7 \u003cbreak\u003e```\u003cbreak\u003e\u003cbreak\u003e `\n",
            "properties": {
                "accessId": {
                    "type": "string"
                },
                "accessSecret": {
                    "type": "string",
                    "secret": true
                },
                "description": {
                    "type": "string"
                },
                "endpointUrl": {
                    "type": "string"
                },
                "insecure": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "providerName": {
                    "type": "string"
                },
                "registryId": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                }
            },
            "required": [
                "endpointUrl",
                "name",
                "providerName",
                "registryId",
                "status"
            ],
            "inputProperties": {
                "accessId": {
                    "type": "string"
                },
                "accessSecret": {
                    "type": "string",
                    "secret": true
                },
                "description": {
                    "type": "string"
                },
                "endpointUrl": {
                    "type": "string"
                },
                "insecure": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "providerName": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "endpointUrl",
                "providerName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Registry resources.\n",
                "properties": {
                    "accessId": {
                        "type": "string"
                    },
                    "accessSecret": {
                        "type": "string",
                        "secret": true
                    },
                    "description": {
                        "type": "string"
                    },
                    "endpointUrl": {
                        "type": "string"
                    },
                    "insecure": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "providerName": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "registryId": {
                        "type": "integer"
                    },
                    "status": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "harbor:index/replication:Replication": {
            "description": "## Example Usage\n\n```hcl\nresource \"harbor_registry\" \"main\" {\n  provider_name = \"docker-hub\"\n  name          = \"test_docker_harbor\"\n  endpoint_url  = \"https://hub.docker.com\"\n\n}\n\n\nresource \"harbor_replication\" \"push\" {\n  name        = \"test_push\"\n  action      = \"push\"\n  registry_id = harbor_registry.main.registry_id\n}\n\nresource \"harbor_replication\" \"alpine\" {\n  name        = \"alpine\"\n  action      = \"pull\"\n  registry_id = harbor_registry.main.registry_id\n  schedule = \"0 0/15 * * * *\"\n  filters {\n    name = \"library/alpine\"\n  }\n  filters {\n    tag = \"3.*.*\"\n  }\n  filters {\n    resource = \"artifact\"\n  }\n  filters {\n    labels = [\"qa\"]\n  }\n}\n\nresource \"harbor_replication\" \"alpine\" {\n  name        = \"alpine\"\n  action      = \"pull\"\n  registry_id = harbor_registry.main.registry_id\n  schedule = \"event_based\"\n  filters {\n    name = \"library/alpine\"\n  }\n  filters {\n    tag = \"3.*.*\"\n  }\n}\n\n```\n\n## Import\n\nHarbor project can be imported using the `replication id` eg, ` \u003cbreak\u003e\u003cbreak\u003e```sh\u003cbreak\u003e $ pulumi import harbor:index/replication:Replication main /replication/policies/1 \u003cbreak\u003e```\u003cbreak\u003e\u003cbreak\u003e `\n",
            "properties": {
                "action": {
                    "type": "string"
                },
                "deletion": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "destNamespace": {
                    "type": "string"
                },
                "destNamespaceReplace": {
                    "type": "integer"
                },
                "enabled": {
                    "type": "boolean"
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harbor:index/ReplicationFilter:ReplicationFilter"
                    }
                },
                "name": {
                    "type": "string"
                },
                "override": {
                    "type": "boolean"
                },
                "registryId": {
                    "type": "integer"
                },
                "replicationPolicyId": {
                    "type": "integer"
                },
                "schedule": {
                    "type": "string"
                },
                "speed": {
                    "type": "integer"
                }
            },
            "required": [
                "action",
                "name",
                "registryId",
                "replicationPolicyId"
            ],
            "inputProperties": {
                "action": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "deletion": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "destNamespace": {
                    "type": "string"
                },
                "destNamespaceReplace": {
                    "type": "integer"
                },
                "enabled": {
                    "type": "boolean"
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harbor:index/ReplicationFilter:ReplicationFilter"
                    }
                },
                "name": {
                    "type": "string"
                },
                "override": {
                    "type": "boolean"
                },
                "registryId": {
                    "type": "integer"
                },
                "schedule": {
                    "type": "string"
                },
                "speed": {
                    "type": "integer"
                }
            },
            "requiredInputs": [
                "action",
                "registryId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Replication resources.\n",
                "properties": {
                    "action": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "deletion": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "destNamespace": {
                        "type": "string"
                    },
                    "destNamespaceReplace": {
                        "type": "integer"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harbor:index/ReplicationFilter:ReplicationFilter"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "override": {
                        "type": "boolean"
                    },
                    "registryId": {
                        "type": "integer"
                    },
                    "replicationPolicyId": {
                        "type": "integer"
                    },
                    "schedule": {
                        "type": "string"
                    },
                    "speed": {
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "harbor:index/retentionPolicy:RetentionPolicy": {
            "description": "## Example Usage\n\n```hcl\nresource \"harbor_project\" \"main\" {\n  name                = \"acctest\"\n}\n\nresource \"harbor_retention_policy\" \"main\" {\n\tscope = harbor_project.main.id\n\tschedule = \"Daily\"\n\trule {\n\t\tn_days_since_last_pull = 5\n\t\trepo_matching = \"**\"\n\t\ttag_matching = \"latest\"\n\t}\n\trule {\n\t\tn_days_since_last_push = 10\n\t\trepo_matching = \"**\"\n\t\ttag_matching = \"{latest,snapshot}\"\n\t}\n\n}\n```\n\n## Import\n\nHarbor retention policy can be imported using the `retention_policy id` eg, ` \u003cbreak\u003e\u003cbreak\u003e```sh\u003cbreak\u003e $ pulumi import harbor:index/retentionPolicy:RetentionPolicy main /retentions/10 \u003cbreak\u003e```\u003cbreak\u003e\u003cbreak\u003e `\n",
            "properties": {
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harbor:index/RetentionPolicyRule:RetentionPolicyRule"
                    },
                    "description": "Al collection of rule blocks as documented below.\n"
                },
                "schedule": {
                    "type": "string",
                    "description": "The schedule of when you would like the policy to run. This can be `Hourly`, `Daily`, `Weekly` or can be a custom cron string.\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The project id of which you would like to apply this policy.\n"
                }
            },
            "required": [
                "rules",
                "scope"
            ],
            "inputProperties": {
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harbor:index/RetentionPolicyRule:RetentionPolicyRule"
                    },
                    "description": "Al collection of rule blocks as documented below.\n"
                },
                "schedule": {
                    "type": "string",
                    "description": "The schedule of when you would like the policy to run. This can be `Hourly`, `Daily`, `Weekly` or can be a custom cron string.\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The project id of which you would like to apply this policy.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "rules",
                "scope"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RetentionPolicy resources.\n",
                "properties": {
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harbor:index/RetentionPolicyRule:RetentionPolicyRule"
                        },
                        "description": "Al collection of rule blocks as documented below.\n"
                    },
                    "schedule": {
                        "type": "string",
                        "description": "The schedule of when you would like the policy to run. This can be `Hourly`, `Daily`, `Weekly` or can be a custom cron string.\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The project id of which you would like to apply this policy.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "harbor:index/robotAccount:RobotAccount": {
            "description": "## # Resource: harbor.RobotAccount\n\nHarbor supports different levels of robot accounts. Currently `system` and `project` level robot accounts are supported.\n\n## Example Usage\n\n### System Level\nIntroduced in harbor 2.2.0, system level robot accounts can have basically [all available permissions](https://github.com/goharbor/harbor/blob/-/src/common/rbac/const.go) in harbor and are not dependent on a single project.\n\n```hcl\nresource \"random_password\" \"password\" {\n  length  = 12\n  special = false\n}\n\nresource \"harbor_project\" \"main\" {\n    name = \"main\"\n}\n\nresource \"harbor_robot_account\" \"system\" {\n  name        = \"example-system\"\n  description = \"system level robot account\"\n  level       = \"system\"\n  secret      = resource.random_password.password.result\n  permissions {\n    access {\n      action   = \"create\"\n      resource = \"labels\"\n    }\n    kind      = \"system\"\n    namespace = \"/\"\n  }\n  permissions {\n    access {\n      action   = \"push\"\n      resource = \"repository\"\n    }\n    access {\n      action   = \"read\"\n      resource = \"helm-chart\"\n    }\n    access {\n      action   = \"read\"\n      resource = \"helm-chart-version\"\n    }\n    kind      = \"project\"\n    namespace = harbor_project.main.name\n  }\n  permissions {\n    access {\n      action   = \"pull\"\n      resource = \"repository\"\n    }\n    kind      = \"project\"\n    namespace = \"*\"\n  }\n}\n```\n\nThe above example, creates a system level robot account with permissions to\n- permission to create labels on system level\n- pull repository across all projects\n- push repository to project \"my-project-name\"\n- read helm-chart and helm-chart-version in project \"my-project-name\"\n\n### Project Level\n\nOther than system level robot accounts, project level robot accounts can interact on project level only.\nThe [available permissions](https://github.com/goharbor/harbor/blob/-/src/common/rbac/const.go) are mostly the same as for system level robots.\n\n\n```hcl\nresource \"harbor_project\" \"main\" {\n    name = \"main\"\n}\n\nresource \"harbor_robot_account\" \"project\" {\n  name        = \"example-project\"\n  description = \"project level robot account\"\n  level       = \"project\"\n  permissions {\n    access {\n      action   = \"pull\"\n      resource = \"repository\"\n    }\n    access {\n      action   = \"push\"\n      resource = \"repository\"\n    }\n    kind      = \"project\"\n    namespace = harbor_project.main.name\n  }\n}\n```\n\nThe above example creates a project level robot account with permissions to\n- pull repository on project \"main\"\n- push repository on project \"main\"\n",
            "properties": {
                "description": {
                    "type": "string"
                },
                "disable": {
                    "type": "boolean"
                },
                "duration": {
                    "type": "integer"
                },
                "fullName": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harbor:index/RobotAccountPermission:RobotAccountPermission"
                    }
                },
                "robotId": {
                    "type": "string"
                },
                "secret": {
                    "type": "string",
                    "secret": true
                }
            },
            "required": [
                "fullName",
                "level",
                "name",
                "permissions",
                "robotId",
                "secret"
            ],
            "inputProperties": {
                "description": {
                    "type": "string"
                },
                "disable": {
                    "type": "boolean"
                },
                "duration": {
                    "type": "integer"
                },
                "level": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harbor:index/RobotAccountPermission:RobotAccountPermission"
                    }
                },
                "secret": {
                    "type": "string",
                    "secret": true
                }
            },
            "requiredInputs": [
                "level",
                "permissions"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RobotAccount resources.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "disable": {
                        "type": "boolean"
                    },
                    "duration": {
                        "type": "integer"
                    },
                    "fullName": {
                        "type": "string"
                    },
                    "level": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harbor:index/RobotAccountPermission:RobotAccountPermission"
                        }
                    },
                    "robotId": {
                        "type": "string"
                    },
                    "secret": {
                        "type": "string",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "harbor:index/tasks:Tasks": {
            "description": "## Example Usage\n\n```hcl\nresource \"harbor_tasks\" \"main\" {\n  vulnerability_scan_policy = \"daily\"\n}\n```\n",
            "properties": {
                "vulnerabilityScanPolicy": {
                    "type": "string"
                }
            },
            "required": [
                "vulnerabilityScanPolicy"
            ],
            "inputProperties": {
                "vulnerabilityScanPolicy": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "vulnerabilityScanPolicy"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Tasks resources.\n",
                "properties": {
                    "vulnerabilityScanPolicy": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "harbor:index/user:User": {
            "description": "## Example Usage\n\n```hcl\n\nresource \"harbor_user\" \"main\" {\n  username = \"john\"\n  password = \"Password12345!\"\n  full_name = \"John Smith\"\n  email = \"john@smith.com\"\n}\n```\n\n## Import\n\nAn internal user harbor user can be imported using the `user id` eg, ` \u003cbreak\u003e\u003cbreak\u003e```sh\u003cbreak\u003e $ pulumi import harbor:index/user:User main /users/19 \u003cbreak\u003e```\u003cbreak\u003e\u003cbreak\u003e `\n",
            "properties": {
                "admin": {
                    "type": "boolean"
                },
                "comment": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "fullName": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "secret": true
                },
                "username": {
                    "type": "string"
                }
            },
            "required": [
                "email",
                "fullName",
                "password",
                "username"
            ],
            "inputProperties": {
                "admin": {
                    "type": "boolean"
                },
                "comment": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "fullName": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "secret": true
                },
                "username": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "email",
                "fullName",
                "password",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering User resources.\n",
                "properties": {
                    "admin": {
                        "type": "boolean"
                    },
                    "comment": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "fullName": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string",
                        "secret": true
                    },
                    "username": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "harbor:index/getProject:getProject": {
            "description": "## Example Usage\n\n```hcl\ndata \"harbor_project\" \"main\" {\n    name    = \"library\" \n}\n\noutput \"project_id\" {\n    value = data.harbor_project.main.id\n}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getProject.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getProject.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "integer"
                    },
                    "public": {
                        "type": "boolean"
                    },
                    "type": {
                        "type": "string"
                    },
                    "vulnerabilityScanning": {
                        "type": "boolean"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "projectId",
                    "public",
                    "type",
                    "vulnerabilityScanning",
                    "id"
                ]
            }
        },
        "harbor:index/getProjects:getProjects": {
            "description": "## Example Usage\n\n```hcl\ndata \"harbor_projects\" \"proxycache\" {\n    type = \"ProxyCache\"\n}\n\noutput \"proxy_cache_projects\" {\n    value = data.harbor_projects.proxycache\n}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getProjects.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "public": {
                        "type": "boolean"
                    },
                    "type": {
                        "type": "string"
                    },
                    "vulnerabilityScanning": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getProjects.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "projects": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harbor:index/getProjectsProject:getProjectsProject"
                        }
                    },
                    "public": {
                        "type": "boolean"
                    },
                    "type": {
                        "type": "string"
                    },
                    "vulnerabilityScanning": {
                        "type": "boolean"
                    }
                },
                "type": "object",
                "required": [
                    "projects",
                    "id"
                ]
            }
        },
        "harbor:index/getRegistry:getRegistry": {
            "description": "## Example Usage\n\n```hcl\ndata \"harbor_registry\" \"main\" {\n  name          = \"test_docker_harbor\"\n}\n\noutput \"harbor_registry_id\" {\n  value   = data.harbor_registry.main.id\n}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRegistry.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRegistry.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "insecure": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "registryId": {
                        "type": "integer"
                    },
                    "status": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "insecure",
                    "name",
                    "registryId",
                    "status",
                    "type",
                    "url",
                    "id"
                ]
            }
        }
    }
}